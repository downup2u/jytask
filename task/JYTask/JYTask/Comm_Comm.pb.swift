// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers


internal struct Comm { }

internal func == (lhs: Comm.PkgConnectReq, rhs: Comm.PkgConnectReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasApptype == rhs.hasApptype) && (!lhs.hasApptype || lhs.apptype == rhs.apptype)
  fieldCheck = fieldCheck && (lhs.hasAppversion == rhs.hasAppversion) && (!lhs.hasAppversion || lhs.appversion == rhs.appversion)
  fieldCheck = fieldCheck && (lhs.hasApplanguage == rhs.hasApplanguage) && (!lhs.hasApplanguage || lhs.applanguage == rhs.applanguage)
  fieldCheck = fieldCheck && (lhs.hasOstype == rhs.hasOstype) && (!lhs.hasOstype || lhs.ostype == rhs.ostype)
  fieldCheck = fieldCheck && (lhs.hasOsversion == rhs.hasOsversion) && (!lhs.hasOsversion || lhs.osversion == rhs.osversion)
  fieldCheck = fieldCheck && (lhs.hasOsrr == rhs.hasOsrr) && (!lhs.hasOsrr || lhs.osrr == rhs.osrr)
  fieldCheck = fieldCheck && (lhs.hasClientsn == rhs.hasClientsn) && (!lhs.hasClientsn || lhs.clientsn == rhs.clientsn)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgConnectReply, rhs: Comm.PkgConnectReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.urllist == rhs.urllist)
  fieldCheck = fieldCheck && (lhs.hasEncryptkey == rhs.hasEncryptkey) && (!lhs.hasEncryptkey || lhs.encryptkey == rhs.encryptkey)
  fieldCheck = fieldCheck && (lhs.hasHashedclientsn == rhs.hasHashedclientsn) && (!lhs.hasHashedclientsn || lhs.hashedclientsn == rhs.hashedclientsn)
  fieldCheck = fieldCheck && (lhs.hasServersn == rhs.hasServersn) && (!lhs.hasServersn || lhs.serversn == rhs.serversn)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCheckReq, rhs: Comm.PkgUserCheckReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCheckReply, rhs: Comm.PkgUserCheckReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCheckInvitionCodeReq, rhs: Comm.PkgUserCheckInvitionCodeReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasInvitioncode == rhs.hasInvitioncode) && (!lhs.hasInvitioncode || lhs.invitioncode == rhs.invitioncode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCheckInvitionCodeReply, rhs: Comm.PkgUserCheckInvitionCodeReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserGetAuthReq, rhs: Comm.PkgUserGetAuthReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserGetAuthReply, rhs: Comm.PkgUserGetAuthReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCreateReq, rhs: Comm.PkgUserCreateReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasAuthcode == rhs.hasAuthcode) && (!lhs.hasAuthcode || lhs.authcode == rhs.authcode)
  fieldCheck = fieldCheck && (lhs.hasInvitioncode == rhs.hasInvitioncode) && (!lhs.hasInvitioncode || lhs.invitioncode == rhs.invitioncode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCreateReply, rhs: Comm.PkgUserCreateReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserLoginReq, rhs: Comm.PkgUserLoginReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasHashedserversn == rhs.hasHashedserversn) && (!lhs.hasHashedserversn || lhs.hashedserversn == rhs.hashedserversn)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgCompanyInfo, rhs: Comm.PkgCompanyInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCompanyid == rhs.hasCompanyid) && (!lhs.hasCompanyid || lhs.companyid == rhs.companyid)
  fieldCheck = fieldCheck && (lhs.hasCompanyname == rhs.hasCompanyname) && (!lhs.hasCompanyname || lhs.companyname == rhs.companyname)
  fieldCheck = fieldCheck && (lhs.hasCompanyusernumber == rhs.hasCompanyusernumber) && (!lhs.hasCompanyusernumber || lhs.companyusernumber == rhs.companyusernumber)
  fieldCheck = fieldCheck && (lhs.hasCompanycreatetime == rhs.hasCompanycreatetime) && (!lhs.hasCompanycreatetime || lhs.companycreatetime == rhs.companycreatetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserLoginReply, rhs: Comm.PkgUserLoginReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasIsloginsuccess == rhs.hasIsloginsuccess) && (!lhs.hasIsloginsuccess || lhs.isloginsuccess == rhs.isloginsuccess)
  fieldCheck = fieldCheck && (lhs.hasPermission == rhs.hasPermission) && (!lhs.hasPermission || lhs.permission == rhs.permission)
  fieldCheck = fieldCheck && (lhs.hasCompanyid == rhs.hasCompanyid) && (!lhs.hasCompanyid || lhs.companyid == rhs.companyid)
  fieldCheck = fieldCheck && (lhs.hasCompanyname == rhs.hasCompanyname) && (!lhs.hasCompanyname || lhs.companyname == rhs.companyname)
  fieldCheck = fieldCheck && (lhs.hasCompanyusernumber == rhs.hasCompanyusernumber) && (!lhs.hasCompanyusernumber || lhs.companyusernumber == rhs.companyusernumber)
  fieldCheck = fieldCheck && (lhs.hasCreatetime == rhs.hasCreatetime) && (!lhs.hasCreatetime || lhs.createtime == rhs.createtime)
  fieldCheck = fieldCheck && (lhs.hasRolename == rhs.hasRolename) && (!lhs.hasRolename || lhs.rolename == rhs.rolename)
  fieldCheck = fieldCheck && (lhs.hasCompanycreatetime == rhs.hasCompanycreatetime) && (!lhs.hasCompanycreatetime || lhs.companycreatetime == rhs.companycreatetime)
  fieldCheck = fieldCheck && (lhs.hasPermissionroleid == rhs.hasPermissionroleid) && (!lhs.hasPermissionroleid || lhs.permissionroleid == rhs.permissionroleid)
  fieldCheck = fieldCheck && (lhs.hasCompanyinfo == rhs.hasCompanyinfo) && (!lhs.hasCompanyinfo || lhs.companyinfo == rhs.companyinfo)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserGetPasswordReq, rhs: Comm.PkgUserGetPasswordReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserGetPasswordReply, rhs: Comm.PkgUserGetPasswordReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserResetPasswordReq, rhs: Comm.PkgUserResetPasswordReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasAuthcode == rhs.hasAuthcode) && (!lhs.hasAuthcode || lhs.authcode == rhs.authcode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserResetPasswordReply, rhs: Comm.PkgUserResetPasswordReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasOldpassword == rhs.hasOldpassword) && (!lhs.hasOldpassword || lhs.oldpassword == rhs.oldpassword)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserSetReq, rhs: Comm.PkgUserSetReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasSettype == rhs.hasSettype) && (!lhs.hasSettype || lhs.settype == rhs.settype)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasNewpassword == rhs.hasNewpassword) && (!lhs.hasNewpassword || lhs.newpassword == rhs.newpassword)
  fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserSetReply, rhs: Comm.PkgUserSetReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserInvitionUserReq, rhs: Comm.PkgUserInvitionUserReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserInvitionUserReply, rhs: Comm.PkgUserInvitionUserReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasInvitioncode == rhs.hasInvitioncode) && (!lhs.hasInvitioncode || lhs.invitioncode == rhs.invitioncode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserInvitionCheckReq, rhs: Comm.PkgUserInvitionCheckReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInvitioncode == rhs.hasInvitioncode) && (!lhs.hasInvitioncode || lhs.invitioncode == rhs.invitioncode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserInvitionCheckReply, rhs: Comm.PkgUserInvitionCheckReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasPermission == rhs.hasPermission) && (!lhs.hasPermission || lhs.permission == rhs.permission)
  fieldCheck = fieldCheck && (lhs.hasCompanyid == rhs.hasCompanyid) && (!lhs.hasCompanyid || lhs.companyid == rhs.companyid)
  fieldCheck = fieldCheck && (lhs.hasCompanyname == rhs.hasCompanyname) && (!lhs.hasCompanyname || lhs.companyname == rhs.companyname)
  fieldCheck = fieldCheck && (lhs.hasCompanyusernumber == rhs.hasCompanyusernumber) && (!lhs.hasCompanyusernumber || lhs.companyusernumber == rhs.companyusernumber)
  fieldCheck = fieldCheck && (lhs.hasRolename == rhs.hasRolename) && (!lhs.hasRolename || lhs.rolename == rhs.rolename)
  fieldCheck = fieldCheck && (lhs.hasCompanycreatetime == rhs.hasCompanycreatetime) && (!lhs.hasCompanycreatetime || lhs.companycreatetime == rhs.companycreatetime)
  fieldCheck = fieldCheck && (lhs.hasPermissionroleid == rhs.hasPermissionroleid) && (!lhs.hasPermissionroleid || lhs.permissionroleid == rhs.permissionroleid)
  fieldCheck = fieldCheck && (lhs.hasCompanyinfo == rhs.hasCompanyinfo) && (!lhs.hasCompanyinfo || lhs.companyinfo == rhs.companyinfo)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCreateCompanyReq, rhs: Comm.PkgUserCreateCompanyReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCompanyname == rhs.hasCompanyname) && (!lhs.hasCompanyname || lhs.companyname == rhs.companyname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserCreateCompanyReply, rhs: Comm.PkgUserCreateCompanyReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasCompanyid == rhs.hasCompanyid) && (!lhs.hasCompanyid || lhs.companyid == rhs.companyid)
  fieldCheck = fieldCheck && (lhs.hasCompanyname == rhs.hasCompanyname) && (!lhs.hasCompanyname || lhs.companyname == rhs.companyname)
  fieldCheck = fieldCheck && (lhs.hasCompanyusernumber == rhs.hasCompanyusernumber) && (!lhs.hasCompanyusernumber || lhs.companyusernumber == rhs.companyusernumber)
  fieldCheck = fieldCheck && (lhs.hasRolename == rhs.hasRolename) && (!lhs.hasRolename || lhs.rolename == rhs.rolename)
  fieldCheck = fieldCheck && (lhs.hasCompanycreatetime == rhs.hasCompanycreatetime) && (!lhs.hasCompanycreatetime || lhs.companycreatetime == rhs.companycreatetime)
  fieldCheck = fieldCheck && (lhs.hasPermissionroleid == rhs.hasPermissionroleid) && (!lhs.hasPermissionroleid || lhs.permissionroleid == rhs.permissionroleid)
  fieldCheck = fieldCheck && (lhs.hasCompanyinfo == rhs.hasCompanyinfo) && (!lhs.hasCompanyinfo || lhs.companyinfo == rhs.companyinfo)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserReassignAdminReq, rhs: Comm.PkgUserReassignAdminReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAdminuserid == rhs.hasAdminuserid) && (!lhs.hasAdminuserid || lhs.adminuserid == rhs.adminuserid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserReassignAdminReply, rhs: Comm.PkgUserReassignAdminReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasPermission == rhs.hasPermission) && (!lhs.hasPermission || lhs.permission == rhs.permission)
  fieldCheck = fieldCheck && (lhs.hasRolename == rhs.hasRolename) && (!lhs.hasRolename || lhs.rolename == rhs.rolename)
  fieldCheck = fieldCheck && (lhs.hasPermissionroleid == rhs.hasPermissionroleid) && (!lhs.hasPermissionroleid || lhs.permissionroleid == rhs.permissionroleid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserDeleteFromCompanyReq, rhs: Comm.PkgUserDeleteFromCompanyReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.useridlist == rhs.useridlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserDeleteFromCompanyReply, rhs: Comm.PkgUserDeleteFromCompanyReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasCompanyusernumber == rhs.hasCompanyusernumber) && (!lhs.hasCompanyusernumber || lhs.companyusernumber == rhs.companyusernumber)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserExitCompanyReq, rhs: Comm.PkgUserExitCompanyReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEncmd == rhs.hasEncmd) && (!lhs.hasEncmd || lhs.encmd == rhs.encmd)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgUserExitCompanyReply, rhs: Comm.PkgUserExitCompanyReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskInfo, rhs: Comm.PkgTaskInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasParentid == rhs.hasParentid) && (!lhs.hasParentid || lhs.parentid == rhs.parentid)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasTaskdate == rhs.hasTaskdate) && (!lhs.hasTaskdate || lhs.taskdate == rhs.taskdate)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = fieldCheck && (lhs.hasRemark == rhs.hasRemark) && (!lhs.hasRemark || lhs.remark == rhs.remark)
  fieldCheck = fieldCheck && (lhs.hasTasklevel == rhs.hasTasklevel) && (!lhs.hasTasklevel || lhs.tasklevel == rhs.tasklevel)
  fieldCheck = fieldCheck && (lhs.hasCreateuserid == rhs.hasCreateuserid) && (!lhs.hasCreateuserid || lhs.createuserid == rhs.createuserid)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.hasCreatetime == rhs.hasCreatetime) && (!lhs.hasCreatetime || lhs.createtime == rhs.createtime)
  fieldCheck = fieldCheck && (lhs.hasFinishtime == rhs.hasFinishtime) && (!lhs.hasFinishtime || lhs.finishtime == rhs.finishtime)
  fieldCheck = fieldCheck && (lhs.hasAccepteduserid == rhs.hasAccepteduserid) && (!lhs.hasAccepteduserid || lhs.accepteduserid == rhs.accepteduserid)
  fieldCheck = fieldCheck && (lhs.hasCoworkid == rhs.hasCoworkid) && (!lhs.hasCoworkid || lhs.coworkid == rhs.coworkid)
  fieldCheck = fieldCheck && (lhs.hasUpdatetime == rhs.hasUpdatetime) && (!lhs.hasUpdatetime || lhs.updatetime == rhs.updatetime)
  fieldCheck = fieldCheck && (lhs.hasIsreaded == rhs.hasIsreaded) && (!lhs.hasIsreaded || lhs.isreaded == rhs.isreaded)
  fieldCheck = fieldCheck && (lhs.hasSortflag == rhs.hasSortflag) && (!lhs.hasSortflag || lhs.sortflag == rhs.sortflag)
  fieldCheck = fieldCheck && (lhs.hasCreatedrealname == rhs.hasCreatedrealname) && (!lhs.hasCreatedrealname || lhs.createdrealname == rhs.createdrealname)
  fieldCheck = fieldCheck && (lhs.hasAcceptedrealname == rhs.hasAcceptedrealname) && (!lhs.hasAcceptedrealname || lhs.acceptedrealname == rhs.acceptedrealname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition, rhs: Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTaskdatestart == rhs.hasTaskdatestart) && (!lhs.hasTaskdatestart || lhs.taskdatestart == rhs.taskdatestart)
  fieldCheck = fieldCheck && (lhs.hasTaskdateend == rhs.hasTaskdateend) && (!lhs.hasTaskdateend || lhs.taskdateend == rhs.taskdateend)
  fieldCheck = fieldCheck && (lhs.hasKeyforname == rhs.hasKeyforname) && (!lhs.hasKeyforname || lhs.keyforname == rhs.keyforname)
  fieldCheck = fieldCheck && (lhs.hasKeyforcontent == rhs.hasKeyforcontent) && (!lhs.hasKeyforcontent || lhs.keyforcontent == rhs.keyforcontent)
  fieldCheck = fieldCheck && (lhs.taskstatuslist == rhs.taskstatuslist)
  fieldCheck = fieldCheck && (lhs.hasEnreadedflag == rhs.hasEnreadedflag) && (!lhs.hasEnreadedflag || lhs.enreadedflag == rhs.enreadedflag)
  fieldCheck = fieldCheck && (lhs.hasLastupdatetime == rhs.hasLastupdatetime) && (!lhs.hasLastupdatetime || lhs.lastupdatetime == rhs.lastupdatetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskPageQueryReq, rhs: Comm.PkgTaskPageQueryReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTaskflag == rhs.hasTaskflag) && (!lhs.hasTaskflag || lhs.taskflag == rhs.taskflag)
  fieldCheck = fieldCheck && (lhs.hasEnconditon == rhs.hasEnconditon) && (!lhs.hasEnconditon || lhs.enconditon == rhs.enconditon)
  fieldCheck = fieldCheck && (lhs.hasPkgtaskquerycondition == rhs.hasPkgtaskquerycondition) && (!lhs.hasPkgtaskquerycondition || lhs.pkgtaskquerycondition == rhs.pkgtaskquerycondition)
  fieldCheck = fieldCheck && (lhs.hasPageflag == rhs.hasPageflag) && (!lhs.hasPageflag || lhs.pageflag == rhs.pageflag)
  fieldCheck = fieldCheck && (lhs.hasIndexstart == rhs.hasIndexstart) && (!lhs.hasIndexstart || lhs.indexstart == rhs.indexstart)
  fieldCheck = fieldCheck && (lhs.hasIndexend == rhs.hasIndexend) && (!lhs.hasIndexend || lhs.indexend == rhs.indexend)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskPageQueryReply, rhs: Comm.PkgTaskPageQueryReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.taskinfolist == rhs.taskinfolist)
  fieldCheck = fieldCheck && (lhs.hasReturnnum == rhs.hasReturnnum) && (!lhs.hasReturnnum || lhs.returnnum == rhs.returnnum)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskQueryReq, rhs: Comm.PkgTaskQueryReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasQueryflag == rhs.hasQueryflag) && (!lhs.hasQueryflag || lhs.queryflag == rhs.queryflag)
  fieldCheck = fieldCheck && (lhs.hasTaskid == rhs.hasTaskid) && (!lhs.hasTaskid || lhs.taskid == rhs.taskid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskQueryReply, rhs: Comm.PkgTaskQueryReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasTaskinfo == rhs.hasTaskinfo) && (!lhs.hasTaskinfo || lhs.taskinfo == rhs.taskinfo)
  fieldCheck = fieldCheck && (lhs.taskinfolist == rhs.taskinfolist)
  fieldCheck = fieldCheck && (lhs.accepteduseridlist == rhs.accepteduseridlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskSortFlag, rhs: Comm.PkgTaskSortFlag) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTaskid == rhs.hasTaskid) && (!lhs.hasTaskid || lhs.taskid == rhs.taskid)
  fieldCheck = fieldCheck && (lhs.hasSortflag == rhs.hasSortflag) && (!lhs.hasSortflag || lhs.sortflag == rhs.sortflag)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskSetSortFlagReq, rhs: Comm.PkgTaskSetSortFlagReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.tasksortflaglist == rhs.tasksortflaglist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskSetSortFlagReply, rhs: Comm.PkgTaskSetSortFlagReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskOperationReq, rhs: Comm.PkgTaskOperationReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTaskoperation == rhs.hasTaskoperation) && (!lhs.hasTaskoperation || lhs.taskoperation == rhs.taskoperation)
  fieldCheck = fieldCheck && (lhs.hasTaskinfo == rhs.hasTaskinfo) && (!lhs.hasTaskinfo || lhs.taskinfo == rhs.taskinfo)
  fieldCheck = fieldCheck && (lhs.taskinfolist == rhs.taskinfolist)
  fieldCheck = fieldCheck && (lhs.accepteduseridlist == rhs.accepteduseridlist)
  fieldCheck = fieldCheck && (lhs.hasTaskid == rhs.hasTaskid) && (!lhs.hasTaskid || lhs.taskid == rhs.taskid)
  fieldCheck = fieldCheck && (lhs.hasReason == rhs.hasReason) && (!lhs.hasReason || lhs.reason == rhs.reason)
  fieldCheck = fieldCheck && (lhs.hasUpdatestatus == rhs.hasUpdatestatus) && (!lhs.hasUpdatestatus || lhs.updatestatus == rhs.updatestatus)
  fieldCheck = fieldCheck && (lhs.hasUpdatereaded == rhs.hasUpdatereaded) && (!lhs.hasUpdatereaded || lhs.updatereaded == rhs.updatereaded)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgTaskOperationReply, rhs: Comm.PkgTaskOperationReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasTaskid == rhs.hasTaskid) && (!lhs.hasTaskid || lhs.taskid == rhs.taskid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgCompanyGroup, rhs: Comm.PkgCompanyGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGroupid == rhs.hasGroupid) && (!lhs.hasGroupid || lhs.groupid == rhs.groupid)
  fieldCheck = fieldCheck && (lhs.hasCompanyid == rhs.hasCompanyid) && (!lhs.hasCompanyid || lhs.companyid == rhs.companyid)
  fieldCheck = fieldCheck && (lhs.hasGroupname == rhs.hasGroupname) && (!lhs.hasGroupname || lhs.groupname == rhs.groupname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgGroupUser, rhs: Comm.PkgGroupUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGroupid == rhs.hasGroupid) && (!lhs.hasGroupid || lhs.groupid == rhs.groupid)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasPermission == rhs.hasPermission) && (!lhs.hasPermission || lhs.permission == rhs.permission)
  fieldCheck = fieldCheck && (lhs.hasCreatetime == rhs.hasCreatetime) && (!lhs.hasCreatetime || lhs.createtime == rhs.createtime)
  fieldCheck = fieldCheck && (lhs.hasRolename == rhs.hasRolename) && (!lhs.hasRolename || lhs.rolename == rhs.rolename)
  fieldCheck = fieldCheck && (lhs.hasPermissionroleid == rhs.hasPermissionroleid) && (!lhs.hasPermissionroleid || lhs.permissionroleid == rhs.permissionroleid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgCompanyGroupQueryReq, rhs: Comm.PkgCompanyGroupQueryReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasQuerytype == rhs.hasQuerytype) && (!lhs.hasQuerytype || lhs.querytype == rhs.querytype)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgCompanyGroupQueryReply, rhs: Comm.PkgCompanyGroupQueryReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.companygrouplist == rhs.companygrouplist)
  fieldCheck = fieldCheck && (lhs.groupuserlist == rhs.groupuserlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgAdvInfo, rhs: Comm.PkgAdvInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasUrlpic == rhs.hasUrlpic) && (!lhs.hasUrlpic || lhs.urlpic == rhs.urlpic)
  fieldCheck = fieldCheck && (lhs.hasAdvtxt == rhs.hasAdvtxt) && (!lhs.hasAdvtxt || lhs.advtxt == rhs.advtxt)
  fieldCheck = fieldCheck && (lhs.hasAdvdesc == rhs.hasAdvdesc) && (!lhs.hasAdvdesc || lhs.advdesc == rhs.advdesc)
  fieldCheck = fieldCheck && (lhs.hasCreatetime == rhs.hasCreatetime) && (!lhs.hasCreatetime || lhs.createtime == rhs.createtime)
  fieldCheck = fieldCheck && (lhs.hasExpiretime == rhs.hasExpiretime) && (!lhs.hasExpiretime || lhs.expiretime == rhs.expiretime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgAdvQueryReq, rhs: Comm.PkgAdvQueryReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasQueryflag == rhs.hasQueryflag) && (!lhs.hasQueryflag || lhs.queryflag == rhs.queryflag)
  fieldCheck = fieldCheck && (lhs.hasNumreq == rhs.hasNumreq) && (!lhs.hasNumreq || lhs.numreq == rhs.numreq)
  fieldCheck = fieldCheck && (lhs.hasAdvid == rhs.hasAdvid) && (!lhs.hasAdvid || lhs.advid == rhs.advid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgAdvQueryReply, rhs: Comm.PkgAdvQueryReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.advinfolist == rhs.advinfolist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgQueryMyProfileReq, rhs: Comm.PkgQueryMyProfileReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCurversion == rhs.hasCurversion) && (!lhs.hasCurversion || lhs.curversion == rhs.curversion)
  fieldCheck = fieldCheck && (lhs.hasPlatmform == rhs.hasPlatmform) && (!lhs.hasPlatmform || lhs.platmform == rhs.platmform)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgQueryMyProfileReply, rhs: Comm.PkgQueryMyProfileReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersionlastest == rhs.hasVersionlastest) && (!lhs.hasVersionlastest || lhs.versionlastest == rhs.versionlastest)
  fieldCheck = fieldCheck && (lhs.hasVersiondownloadurl == rhs.hasVersiondownloadurl) && (!lhs.hasVersiondownloadurl || lhs.versiondownloadurl == rhs.versiondownloadurl)
  fieldCheck = fieldCheck && (lhs.hasTasknumbernotfinished == rhs.hasTasknumbernotfinished) && (!lhs.hasTasknumbernotfinished || lhs.tasknumbernotfinished == rhs.tasknumbernotfinished)
  fieldCheck = fieldCheck && (lhs.hasTasknumberfinshed == rhs.hasTasknumberfinshed) && (!lhs.hasTasknumberfinshed || lhs.tasknumberfinshed == rhs.tasknumberfinshed)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgLogoutReq, rhs: Comm.PkgLogoutReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgLogoutReply, rhs: Comm.PkgLogoutReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgNotifyReq, rhs: Comm.PkgNotifyReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCurversion == rhs.hasCurversion) && (!lhs.hasCurversion || lhs.curversion == rhs.curversion)
  fieldCheck = fieldCheck && (lhs.hasPlatmform == rhs.hasPlatmform) && (!lhs.hasPlatmform || lhs.platmform == rhs.platmform)
  fieldCheck = fieldCheck && (lhs.hasDataupatedtime == rhs.hasDataupatedtime) && (!lhs.hasDataupatedtime || lhs.dataupatedtime == rhs.dataupatedtime)
  fieldCheck = fieldCheck && (lhs.hasForceupdateflag == rhs.hasForceupdateflag) && (!lhs.hasForceupdateflag || lhs.forceupdateflag == rhs.forceupdateflag)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgNotifyReply, rhs: Comm.PkgNotifyReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDataupatedtime == rhs.hasDataupatedtime) && (!lhs.hasDataupatedtime || lhs.dataupatedtime == rhs.dataupatedtime)
  fieldCheck = fieldCheck && (lhs.hasNotifyupdatedflag == rhs.hasNotifyupdatedflag) && (!lhs.hasNotifyupdatedflag || lhs.notifyupdatedflag == rhs.notifyupdatedflag)
  fieldCheck = fieldCheck && (lhs.hasCompanyinfo == rhs.hasCompanyinfo) && (!lhs.hasCompanyinfo || lhs.companyinfo == rhs.companyinfo)
  fieldCheck = fieldCheck && (lhs.hasTasknumbernotfinished == rhs.hasTasknumbernotfinished) && (!lhs.hasTasknumbernotfinished || lhs.tasknumbernotfinished == rhs.tasknumbernotfinished)
  fieldCheck = fieldCheck && (lhs.hasTasknumberfinished == rhs.hasTasknumberfinished) && (!lhs.hasTasknumberfinished || lhs.tasknumberfinished == rhs.tasknumberfinished)
  fieldCheck = fieldCheck && (lhs.hasVersionlastest == rhs.hasVersionlastest) && (!lhs.hasVersionlastest || lhs.versionlastest == rhs.versionlastest)
  fieldCheck = fieldCheck && (lhs.hasVersiondownloadurl == rhs.hasVersiondownloadurl) && (!lhs.hasVersiondownloadurl || lhs.versiondownloadurl == rhs.versiondownloadurl)
  fieldCheck = fieldCheck && (lhs.hasPermission == rhs.hasPermission) && (!lhs.hasPermission || lhs.permission == rhs.permission)
  fieldCheck = fieldCheck && (lhs.hasRolename == rhs.hasRolename) && (!lhs.hasRolename || lhs.rolename == rhs.rolename)
  fieldCheck = fieldCheck && (lhs.hasPermissionroleid == rhs.hasPermissionroleid) && (!lhs.hasPermissionroleid || lhs.permissionroleid == rhs.permissionroleid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgPhoneCppWrapReq, rhs: Comm.PkgPhoneCppWrapReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasEnreqtype == rhs.hasEnreqtype) && (!lhs.hasEnreqtype || lhs.enreqtype == rhs.enreqtype)
  fieldCheck = fieldCheck && (lhs.hasLasttaskupdatetime == rhs.hasLasttaskupdatetime) && (!lhs.hasLasttaskupdatetime || lhs.lasttaskupdatetime == rhs.lasttaskupdatetime)
  fieldCheck = fieldCheck && (lhs.taskinfolist == rhs.taskinfolist)
  fieldCheck = fieldCheck && (lhs.hasTaskpagequeryreq == rhs.hasTaskpagequeryreq) && (!lhs.hasTaskpagequeryreq || lhs.taskpagequeryreq == rhs.taskpagequeryreq)
  fieldCheck = fieldCheck && (lhs.hasTaskqueryreq == rhs.hasTaskqueryreq) && (!lhs.hasTaskqueryreq || lhs.taskqueryreq == rhs.taskqueryreq)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comm.PkgPhoneCppWrapReply, rhs: Comm.PkgPhoneCppWrapReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasLasttaskupdatetime == rhs.hasLasttaskupdatetime) && (!lhs.hasLasttaskupdatetime || lhs.lasttaskupdatetime == rhs.lasttaskupdatetime)
  fieldCheck = fieldCheck && (lhs.hasTaskpagequeryreply == rhs.hasTaskpagequeryreply) && (!lhs.hasTaskpagequeryreply || lhs.taskpagequeryreply == rhs.taskpagequeryreply)
  fieldCheck = fieldCheck && (lhs.hasTaskqueryreply == rhs.hasTaskqueryreply) && (!lhs.hasTaskqueryreply || lhs.taskqueryreply == rhs.taskqueryreply)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Comm {
  internal struct CommRoot {
    internal static var sharedInstance : CommRoot {
     struct Static {
         static let instance : CommRoot = CommRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  internal enum EnGetType:Int32 {
    case GtPhone = 0
    case GtEmail = 1
    case GtUserid = 2
    case GtUsername = 3

  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum EnUpdatedFlag:Int32 {
    case UfCompanyinfo = 1
    case UfTaskcowork = 2
    case UfMytask = 4
    case UfMytaskfinishednumbers = 8
    case UfUserrole = 16
    case UfAdvinfo = 1024
    case UfVersion = 2048

  }

  //Enum type declaration end 

  final internal class PkgConnectReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasApptype:Bool = false
    private(set) var apptype:String = ""

    private(set) var hasAppversion:Bool = false
    private(set) var appversion:String = ""

    private(set) var hasApplanguage:Bool = false
    private(set) var applanguage:String = ""

    private(set) var hasOstype:Bool = false
    private(set) var ostype:String = ""

    private(set) var hasOsversion:Bool = false
    private(set) var osversion:String = ""

    private(set) var hasOsrr:Bool = false
    private(set) var osrr:String = ""

    private(set) var hasClientsn:Bool = false
    private(set) var clientsn:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasApptype {
        output.writeString(2, value:apptype)
      }
      if hasAppversion {
        output.writeString(3, value:appversion)
      }
      if hasApplanguage {
        output.writeString(4, value:applanguage)
      }
      if hasOstype {
        output.writeString(10, value:ostype)
      }
      if hasOsversion {
        output.writeString(11, value:osversion)
      }
      if hasOsrr {
        output.writeString(12, value:osrr)
      }
      if hasClientsn {
        output.writeString(101, value:clientsn)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasApptype {
        serialize_size += apptype.computeStringSize(2)
      }
      if hasAppversion {
        serialize_size += appversion.computeStringSize(3)
      }
      if hasApplanguage {
        serialize_size += applanguage.computeStringSize(4)
      }
      if hasOstype {
        serialize_size += ostype.computeStringSize(10)
      }
      if hasOsversion {
        serialize_size += osversion.computeStringSize(11)
      }
      if hasOsrr {
        serialize_size += osrr.computeStringSize(12)
      }
      if hasClientsn {
        serialize_size += clientsn.computeStringSize(101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgConnectReq {
      return Comm.PkgConnectReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgConnectReq {
      return Comm.PkgConnectReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgConnectReq {
      return Comm.PkgConnectReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgConnectReq {
      return Comm.PkgConnectReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgConnectReq {
      return Comm.PkgConnectReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgConnectReq {
      return Comm.PkgConnectReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgConnectReqBuilder {
      return Comm.PkgConnectReq.classBuilder() as! Comm.PkgConnectReqBuilder
    }
    internal func builder() -> Comm.PkgConnectReqBuilder {
      return classBuilder() as! Comm.PkgConnectReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgConnectReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgConnectReq.builder()
    }
    internal func toBuilder() -> Comm.PkgConnectReqBuilder {
      return Comm.PkgConnectReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgConnectReq) -> Comm.PkgConnectReqBuilder {
      return Comm.PkgConnectReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasApptype {
        output += "\(indent) apptype: \(apptype) \n"
      }
      if hasAppversion {
        output += "\(indent) appversion: \(appversion) \n"
      }
      if hasApplanguage {
        output += "\(indent) applanguage: \(applanguage) \n"
      }
      if hasOstype {
        output += "\(indent) ostype: \(ostype) \n"
      }
      if hasOsversion {
        output += "\(indent) osversion: \(osversion) \n"
      }
      if hasOsrr {
        output += "\(indent) osrr: \(osrr) \n"
      }
      if hasClientsn {
        output += "\(indent) clientsn: \(clientsn) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasApptype {
               hashCode = (hashCode &* 31) &+ apptype.hashValue
            }
            if hasAppversion {
               hashCode = (hashCode &* 31) &+ appversion.hashValue
            }
            if hasApplanguage {
               hashCode = (hashCode &* 31) &+ applanguage.hashValue
            }
            if hasOstype {
               hashCode = (hashCode &* 31) &+ ostype.hashValue
            }
            if hasOsversion {
               hashCode = (hashCode &* 31) &+ osversion.hashValue
            }
            if hasOsrr {
               hashCode = (hashCode &* 31) &+ osrr.hashValue
            }
            if hasClientsn {
               hashCode = (hashCode &* 31) &+ clientsn.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgConnectReq"
    }
    override internal func className() -> String {
        return "Comm.PkgConnectReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgConnectReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgConnectReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgConnectReq

    required override internal init () {
       builderResult = Comm.PkgConnectReq()
       super.init()
    }
    var hasApptype:Bool {
         get {
              return builderResult.hasApptype
         }
    }
    var apptype:String {
         get {
              return builderResult.apptype
         }
         set (value) {
             builderResult.hasApptype = true
             builderResult.apptype = value
         }
    }
    func setApptype(value:String)-> Comm.PkgConnectReqBuilder {
      self.apptype = value
      return self
    }
    internal func clearApptype() -> Comm.PkgConnectReqBuilder{
         builderResult.hasApptype = false
         builderResult.apptype = ""
         return self
    }
    var hasAppversion:Bool {
         get {
              return builderResult.hasAppversion
         }
    }
    var appversion:String {
         get {
              return builderResult.appversion
         }
         set (value) {
             builderResult.hasAppversion = true
             builderResult.appversion = value
         }
    }
    func setAppversion(value:String)-> Comm.PkgConnectReqBuilder {
      self.appversion = value
      return self
    }
    internal func clearAppversion() -> Comm.PkgConnectReqBuilder{
         builderResult.hasAppversion = false
         builderResult.appversion = ""
         return self
    }
    var hasApplanguage:Bool {
         get {
              return builderResult.hasApplanguage
         }
    }
    var applanguage:String {
         get {
              return builderResult.applanguage
         }
         set (value) {
             builderResult.hasApplanguage = true
             builderResult.applanguage = value
         }
    }
    func setApplanguage(value:String)-> Comm.PkgConnectReqBuilder {
      self.applanguage = value
      return self
    }
    internal func clearApplanguage() -> Comm.PkgConnectReqBuilder{
         builderResult.hasApplanguage = false
         builderResult.applanguage = ""
         return self
    }
    var hasOstype:Bool {
         get {
              return builderResult.hasOstype
         }
    }
    var ostype:String {
         get {
              return builderResult.ostype
         }
         set (value) {
             builderResult.hasOstype = true
             builderResult.ostype = value
         }
    }
    func setOstype(value:String)-> Comm.PkgConnectReqBuilder {
      self.ostype = value
      return self
    }
    internal func clearOstype() -> Comm.PkgConnectReqBuilder{
         builderResult.hasOstype = false
         builderResult.ostype = ""
         return self
    }
    var hasOsversion:Bool {
         get {
              return builderResult.hasOsversion
         }
    }
    var osversion:String {
         get {
              return builderResult.osversion
         }
         set (value) {
             builderResult.hasOsversion = true
             builderResult.osversion = value
         }
    }
    func setOsversion(value:String)-> Comm.PkgConnectReqBuilder {
      self.osversion = value
      return self
    }
    internal func clearOsversion() -> Comm.PkgConnectReqBuilder{
         builderResult.hasOsversion = false
         builderResult.osversion = ""
         return self
    }
    var hasOsrr:Bool {
         get {
              return builderResult.hasOsrr
         }
    }
    var osrr:String {
         get {
              return builderResult.osrr
         }
         set (value) {
             builderResult.hasOsrr = true
             builderResult.osrr = value
         }
    }
    func setOsrr(value:String)-> Comm.PkgConnectReqBuilder {
      self.osrr = value
      return self
    }
    internal func clearOsrr() -> Comm.PkgConnectReqBuilder{
         builderResult.hasOsrr = false
         builderResult.osrr = ""
         return self
    }
    var hasClientsn:Bool {
         get {
              return builderResult.hasClientsn
         }
    }
    var clientsn:String {
         get {
              return builderResult.clientsn
         }
         set (value) {
             builderResult.hasClientsn = true
             builderResult.clientsn = value
         }
    }
    func setClientsn(value:String)-> Comm.PkgConnectReqBuilder {
      self.clientsn = value
      return self
    }
    internal func clearClientsn() -> Comm.PkgConnectReqBuilder{
         builderResult.hasClientsn = false
         builderResult.clientsn = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgConnectReqBuilder {
      builderResult = Comm.PkgConnectReq()
      return self
    }
    internal override func clone() -> Comm.PkgConnectReqBuilder {
      return Comm.PkgConnectReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgConnectReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgConnectReq {
      var returnMe:Comm.PkgConnectReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgConnectReq) -> Comm.PkgConnectReqBuilder {
      if (other == Comm.PkgConnectReq()) {
       return self
      }
      if other.hasApptype {
           apptype = other.apptype
      }
      if other.hasAppversion {
           appversion = other.appversion
      }
      if other.hasApplanguage {
           applanguage = other.applanguage
      }
      if other.hasOstype {
           ostype = other.ostype
      }
      if other.hasOsversion {
           osversion = other.osversion
      }
      if other.hasOsrr {
           osrr = other.osrr
      }
      if other.hasClientsn {
           clientsn = other.clientsn
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgConnectReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgConnectReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 18 :
          apptype = input.readString()

        case 26 :
          appversion = input.readString()

        case 34 :
          applanguage = input.readString()

        case 82 :
          ostype = input.readString()

        case 90 :
          osversion = input.readString()

        case 98 :
          osrr = input.readString()

        case 810 :
          clientsn = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgConnectReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasEncryptkey:Bool = false
    private(set) var encryptkey:String = ""

    private(set) var hasHashedclientsn:Bool = false
    private(set) var hashedclientsn:String = ""

    private(set) var hasServersn:Bool = false
    private(set) var serversn:String = ""

    private(set) var urllist:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if !urllist.isEmpty {
        for oneValueurllist in urllist {
          output.writeString(10, value:oneValueurllist)
        }
      }
      if hasEncryptkey {
        output.writeString(11, value:encryptkey)
      }
      if hasHashedclientsn {
        output.writeString(100, value:hashedclientsn)
      }
      if hasServersn {
        output.writeString(101, value:serversn)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      var dataSizeUrllist:Int32 = 0
      for oneValueurllist in urllist {
          dataSizeUrllist += oneValueurllist.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUrllist
      serialize_size += 1 * Int32(urllist.count)
      if hasEncryptkey {
        serialize_size += encryptkey.computeStringSize(11)
      }
      if hasHashedclientsn {
        serialize_size += hashedclientsn.computeStringSize(100)
      }
      if hasServersn {
        serialize_size += serversn.computeStringSize(101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgConnectReply {
      return Comm.PkgConnectReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgConnectReply {
      return Comm.PkgConnectReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgConnectReply {
      return Comm.PkgConnectReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgConnectReply {
      return Comm.PkgConnectReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgConnectReply {
      return Comm.PkgConnectReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgConnectReply {
      return Comm.PkgConnectReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgConnectReplyBuilder {
      return Comm.PkgConnectReply.classBuilder() as! Comm.PkgConnectReplyBuilder
    }
    internal func builder() -> Comm.PkgConnectReplyBuilder {
      return classBuilder() as! Comm.PkgConnectReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgConnectReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgConnectReply.builder()
    }
    internal func toBuilder() -> Comm.PkgConnectReplyBuilder {
      return Comm.PkgConnectReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgConnectReply) -> Comm.PkgConnectReplyBuilder {
      return Comm.PkgConnectReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      var urllistElementIndex:Int = 0
      for oneValueurllist in urllist  {
          output += "\(indent) urllist[\(urllistElementIndex)]: \(oneValueurllist)\n"
          urllistElementIndex++
      }
      if hasEncryptkey {
        output += "\(indent) encryptkey: \(encryptkey) \n"
      }
      if hasHashedclientsn {
        output += "\(indent) hashedclientsn: \(hashedclientsn) \n"
      }
      if hasServersn {
        output += "\(indent) serversn: \(serversn) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            for oneValueurllist in urllist {
                hashCode = (hashCode &* 31) &+ oneValueurllist.hashValue
            }
            if hasEncryptkey {
               hashCode = (hashCode &* 31) &+ encryptkey.hashValue
            }
            if hasHashedclientsn {
               hashCode = (hashCode &* 31) &+ hashedclientsn.hashValue
            }
            if hasServersn {
               hashCode = (hashCode &* 31) &+ serversn.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgConnectReply"
    }
    override internal func className() -> String {
        return "Comm.PkgConnectReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgConnectReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgConnectReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgConnectReply

    required override internal init () {
       builderResult = Comm.PkgConnectReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgConnectReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgConnectReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgConnectReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgConnectReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var urllist:Array<String> {
         get {
             return builderResult.urllist
         }
         set (array) {
             builderResult.urllist = array
         }
    }
    func setUrllist(value:Array<String>)-> Comm.PkgConnectReplyBuilder {
      self.urllist = value
      return self
    }
    internal func clearUrllist() -> Comm.PkgConnectReplyBuilder {
       builderResult.urllist.removeAll(keepCapacity: false)
       return self
    }
    var hasEncryptkey:Bool {
         get {
              return builderResult.hasEncryptkey
         }
    }
    var encryptkey:String {
         get {
              return builderResult.encryptkey
         }
         set (value) {
             builderResult.hasEncryptkey = true
             builderResult.encryptkey = value
         }
    }
    func setEncryptkey(value:String)-> Comm.PkgConnectReplyBuilder {
      self.encryptkey = value
      return self
    }
    internal func clearEncryptkey() -> Comm.PkgConnectReplyBuilder{
         builderResult.hasEncryptkey = false
         builderResult.encryptkey = ""
         return self
    }
    var hasHashedclientsn:Bool {
         get {
              return builderResult.hasHashedclientsn
         }
    }
    var hashedclientsn:String {
         get {
              return builderResult.hashedclientsn
         }
         set (value) {
             builderResult.hasHashedclientsn = true
             builderResult.hashedclientsn = value
         }
    }
    func setHashedclientsn(value:String)-> Comm.PkgConnectReplyBuilder {
      self.hashedclientsn = value
      return self
    }
    internal func clearHashedclientsn() -> Comm.PkgConnectReplyBuilder{
         builderResult.hasHashedclientsn = false
         builderResult.hashedclientsn = ""
         return self
    }
    var hasServersn:Bool {
         get {
              return builderResult.hasServersn
         }
    }
    var serversn:String {
         get {
              return builderResult.serversn
         }
         set (value) {
             builderResult.hasServersn = true
             builderResult.serversn = value
         }
    }
    func setServersn(value:String)-> Comm.PkgConnectReplyBuilder {
      self.serversn = value
      return self
    }
    internal func clearServersn() -> Comm.PkgConnectReplyBuilder{
         builderResult.hasServersn = false
         builderResult.serversn = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgConnectReplyBuilder {
      builderResult = Comm.PkgConnectReply()
      return self
    }
    internal override func clone() -> Comm.PkgConnectReplyBuilder {
      return Comm.PkgConnectReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgConnectReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgConnectReply {
      var returnMe:Comm.PkgConnectReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgConnectReply) -> Comm.PkgConnectReplyBuilder {
      if (other == Comm.PkgConnectReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if !other.urllist.isEmpty {
          builderResult.urllist += other.urllist
      }
      if other.hasEncryptkey {
           encryptkey = other.encryptkey
      }
      if other.hasHashedclientsn {
           hashedclientsn = other.hashedclientsn
      }
      if other.hasServersn {
           serversn = other.serversn
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgConnectReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgConnectReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 82 :
          urllist += [input.readString()]

        case 90 :
          encryptkey = input.readString()

        case 802 :
          hashedclientsn = input.readString()

        case 810 :
          serversn = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCheckReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasUsername:Bool = false
    private(set) var username:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(4, value:emailaddress)
      }
      if hasUsername {
        output.writeString(5, value:username)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(4)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCheckReq {
      return Comm.PkgUserCheckReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckReq {
      return Comm.PkgUserCheckReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCheckReq {
      return Comm.PkgUserCheckReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCheckReq {
      return Comm.PkgUserCheckReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCheckReq {
      return Comm.PkgUserCheckReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckReq {
      return Comm.PkgUserCheckReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCheckReqBuilder {
      return Comm.PkgUserCheckReq.classBuilder() as! Comm.PkgUserCheckReqBuilder
    }
    internal func builder() -> Comm.PkgUserCheckReqBuilder {
      return classBuilder() as! Comm.PkgUserCheckReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCheckReqBuilder {
      return Comm.PkgUserCheckReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCheckReq) -> Comm.PkgUserCheckReqBuilder {
      return Comm.PkgUserCheckReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCheckReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCheckReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCheckReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCheckReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCheckReq

    required override internal init () {
       builderResult = Comm.PkgUserCheckReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserCheckReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserCheckReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserCheckReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserCheckReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserCheckReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserCheckReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    func setUsername(value:String)-> Comm.PkgUserCheckReqBuilder {
      self.username = value
      return self
    }
    internal func clearUsername() -> Comm.PkgUserCheckReqBuilder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCheckReqBuilder {
      builderResult = Comm.PkgUserCheckReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserCheckReqBuilder {
      return Comm.PkgUserCheckReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCheckReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCheckReq {
      var returnMe:Comm.PkgUserCheckReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCheckReq) -> Comm.PkgUserCheckReqBuilder {
      if (other == Comm.PkgUserCheckReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasUsername {
           username = other.username
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCheckReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 26 :
          phonenumber = input.readString()

        case 34 :
          emailaddress = input.readString()

        case 42 :
          username = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCheckReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasUserid {
        output.writeInt32(3, value:userid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCheckReply {
      return Comm.PkgUserCheckReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckReply {
      return Comm.PkgUserCheckReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCheckReply {
      return Comm.PkgUserCheckReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCheckReply {
      return Comm.PkgUserCheckReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCheckReply {
      return Comm.PkgUserCheckReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckReply {
      return Comm.PkgUserCheckReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCheckReplyBuilder {
      return Comm.PkgUserCheckReply.classBuilder() as! Comm.PkgUserCheckReplyBuilder
    }
    internal func builder() -> Comm.PkgUserCheckReplyBuilder {
      return classBuilder() as! Comm.PkgUserCheckReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCheckReplyBuilder {
      return Comm.PkgUserCheckReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCheckReply) -> Comm.PkgUserCheckReplyBuilder {
      return Comm.PkgUserCheckReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCheckReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCheckReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCheckReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCheckReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCheckReply

    required override internal init () {
       builderResult = Comm.PkgUserCheckReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserCheckReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserCheckReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserCheckReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserCheckReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgUserCheckReplyBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgUserCheckReplyBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCheckReplyBuilder {
      builderResult = Comm.PkgUserCheckReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserCheckReplyBuilder {
      return Comm.PkgUserCheckReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCheckReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCheckReply {
      var returnMe:Comm.PkgUserCheckReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCheckReply) -> Comm.PkgUserCheckReplyBuilder {
      if (other == Comm.PkgUserCheckReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasUserid {
           userid = other.userid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCheckReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 24 :
          userid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCheckInvitionCodeReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasInvitioncode:Bool = false
    private(set) var invitioncode:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasInvitioncode {
        output.writeString(2, value:invitioncode)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasInvitioncode {
        serialize_size += invitioncode.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCheckInvitionCodeReq {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckInvitionCodeReq {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCheckInvitionCodeReq {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCheckInvitionCodeReq {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCheckInvitionCodeReq {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckInvitionCodeReq {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      return Comm.PkgUserCheckInvitionCodeReq.classBuilder() as! Comm.PkgUserCheckInvitionCodeReqBuilder
    }
    internal func builder() -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      return classBuilder() as! Comm.PkgUserCheckInvitionCodeReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckInvitionCodeReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckInvitionCodeReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      return Comm.PkgUserCheckInvitionCodeReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCheckInvitionCodeReq) -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      return Comm.PkgUserCheckInvitionCodeReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasInvitioncode {
        output += "\(indent) invitioncode: \(invitioncode) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasInvitioncode {
               hashCode = (hashCode &* 31) &+ invitioncode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCheckInvitionCodeReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCheckInvitionCodeReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCheckInvitionCodeReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCheckInvitionCodeReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCheckInvitionCodeReq

    required override internal init () {
       builderResult = Comm.PkgUserCheckInvitionCodeReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserCheckInvitionCodeReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserCheckInvitionCodeReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasInvitioncode:Bool {
         get {
              return builderResult.hasInvitioncode
         }
    }
    var invitioncode:String {
         get {
              return builderResult.invitioncode
         }
         set (value) {
             builderResult.hasInvitioncode = true
             builderResult.invitioncode = value
         }
    }
    func setInvitioncode(value:String)-> Comm.PkgUserCheckInvitionCodeReqBuilder {
      self.invitioncode = value
      return self
    }
    internal func clearInvitioncode() -> Comm.PkgUserCheckInvitionCodeReqBuilder{
         builderResult.hasInvitioncode = false
         builderResult.invitioncode = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      builderResult = Comm.PkgUserCheckInvitionCodeReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      return Comm.PkgUserCheckInvitionCodeReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCheckInvitionCodeReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCheckInvitionCodeReq {
      var returnMe:Comm.PkgUserCheckInvitionCodeReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCheckInvitionCodeReq) -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      if (other == Comm.PkgUserCheckInvitionCodeReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasInvitioncode {
           invitioncode = other.invitioncode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCheckInvitionCodeReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckInvitionCodeReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 18 :
          invitioncode = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCheckInvitionCodeReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(4, value:emailaddress)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCheckInvitionCodeReply {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckInvitionCodeReply {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCheckInvitionCodeReply {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCheckInvitionCodeReply {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCheckInvitionCodeReply {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckInvitionCodeReply {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      return Comm.PkgUserCheckInvitionCodeReply.classBuilder() as! Comm.PkgUserCheckInvitionCodeReplyBuilder
    }
    internal func builder() -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      return classBuilder() as! Comm.PkgUserCheckInvitionCodeReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckInvitionCodeReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCheckInvitionCodeReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      return Comm.PkgUserCheckInvitionCodeReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCheckInvitionCodeReply) -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      return Comm.PkgUserCheckInvitionCodeReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCheckInvitionCodeReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCheckInvitionCodeReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCheckInvitionCodeReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCheckInvitionCodeReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCheckInvitionCodeReply

    required override internal init () {
       builderResult = Comm.PkgUserCheckInvitionCodeReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserCheckInvitionCodeReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserCheckInvitionCodeReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserCheckInvitionCodeReplyBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserCheckInvitionCodeReplyBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      builderResult = Comm.PkgUserCheckInvitionCodeReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      return Comm.PkgUserCheckInvitionCodeReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCheckInvitionCodeReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCheckInvitionCodeReply {
      var returnMe:Comm.PkgUserCheckInvitionCodeReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCheckInvitionCodeReply) -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      if (other == Comm.PkgUserCheckInvitionCodeReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCheckInvitionCodeReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCheckInvitionCodeReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          phonenumber = input.readString()

        case 34 :
          emailaddress = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserGetAuthReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(4, value:emailaddress)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserGetAuthReq {
      return Comm.PkgUserGetAuthReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetAuthReq {
      return Comm.PkgUserGetAuthReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserGetAuthReq {
      return Comm.PkgUserGetAuthReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserGetAuthReq {
      return Comm.PkgUserGetAuthReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserGetAuthReq {
      return Comm.PkgUserGetAuthReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetAuthReq {
      return Comm.PkgUserGetAuthReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserGetAuthReqBuilder {
      return Comm.PkgUserGetAuthReq.classBuilder() as! Comm.PkgUserGetAuthReqBuilder
    }
    internal func builder() -> Comm.PkgUserGetAuthReqBuilder {
      return classBuilder() as! Comm.PkgUserGetAuthReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetAuthReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetAuthReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserGetAuthReqBuilder {
      return Comm.PkgUserGetAuthReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserGetAuthReq) -> Comm.PkgUserGetAuthReqBuilder {
      return Comm.PkgUserGetAuthReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserGetAuthReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserGetAuthReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserGetAuthReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserGetAuthReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserGetAuthReq

    required override internal init () {
       builderResult = Comm.PkgUserGetAuthReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserGetAuthReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserGetAuthReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserGetAuthReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserGetAuthReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserGetAuthReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserGetAuthReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserGetAuthReqBuilder {
      builderResult = Comm.PkgUserGetAuthReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserGetAuthReqBuilder {
      return Comm.PkgUserGetAuthReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserGetAuthReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserGetAuthReq {
      var returnMe:Comm.PkgUserGetAuthReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserGetAuthReq) -> Comm.PkgUserGetAuthReqBuilder {
      if (other == Comm.PkgUserGetAuthReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserGetAuthReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetAuthReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 26 :
          phonenumber = input.readString()

        case 34 :
          emailaddress = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserGetAuthReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserGetAuthReply {
      return Comm.PkgUserGetAuthReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetAuthReply {
      return Comm.PkgUserGetAuthReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserGetAuthReply {
      return Comm.PkgUserGetAuthReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserGetAuthReply {
      return Comm.PkgUserGetAuthReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserGetAuthReply {
      return Comm.PkgUserGetAuthReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetAuthReply {
      return Comm.PkgUserGetAuthReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserGetAuthReplyBuilder {
      return Comm.PkgUserGetAuthReply.classBuilder() as! Comm.PkgUserGetAuthReplyBuilder
    }
    internal func builder() -> Comm.PkgUserGetAuthReplyBuilder {
      return classBuilder() as! Comm.PkgUserGetAuthReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetAuthReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetAuthReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserGetAuthReplyBuilder {
      return Comm.PkgUserGetAuthReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserGetAuthReply) -> Comm.PkgUserGetAuthReplyBuilder {
      return Comm.PkgUserGetAuthReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserGetAuthReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserGetAuthReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserGetAuthReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserGetAuthReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserGetAuthReply

    required override internal init () {
       builderResult = Comm.PkgUserGetAuthReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserGetAuthReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserGetAuthReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserGetAuthReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserGetAuthReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserGetAuthReplyBuilder {
      builderResult = Comm.PkgUserGetAuthReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserGetAuthReplyBuilder {
      return Comm.PkgUserGetAuthReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserGetAuthReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserGetAuthReply {
      var returnMe:Comm.PkgUserGetAuthReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserGetAuthReply) -> Comm.PkgUserGetAuthReplyBuilder {
      if (other == Comm.PkgUserGetAuthReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserGetAuthReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetAuthReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCreateReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasAuthcode:Bool = false
    private(set) var authcode:String = ""

    private(set) var hasInvitioncode:Bool = false
    private(set) var invitioncode:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasPhonenumber {
        output.writeString(2, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(3, value:emailaddress)
      }
      if hasAuthcode {
        output.writeString(4, value:authcode)
      }
      if hasInvitioncode {
        output.writeString(5, value:invitioncode)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(2)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(3)
      }
      if hasAuthcode {
        serialize_size += authcode.computeStringSize(4)
      }
      if hasInvitioncode {
        serialize_size += invitioncode.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCreateReq {
      return Comm.PkgUserCreateReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateReq {
      return Comm.PkgUserCreateReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCreateReq {
      return Comm.PkgUserCreateReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCreateReq {
      return Comm.PkgUserCreateReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCreateReq {
      return Comm.PkgUserCreateReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateReq {
      return Comm.PkgUserCreateReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCreateReqBuilder {
      return Comm.PkgUserCreateReq.classBuilder() as! Comm.PkgUserCreateReqBuilder
    }
    internal func builder() -> Comm.PkgUserCreateReqBuilder {
      return classBuilder() as! Comm.PkgUserCreateReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCreateReqBuilder {
      return Comm.PkgUserCreateReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCreateReq) -> Comm.PkgUserCreateReqBuilder {
      return Comm.PkgUserCreateReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasAuthcode {
        output += "\(indent) authcode: \(authcode) \n"
      }
      if hasInvitioncode {
        output += "\(indent) invitioncode: \(invitioncode) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasAuthcode {
               hashCode = (hashCode &* 31) &+ authcode.hashValue
            }
            if hasInvitioncode {
               hashCode = (hashCode &* 31) &+ invitioncode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCreateReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCreateReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCreateReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCreateReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCreateReq

    required override internal init () {
       builderResult = Comm.PkgUserCreateReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserCreateReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserCreateReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserCreateReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserCreateReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserCreateReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserCreateReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasAuthcode:Bool {
         get {
              return builderResult.hasAuthcode
         }
    }
    var authcode:String {
         get {
              return builderResult.authcode
         }
         set (value) {
             builderResult.hasAuthcode = true
             builderResult.authcode = value
         }
    }
    func setAuthcode(value:String)-> Comm.PkgUserCreateReqBuilder {
      self.authcode = value
      return self
    }
    internal func clearAuthcode() -> Comm.PkgUserCreateReqBuilder{
         builderResult.hasAuthcode = false
         builderResult.authcode = ""
         return self
    }
    var hasInvitioncode:Bool {
         get {
              return builderResult.hasInvitioncode
         }
    }
    var invitioncode:String {
         get {
              return builderResult.invitioncode
         }
         set (value) {
             builderResult.hasInvitioncode = true
             builderResult.invitioncode = value
         }
    }
    func setInvitioncode(value:String)-> Comm.PkgUserCreateReqBuilder {
      self.invitioncode = value
      return self
    }
    internal func clearInvitioncode() -> Comm.PkgUserCreateReqBuilder{
         builderResult.hasInvitioncode = false
         builderResult.invitioncode = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCreateReqBuilder {
      builderResult = Comm.PkgUserCreateReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserCreateReqBuilder {
      return Comm.PkgUserCreateReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCreateReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCreateReq {
      var returnMe:Comm.PkgUserCreateReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCreateReq) -> Comm.PkgUserCreateReqBuilder {
      if (other == Comm.PkgUserCreateReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasAuthcode {
           authcode = other.authcode
      }
      if other.hasInvitioncode {
           invitioncode = other.invitioncode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCreateReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 18 :
          phonenumber = input.readString()

        case 26 :
          emailaddress = input.readString()

        case 34 :
          authcode = input.readString()

        case 42 :
          invitioncode = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCreateReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var hasRealname:Bool = false
    private(set) var realname:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasUserid {
        output.writeInt32(3, value:userid)
      }
      if hasRealname {
        output.writeString(11, value:realname)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(3)
      }
      if hasRealname {
        serialize_size += realname.computeStringSize(11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCreateReply {
      return Comm.PkgUserCreateReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateReply {
      return Comm.PkgUserCreateReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCreateReply {
      return Comm.PkgUserCreateReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCreateReply {
      return Comm.PkgUserCreateReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCreateReply {
      return Comm.PkgUserCreateReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateReply {
      return Comm.PkgUserCreateReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCreateReplyBuilder {
      return Comm.PkgUserCreateReply.classBuilder() as! Comm.PkgUserCreateReplyBuilder
    }
    internal func builder() -> Comm.PkgUserCreateReplyBuilder {
      return classBuilder() as! Comm.PkgUserCreateReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCreateReplyBuilder {
      return Comm.PkgUserCreateReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCreateReply) -> Comm.PkgUserCreateReplyBuilder {
      return Comm.PkgUserCreateReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if hasRealname {
        output += "\(indent) realname: \(realname) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasRealname {
               hashCode = (hashCode &* 31) &+ realname.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCreateReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCreateReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCreateReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCreateReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCreateReply

    required override internal init () {
       builderResult = Comm.PkgUserCreateReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserCreateReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserCreateReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserCreateReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserCreateReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgUserCreateReplyBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgUserCreateReplyBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    var hasRealname:Bool {
         get {
              return builderResult.hasRealname
         }
    }
    var realname:String {
         get {
              return builderResult.realname
         }
         set (value) {
             builderResult.hasRealname = true
             builderResult.realname = value
         }
    }
    func setRealname(value:String)-> Comm.PkgUserCreateReplyBuilder {
      self.realname = value
      return self
    }
    internal func clearRealname() -> Comm.PkgUserCreateReplyBuilder{
         builderResult.hasRealname = false
         builderResult.realname = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCreateReplyBuilder {
      builderResult = Comm.PkgUserCreateReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserCreateReplyBuilder {
      return Comm.PkgUserCreateReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCreateReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCreateReply {
      var returnMe:Comm.PkgUserCreateReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCreateReply) -> Comm.PkgUserCreateReplyBuilder {
      if (other == Comm.PkgUserCreateReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasRealname {
           realname = other.realname
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCreateReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 24 :
          userid = input.readInt32()

        case 90 :
          realname = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserLoginReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasUsername:Bool = false
    private(set) var username:String = ""

    private(set) var hasPassword:Bool = false
    private(set) var password:String = ""

    private(set) var hasHashedserversn:Bool = false
    private(set) var hashedserversn:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
      if !hasPassword {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasUserid {
        output.writeInt32(2, value:userid)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(4, value:emailaddress)
      }
      if hasUsername {
        output.writeString(5, value:username)
      }
      if hasPassword {
        output.writeString(10, value:password)
      }
      if hasHashedserversn {
        output.writeString(100, value:hashedserversn)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(2)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(4)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(5)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(10)
      }
      if hasHashedserversn {
        serialize_size += hashedserversn.computeStringSize(100)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserLoginReq {
      return Comm.PkgUserLoginReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserLoginReq {
      return Comm.PkgUserLoginReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserLoginReq {
      return Comm.PkgUserLoginReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserLoginReq {
      return Comm.PkgUserLoginReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserLoginReq {
      return Comm.PkgUserLoginReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserLoginReq {
      return Comm.PkgUserLoginReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserLoginReqBuilder {
      return Comm.PkgUserLoginReq.classBuilder() as! Comm.PkgUserLoginReqBuilder
    }
    internal func builder() -> Comm.PkgUserLoginReqBuilder {
      return classBuilder() as! Comm.PkgUserLoginReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserLoginReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserLoginReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserLoginReqBuilder {
      return Comm.PkgUserLoginReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserLoginReq) -> Comm.PkgUserLoginReqBuilder {
      return Comm.PkgUserLoginReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      if hasHashedserversn {
        output += "\(indent) hashedserversn: \(hashedserversn) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasHashedserversn {
               hashCode = (hashCode &* 31) &+ hashedserversn.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserLoginReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserLoginReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserLoginReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserLoginReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserLoginReq

    required override internal init () {
       builderResult = Comm.PkgUserLoginReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserLoginReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserLoginReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgUserLoginReqBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgUserLoginReqBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserLoginReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserLoginReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserLoginReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserLoginReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    func setUsername(value:String)-> Comm.PkgUserLoginReqBuilder {
      self.username = value
      return self
    }
    internal func clearUsername() -> Comm.PkgUserLoginReqBuilder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    var hasPassword:Bool {
         get {
              return builderResult.hasPassword
         }
    }
    var password:String {
         get {
              return builderResult.password
         }
         set (value) {
             builderResult.hasPassword = true
             builderResult.password = value
         }
    }
    func setPassword(value:String)-> Comm.PkgUserLoginReqBuilder {
      self.password = value
      return self
    }
    internal func clearPassword() -> Comm.PkgUserLoginReqBuilder{
         builderResult.hasPassword = false
         builderResult.password = ""
         return self
    }
    var hasHashedserversn:Bool {
         get {
              return builderResult.hasHashedserversn
         }
    }
    var hashedserversn:String {
         get {
              return builderResult.hashedserversn
         }
         set (value) {
             builderResult.hasHashedserversn = true
             builderResult.hashedserversn = value
         }
    }
    func setHashedserversn(value:String)-> Comm.PkgUserLoginReqBuilder {
      self.hashedserversn = value
      return self
    }
    internal func clearHashedserversn() -> Comm.PkgUserLoginReqBuilder{
         builderResult.hasHashedserversn = false
         builderResult.hashedserversn = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserLoginReqBuilder {
      builderResult = Comm.PkgUserLoginReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserLoginReqBuilder {
      return Comm.PkgUserLoginReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserLoginReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserLoginReq {
      var returnMe:Comm.PkgUserLoginReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserLoginReq) -> Comm.PkgUserLoginReqBuilder {
      if (other == Comm.PkgUserLoginReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasPassword {
           password = other.password
      }
      if other.hasHashedserversn {
           hashedserversn = other.hashedserversn
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserLoginReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserLoginReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 16 :
          userid = input.readInt32()

        case 26 :
          phonenumber = input.readString()

        case 34 :
          emailaddress = input.readString()

        case 42 :
          username = input.readString()

        case 82 :
          password = input.readString()

        case 802 :
          hashedserversn = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgCompanyInfo : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasCompanyid:Bool = false
    private(set) var companyid:Int32 = Int32(0)

    private(set) var hasCompanyname:Bool = false
    private(set) var companyname:String = ""

    private(set) var hasCompanyusernumber:Bool = false
    private(set) var companyusernumber:Int32 = Int32(0)

    private(set) var hasCompanycreatetime:Bool = false
    private(set) var companycreatetime:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasCompanyid {
        output.writeInt32(16, value:companyid)
      }
      if hasCompanyname {
        output.writeString(17, value:companyname)
      }
      if hasCompanyusernumber {
        output.writeInt32(18, value:companyusernumber)
      }
      if hasCompanycreatetime {
        output.writeString(21, value:companycreatetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCompanyid {
        serialize_size += companyid.computeInt32Size(16)
      }
      if hasCompanyname {
        serialize_size += companyname.computeStringSize(17)
      }
      if hasCompanyusernumber {
        serialize_size += companyusernumber.computeInt32Size(18)
      }
      if hasCompanycreatetime {
        serialize_size += companycreatetime.computeStringSize(21)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgCompanyInfo {
      return Comm.PkgCompanyInfo.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyInfo {
      return Comm.PkgCompanyInfo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgCompanyInfo {
      return Comm.PkgCompanyInfo.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgCompanyInfo {
      return Comm.PkgCompanyInfo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgCompanyInfo {
      return Comm.PkgCompanyInfo.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyInfo {
      return Comm.PkgCompanyInfo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgCompanyInfoBuilder {
      return Comm.PkgCompanyInfo.classBuilder() as! Comm.PkgCompanyInfoBuilder
    }
    internal func builder() -> Comm.PkgCompanyInfoBuilder {
      return classBuilder() as! Comm.PkgCompanyInfoBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyInfoBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyInfo.builder()
    }
    internal func toBuilder() -> Comm.PkgCompanyInfoBuilder {
      return Comm.PkgCompanyInfo.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgCompanyInfo) -> Comm.PkgCompanyInfoBuilder {
      return Comm.PkgCompanyInfo.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasCompanyid {
        output += "\(indent) companyid: \(companyid) \n"
      }
      if hasCompanyname {
        output += "\(indent) companyname: \(companyname) \n"
      }
      if hasCompanyusernumber {
        output += "\(indent) companyusernumber: \(companyusernumber) \n"
      }
      if hasCompanycreatetime {
        output += "\(indent) companycreatetime: \(companycreatetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCompanyid {
               hashCode = (hashCode &* 31) &+ companyid.hashValue
            }
            if hasCompanyname {
               hashCode = (hashCode &* 31) &+ companyname.hashValue
            }
            if hasCompanyusernumber {
               hashCode = (hashCode &* 31) &+ companyusernumber.hashValue
            }
            if hasCompanycreatetime {
               hashCode = (hashCode &* 31) &+ companycreatetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgCompanyInfo"
    }
    override internal func className() -> String {
        return "Comm.PkgCompanyInfo"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgCompanyInfo.self
    }
    //Meta information declaration end

  }

  final internal class PkgCompanyInfoBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgCompanyInfo

    required override internal init () {
       builderResult = Comm.PkgCompanyInfo()
       super.init()
    }
    var hasCompanyid:Bool {
         get {
              return builderResult.hasCompanyid
         }
    }
    var companyid:Int32 {
         get {
              return builderResult.companyid
         }
         set (value) {
             builderResult.hasCompanyid = true
             builderResult.companyid = value
         }
    }
    func setCompanyid(value:Int32)-> Comm.PkgCompanyInfoBuilder {
      self.companyid = value
      return self
    }
    internal func clearCompanyid() -> Comm.PkgCompanyInfoBuilder{
         builderResult.hasCompanyid = false
         builderResult.companyid = Int32(0)
         return self
    }
    var hasCompanyname:Bool {
         get {
              return builderResult.hasCompanyname
         }
    }
    var companyname:String {
         get {
              return builderResult.companyname
         }
         set (value) {
             builderResult.hasCompanyname = true
             builderResult.companyname = value
         }
    }
    func setCompanyname(value:String)-> Comm.PkgCompanyInfoBuilder {
      self.companyname = value
      return self
    }
    internal func clearCompanyname() -> Comm.PkgCompanyInfoBuilder{
         builderResult.hasCompanyname = false
         builderResult.companyname = ""
         return self
    }
    var hasCompanyusernumber:Bool {
         get {
              return builderResult.hasCompanyusernumber
         }
    }
    var companyusernumber:Int32 {
         get {
              return builderResult.companyusernumber
         }
         set (value) {
             builderResult.hasCompanyusernumber = true
             builderResult.companyusernumber = value
         }
    }
    func setCompanyusernumber(value:Int32)-> Comm.PkgCompanyInfoBuilder {
      self.companyusernumber = value
      return self
    }
    internal func clearCompanyusernumber() -> Comm.PkgCompanyInfoBuilder{
         builderResult.hasCompanyusernumber = false
         builderResult.companyusernumber = Int32(0)
         return self
    }
    var hasCompanycreatetime:Bool {
         get {
              return builderResult.hasCompanycreatetime
         }
    }
    var companycreatetime:String {
         get {
              return builderResult.companycreatetime
         }
         set (value) {
             builderResult.hasCompanycreatetime = true
             builderResult.companycreatetime = value
         }
    }
    func setCompanycreatetime(value:String)-> Comm.PkgCompanyInfoBuilder {
      self.companycreatetime = value
      return self
    }
    internal func clearCompanycreatetime() -> Comm.PkgCompanyInfoBuilder{
         builderResult.hasCompanycreatetime = false
         builderResult.companycreatetime = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgCompanyInfoBuilder {
      builderResult = Comm.PkgCompanyInfo()
      return self
    }
    internal override func clone() -> Comm.PkgCompanyInfoBuilder {
      return Comm.PkgCompanyInfo.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgCompanyInfo {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgCompanyInfo {
      var returnMe:Comm.PkgCompanyInfo = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgCompanyInfo) -> Comm.PkgCompanyInfoBuilder {
      if (other == Comm.PkgCompanyInfo()) {
       return self
      }
      if other.hasCompanyid {
           companyid = other.companyid
      }
      if other.hasCompanyname {
           companyname = other.companyname
      }
      if other.hasCompanyusernumber {
           companyusernumber = other.companyusernumber
      }
      if other.hasCompanycreatetime {
           companycreatetime = other.companycreatetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgCompanyInfoBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyInfoBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 128 :
          companyid = input.readInt32()

        case 138 :
          companyname = input.readString()

        case 144 :
          companyusernumber = input.readInt32()

        case 170 :
          companycreatetime = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserLoginReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var hasUsername:Bool = false
    private(set) var username:String = ""

    private(set) var hasRealname:Bool = false
    private(set) var realname:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasIsloginsuccess:Bool = false
    private(set) var isloginsuccess:Bool = false

    private(set) var hasPermission:Bool = false
    private(set) var permission:Int32 = Int32(0)

    private(set) var hasCompanyid:Bool = false
    private(set) var companyid:Int32 = Int32(0)

    private(set) var hasCompanyname:Bool = false
    private(set) var companyname:String = ""

    private(set) var hasCompanyusernumber:Bool = false
    private(set) var companyusernumber:Int32 = Int32(0)

    private(set) var hasCreatetime:Bool = false
    private(set) var createtime:String = ""

    private(set) var hasRolename:Bool = false
    private(set) var rolename:String = ""

    private(set) var hasCompanycreatetime:Bool = false
    private(set) var companycreatetime:String = ""

    private(set) var hasPermissionroleid:Bool = false
    private(set) var permissionroleid:Int32 = Int32(0)

    private(set) var hasCompanyinfo:Bool = false
    private(set) var companyinfo:Comm.PkgCompanyInfo!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasUserid {
        output.writeInt32(3, value:userid)
      }
      if hasUsername {
        output.writeString(10, value:username)
      }
      if hasRealname {
        output.writeString(11, value:realname)
      }
      if hasPhonenumber {
        output.writeString(12, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(13, value:emailaddress)
      }
      if hasIsloginsuccess {
        output.writeBool(14, value:isloginsuccess)
      }
      if hasPermission {
        output.writeInt32(15, value:permission)
      }
      if hasCompanyid {
        output.writeInt32(16, value:companyid)
      }
      if hasCompanyname {
        output.writeString(17, value:companyname)
      }
      if hasCompanyusernumber {
        output.writeInt32(18, value:companyusernumber)
      }
      if hasCreatetime {
        output.writeString(19, value:createtime)
      }
      if hasRolename {
        output.writeString(20, value:rolename)
      }
      if hasCompanycreatetime {
        output.writeString(21, value:companycreatetime)
      }
      if hasPermissionroleid {
        output.writeInt32(22, value:permissionroleid)
      }
      if hasCompanyinfo {
        output.writeMessage(100, value:companyinfo)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(3)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(10)
      }
      if hasRealname {
        serialize_size += realname.computeStringSize(11)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(12)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(13)
      }
      if hasIsloginsuccess {
        serialize_size += isloginsuccess.computeBoolSize(14)
      }
      if hasPermission {
        serialize_size += permission.computeInt32Size(15)
      }
      if hasCompanyid {
        serialize_size += companyid.computeInt32Size(16)
      }
      if hasCompanyname {
        serialize_size += companyname.computeStringSize(17)
      }
      if hasCompanyusernumber {
        serialize_size += companyusernumber.computeInt32Size(18)
      }
      if hasCreatetime {
        serialize_size += createtime.computeStringSize(19)
      }
      if hasRolename {
        serialize_size += rolename.computeStringSize(20)
      }
      if hasCompanycreatetime {
        serialize_size += companycreatetime.computeStringSize(21)
      }
      if hasPermissionroleid {
        serialize_size += permissionroleid.computeInt32Size(22)
      }
      if hasCompanyinfo {
          if let varSizecompanyinfo = companyinfo?.computeMessageSize(100) {
              serialize_size += varSizecompanyinfo
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserLoginReply {
      return Comm.PkgUserLoginReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserLoginReply {
      return Comm.PkgUserLoginReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserLoginReply {
      return Comm.PkgUserLoginReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserLoginReply {
      return Comm.PkgUserLoginReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserLoginReply {
      return Comm.PkgUserLoginReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserLoginReply {
      return Comm.PkgUserLoginReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserLoginReplyBuilder {
      return Comm.PkgUserLoginReply.classBuilder() as! Comm.PkgUserLoginReplyBuilder
    }
    internal func builder() -> Comm.PkgUserLoginReplyBuilder {
      return classBuilder() as! Comm.PkgUserLoginReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserLoginReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserLoginReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserLoginReplyBuilder {
      return Comm.PkgUserLoginReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserLoginReply) -> Comm.PkgUserLoginReplyBuilder {
      return Comm.PkgUserLoginReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if hasRealname {
        output += "\(indent) realname: \(realname) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasIsloginsuccess {
        output += "\(indent) isloginsuccess: \(isloginsuccess) \n"
      }
      if hasPermission {
        output += "\(indent) permission: \(permission) \n"
      }
      if hasCompanyid {
        output += "\(indent) companyid: \(companyid) \n"
      }
      if hasCompanyname {
        output += "\(indent) companyname: \(companyname) \n"
      }
      if hasCompanyusernumber {
        output += "\(indent) companyusernumber: \(companyusernumber) \n"
      }
      if hasCreatetime {
        output += "\(indent) createtime: \(createtime) \n"
      }
      if hasRolename {
        output += "\(indent) rolename: \(rolename) \n"
      }
      if hasCompanycreatetime {
        output += "\(indent) companycreatetime: \(companycreatetime) \n"
      }
      if hasPermissionroleid {
        output += "\(indent) permissionroleid: \(permissionroleid) \n"
      }
      if hasCompanyinfo {
        output += "\(indent) companyinfo {\n"
        companyinfo?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasRealname {
               hashCode = (hashCode &* 31) &+ realname.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasIsloginsuccess {
               hashCode = (hashCode &* 31) &+ isloginsuccess.hashValue
            }
            if hasPermission {
               hashCode = (hashCode &* 31) &+ permission.hashValue
            }
            if hasCompanyid {
               hashCode = (hashCode &* 31) &+ companyid.hashValue
            }
            if hasCompanyname {
               hashCode = (hashCode &* 31) &+ companyname.hashValue
            }
            if hasCompanyusernumber {
               hashCode = (hashCode &* 31) &+ companyusernumber.hashValue
            }
            if hasCreatetime {
               hashCode = (hashCode &* 31) &+ createtime.hashValue
            }
            if hasRolename {
               hashCode = (hashCode &* 31) &+ rolename.hashValue
            }
            if hasCompanycreatetime {
               hashCode = (hashCode &* 31) &+ companycreatetime.hashValue
            }
            if hasPermissionroleid {
               hashCode = (hashCode &* 31) &+ permissionroleid.hashValue
            }
            if hasCompanyinfo {
                if let hashValuecompanyinfo = companyinfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecompanyinfo
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserLoginReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserLoginReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserLoginReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserLoginReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserLoginReply

    required override internal init () {
       builderResult = Comm.PkgUserLoginReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserLoginReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgUserLoginReplyBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    func setUsername(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.username = value
      return self
    }
    internal func clearUsername() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    var hasRealname:Bool {
         get {
              return builderResult.hasRealname
         }
    }
    var realname:String {
         get {
              return builderResult.realname
         }
         set (value) {
             builderResult.hasRealname = true
             builderResult.realname = value
         }
    }
    func setRealname(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.realname = value
      return self
    }
    internal func clearRealname() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasRealname = false
         builderResult.realname = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasIsloginsuccess:Bool {
         get {
              return builderResult.hasIsloginsuccess
         }
    }
    var isloginsuccess:Bool {
         get {
              return builderResult.isloginsuccess
         }
         set (value) {
             builderResult.hasIsloginsuccess = true
             builderResult.isloginsuccess = value
         }
    }
    func setIsloginsuccess(value:Bool)-> Comm.PkgUserLoginReplyBuilder {
      self.isloginsuccess = value
      return self
    }
    internal func clearIsloginsuccess() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasIsloginsuccess = false
         builderResult.isloginsuccess = false
         return self
    }
    var hasPermission:Bool {
         get {
              return builderResult.hasPermission
         }
    }
    var permission:Int32 {
         get {
              return builderResult.permission
         }
         set (value) {
             builderResult.hasPermission = true
             builderResult.permission = value
         }
    }
    func setPermission(value:Int32)-> Comm.PkgUserLoginReplyBuilder {
      self.permission = value
      return self
    }
    internal func clearPermission() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasPermission = false
         builderResult.permission = Int32(0)
         return self
    }
    var hasCompanyid:Bool {
         get {
              return builderResult.hasCompanyid
         }
    }
    var companyid:Int32 {
         get {
              return builderResult.companyid
         }
         set (value) {
             builderResult.hasCompanyid = true
             builderResult.companyid = value
         }
    }
    func setCompanyid(value:Int32)-> Comm.PkgUserLoginReplyBuilder {
      self.companyid = value
      return self
    }
    internal func clearCompanyid() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasCompanyid = false
         builderResult.companyid = Int32(0)
         return self
    }
    var hasCompanyname:Bool {
         get {
              return builderResult.hasCompanyname
         }
    }
    var companyname:String {
         get {
              return builderResult.companyname
         }
         set (value) {
             builderResult.hasCompanyname = true
             builderResult.companyname = value
         }
    }
    func setCompanyname(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.companyname = value
      return self
    }
    internal func clearCompanyname() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasCompanyname = false
         builderResult.companyname = ""
         return self
    }
    var hasCompanyusernumber:Bool {
         get {
              return builderResult.hasCompanyusernumber
         }
    }
    var companyusernumber:Int32 {
         get {
              return builderResult.companyusernumber
         }
         set (value) {
             builderResult.hasCompanyusernumber = true
             builderResult.companyusernumber = value
         }
    }
    func setCompanyusernumber(value:Int32)-> Comm.PkgUserLoginReplyBuilder {
      self.companyusernumber = value
      return self
    }
    internal func clearCompanyusernumber() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasCompanyusernumber = false
         builderResult.companyusernumber = Int32(0)
         return self
    }
    var hasCreatetime:Bool {
         get {
              return builderResult.hasCreatetime
         }
    }
    var createtime:String {
         get {
              return builderResult.createtime
         }
         set (value) {
             builderResult.hasCreatetime = true
             builderResult.createtime = value
         }
    }
    func setCreatetime(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.createtime = value
      return self
    }
    internal func clearCreatetime() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasCreatetime = false
         builderResult.createtime = ""
         return self
    }
    var hasRolename:Bool {
         get {
              return builderResult.hasRolename
         }
    }
    var rolename:String {
         get {
              return builderResult.rolename
         }
         set (value) {
             builderResult.hasRolename = true
             builderResult.rolename = value
         }
    }
    func setRolename(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.rolename = value
      return self
    }
    internal func clearRolename() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasRolename = false
         builderResult.rolename = ""
         return self
    }
    var hasCompanycreatetime:Bool {
         get {
              return builderResult.hasCompanycreatetime
         }
    }
    var companycreatetime:String {
         get {
              return builderResult.companycreatetime
         }
         set (value) {
             builderResult.hasCompanycreatetime = true
             builderResult.companycreatetime = value
         }
    }
    func setCompanycreatetime(value:String)-> Comm.PkgUserLoginReplyBuilder {
      self.companycreatetime = value
      return self
    }
    internal func clearCompanycreatetime() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasCompanycreatetime = false
         builderResult.companycreatetime = ""
         return self
    }
    var hasPermissionroleid:Bool {
         get {
              return builderResult.hasPermissionroleid
         }
    }
    var permissionroleid:Int32 {
         get {
              return builderResult.permissionroleid
         }
         set (value) {
             builderResult.hasPermissionroleid = true
             builderResult.permissionroleid = value
         }
    }
    func setPermissionroleid(value:Int32)-> Comm.PkgUserLoginReplyBuilder {
      self.permissionroleid = value
      return self
    }
    internal func clearPermissionroleid() -> Comm.PkgUserLoginReplyBuilder{
         builderResult.hasPermissionroleid = false
         builderResult.permissionroleid = Int32(0)
         return self
    }
    var hasCompanyinfo:Bool {
         get {
             return builderResult.hasCompanyinfo
         }
    }
    var companyinfo:Comm.PkgCompanyInfo! {
         get {
             return builderResult.companyinfo
         }
         set (value) {
             builderResult.hasCompanyinfo = true
             builderResult.companyinfo = value
         }
    }
    func setCompanyinfo(value:Comm.PkgCompanyInfo!)-> Comm.PkgUserLoginReplyBuilder {
      self.companyinfo = value
      return self
    }
    internal func mergeCompanyinfo(value:Comm.PkgCompanyInfo) -> Comm.PkgUserLoginReplyBuilder {
      if (builderResult.hasCompanyinfo) {
        builderResult.companyinfo = Comm.PkgCompanyInfo.builderWithPrototype(builderResult.companyinfo).mergeFrom(value).buildPartial()
      } else {
        builderResult.companyinfo = value
      }
      builderResult.hasCompanyinfo = true
      return self
    }
    internal func clearCompanyinfo() -> Comm.PkgUserLoginReplyBuilder {
      builderResult.hasCompanyinfo = false
      builderResult.companyinfo = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserLoginReplyBuilder {
      builderResult = Comm.PkgUserLoginReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserLoginReplyBuilder {
      return Comm.PkgUserLoginReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserLoginReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserLoginReply {
      var returnMe:Comm.PkgUserLoginReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserLoginReply) -> Comm.PkgUserLoginReplyBuilder {
      if (other == Comm.PkgUserLoginReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasRealname {
           realname = other.realname
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasIsloginsuccess {
           isloginsuccess = other.isloginsuccess
      }
      if other.hasPermission {
           permission = other.permission
      }
      if other.hasCompanyid {
           companyid = other.companyid
      }
      if other.hasCompanyname {
           companyname = other.companyname
      }
      if other.hasCompanyusernumber {
           companyusernumber = other.companyusernumber
      }
      if other.hasCreatetime {
           createtime = other.createtime
      }
      if other.hasRolename {
           rolename = other.rolename
      }
      if other.hasCompanycreatetime {
           companycreatetime = other.companycreatetime
      }
      if other.hasPermissionroleid {
           permissionroleid = other.permissionroleid
      }
      if (other.hasCompanyinfo) {
          mergeCompanyinfo(other.companyinfo)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserLoginReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserLoginReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 24 :
          userid = input.readInt32()

        case 82 :
          username = input.readString()

        case 90 :
          realname = input.readString()

        case 98 :
          phonenumber = input.readString()

        case 106 :
          emailaddress = input.readString()

        case 112 :
          isloginsuccess = input.readBool()

        case 120 :
          permission = input.readInt32()

        case 128 :
          companyid = input.readInt32()

        case 138 :
          companyname = input.readString()

        case 144 :
          companyusernumber = input.readInt32()

        case 154 :
          createtime = input.readString()

        case 162 :
          rolename = input.readString()

        case 170 :
          companycreatetime = input.readString()

        case 176 :
          permissionroleid = input.readInt32()

        case 802 :
          var subBuilder:Comm.PkgCompanyInfoBuilder = Comm.PkgCompanyInfo.builder()
          if hasCompanyinfo {
            subBuilder.mergeFrom(companyinfo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          companyinfo = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserGetPasswordReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasPhonenumber {
        output.writeString(2, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(3, value:emailaddress)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(2)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserGetPasswordReq {
      return Comm.PkgUserGetPasswordReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetPasswordReq {
      return Comm.PkgUserGetPasswordReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserGetPasswordReq {
      return Comm.PkgUserGetPasswordReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserGetPasswordReq {
      return Comm.PkgUserGetPasswordReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserGetPasswordReq {
      return Comm.PkgUserGetPasswordReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetPasswordReq {
      return Comm.PkgUserGetPasswordReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserGetPasswordReqBuilder {
      return Comm.PkgUserGetPasswordReq.classBuilder() as! Comm.PkgUserGetPasswordReqBuilder
    }
    internal func builder() -> Comm.PkgUserGetPasswordReqBuilder {
      return classBuilder() as! Comm.PkgUserGetPasswordReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetPasswordReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetPasswordReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserGetPasswordReqBuilder {
      return Comm.PkgUserGetPasswordReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserGetPasswordReq) -> Comm.PkgUserGetPasswordReqBuilder {
      return Comm.PkgUserGetPasswordReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserGetPasswordReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserGetPasswordReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserGetPasswordReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserGetPasswordReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserGetPasswordReq

    required override internal init () {
       builderResult = Comm.PkgUserGetPasswordReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserGetPasswordReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserGetPasswordReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserGetPasswordReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserGetPasswordReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserGetPasswordReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserGetPasswordReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserGetPasswordReqBuilder {
      builderResult = Comm.PkgUserGetPasswordReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserGetPasswordReqBuilder {
      return Comm.PkgUserGetPasswordReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserGetPasswordReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserGetPasswordReq {
      var returnMe:Comm.PkgUserGetPasswordReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserGetPasswordReq) -> Comm.PkgUserGetPasswordReqBuilder {
      if (other == Comm.PkgUserGetPasswordReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserGetPasswordReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetPasswordReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 18 :
          phonenumber = input.readString()

        case 26 :
          emailaddress = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserGetPasswordReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserGetPasswordReply {
      return Comm.PkgUserGetPasswordReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetPasswordReply {
      return Comm.PkgUserGetPasswordReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserGetPasswordReply {
      return Comm.PkgUserGetPasswordReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserGetPasswordReply {
      return Comm.PkgUserGetPasswordReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserGetPasswordReply {
      return Comm.PkgUserGetPasswordReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetPasswordReply {
      return Comm.PkgUserGetPasswordReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserGetPasswordReplyBuilder {
      return Comm.PkgUserGetPasswordReply.classBuilder() as! Comm.PkgUserGetPasswordReplyBuilder
    }
    internal func builder() -> Comm.PkgUserGetPasswordReplyBuilder {
      return classBuilder() as! Comm.PkgUserGetPasswordReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetPasswordReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserGetPasswordReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserGetPasswordReplyBuilder {
      return Comm.PkgUserGetPasswordReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserGetPasswordReply) -> Comm.PkgUserGetPasswordReplyBuilder {
      return Comm.PkgUserGetPasswordReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserGetPasswordReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserGetPasswordReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserGetPasswordReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserGetPasswordReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserGetPasswordReply

    required override internal init () {
       builderResult = Comm.PkgUserGetPasswordReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserGetPasswordReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserGetPasswordReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserGetPasswordReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserGetPasswordReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserGetPasswordReplyBuilder {
      builderResult = Comm.PkgUserGetPasswordReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserGetPasswordReplyBuilder {
      return Comm.PkgUserGetPasswordReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserGetPasswordReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserGetPasswordReply {
      var returnMe:Comm.PkgUserGetPasswordReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserGetPasswordReply) -> Comm.PkgUserGetPasswordReplyBuilder {
      if (other == Comm.PkgUserGetPasswordReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserGetPasswordReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserGetPasswordReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserResetPasswordReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasUsername:Bool = false
    private(set) var username:String = ""

    private(set) var hasAuthcode:Bool = false
    private(set) var authcode:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
      if !hasAuthcode {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasUserid {
        output.writeInt32(2, value:userid)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(4, value:emailaddress)
      }
      if hasUsername {
        output.writeString(5, value:username)
      }
      if hasAuthcode {
        output.writeString(10, value:authcode)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(2)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(4)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(5)
      }
      if hasAuthcode {
        serialize_size += authcode.computeStringSize(10)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserResetPasswordReq {
      return Comm.PkgUserResetPasswordReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserResetPasswordReq {
      return Comm.PkgUserResetPasswordReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserResetPasswordReq {
      return Comm.PkgUserResetPasswordReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserResetPasswordReq {
      return Comm.PkgUserResetPasswordReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserResetPasswordReq {
      return Comm.PkgUserResetPasswordReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserResetPasswordReq {
      return Comm.PkgUserResetPasswordReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserResetPasswordReqBuilder {
      return Comm.PkgUserResetPasswordReq.classBuilder() as! Comm.PkgUserResetPasswordReqBuilder
    }
    internal func builder() -> Comm.PkgUserResetPasswordReqBuilder {
      return classBuilder() as! Comm.PkgUserResetPasswordReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserResetPasswordReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserResetPasswordReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserResetPasswordReqBuilder {
      return Comm.PkgUserResetPasswordReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserResetPasswordReq) -> Comm.PkgUserResetPasswordReqBuilder {
      return Comm.PkgUserResetPasswordReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if hasAuthcode {
        output += "\(indent) authcode: \(authcode) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasAuthcode {
               hashCode = (hashCode &* 31) &+ authcode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserResetPasswordReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserResetPasswordReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserResetPasswordReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserResetPasswordReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserResetPasswordReq

    required override internal init () {
       builderResult = Comm.PkgUserResetPasswordReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserResetPasswordReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserResetPasswordReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgUserResetPasswordReqBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgUserResetPasswordReqBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserResetPasswordReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserResetPasswordReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserResetPasswordReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserResetPasswordReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    func setUsername(value:String)-> Comm.PkgUserResetPasswordReqBuilder {
      self.username = value
      return self
    }
    internal func clearUsername() -> Comm.PkgUserResetPasswordReqBuilder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    var hasAuthcode:Bool {
         get {
              return builderResult.hasAuthcode
         }
    }
    var authcode:String {
         get {
              return builderResult.authcode
         }
         set (value) {
             builderResult.hasAuthcode = true
             builderResult.authcode = value
         }
    }
    func setAuthcode(value:String)-> Comm.PkgUserResetPasswordReqBuilder {
      self.authcode = value
      return self
    }
    internal func clearAuthcode() -> Comm.PkgUserResetPasswordReqBuilder{
         builderResult.hasAuthcode = false
         builderResult.authcode = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserResetPasswordReqBuilder {
      builderResult = Comm.PkgUserResetPasswordReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserResetPasswordReqBuilder {
      return Comm.PkgUserResetPasswordReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserResetPasswordReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserResetPasswordReq {
      var returnMe:Comm.PkgUserResetPasswordReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserResetPasswordReq) -> Comm.PkgUserResetPasswordReqBuilder {
      if (other == Comm.PkgUserResetPasswordReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasAuthcode {
           authcode = other.authcode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserResetPasswordReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserResetPasswordReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 16 :
          userid = input.readInt32()

        case 26 :
          phonenumber = input.readString()

        case 34 :
          emailaddress = input.readString()

        case 42 :
          username = input.readString()

        case 82 :
          authcode = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserResetPasswordReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasOldpassword:Bool = false
    private(set) var oldpassword:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasOldpassword {
        output.writeString(3, value:oldpassword)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasOldpassword {
        serialize_size += oldpassword.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserResetPasswordReply {
      return Comm.PkgUserResetPasswordReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserResetPasswordReply {
      return Comm.PkgUserResetPasswordReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserResetPasswordReply {
      return Comm.PkgUserResetPasswordReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserResetPasswordReply {
      return Comm.PkgUserResetPasswordReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserResetPasswordReply {
      return Comm.PkgUserResetPasswordReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserResetPasswordReply {
      return Comm.PkgUserResetPasswordReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserResetPasswordReplyBuilder {
      return Comm.PkgUserResetPasswordReply.classBuilder() as! Comm.PkgUserResetPasswordReplyBuilder
    }
    internal func builder() -> Comm.PkgUserResetPasswordReplyBuilder {
      return classBuilder() as! Comm.PkgUserResetPasswordReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserResetPasswordReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserResetPasswordReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserResetPasswordReplyBuilder {
      return Comm.PkgUserResetPasswordReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserResetPasswordReply) -> Comm.PkgUserResetPasswordReplyBuilder {
      return Comm.PkgUserResetPasswordReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasOldpassword {
        output += "\(indent) oldpassword: \(oldpassword) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasOldpassword {
               hashCode = (hashCode &* 31) &+ oldpassword.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserResetPasswordReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserResetPasswordReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserResetPasswordReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserResetPasswordReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserResetPasswordReply

    required override internal init () {
       builderResult = Comm.PkgUserResetPasswordReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserResetPasswordReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserResetPasswordReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserResetPasswordReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserResetPasswordReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasOldpassword:Bool {
         get {
              return builderResult.hasOldpassword
         }
    }
    var oldpassword:String {
         get {
              return builderResult.oldpassword
         }
         set (value) {
             builderResult.hasOldpassword = true
             builderResult.oldpassword = value
         }
    }
    func setOldpassword(value:String)-> Comm.PkgUserResetPasswordReplyBuilder {
      self.oldpassword = value
      return self
    }
    internal func clearOldpassword() -> Comm.PkgUserResetPasswordReplyBuilder{
         builderResult.hasOldpassword = false
         builderResult.oldpassword = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserResetPasswordReplyBuilder {
      builderResult = Comm.PkgUserResetPasswordReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserResetPasswordReplyBuilder {
      return Comm.PkgUserResetPasswordReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserResetPasswordReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserResetPasswordReply {
      var returnMe:Comm.PkgUserResetPasswordReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserResetPasswordReply) -> Comm.PkgUserResetPasswordReplyBuilder {
      if (other == Comm.PkgUserResetPasswordReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasOldpassword {
           oldpassword = other.oldpassword
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserResetPasswordReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserResetPasswordReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          oldpassword = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserSetReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnSetType:Int32 {
        case StPhone = 1
        case StEmail = 2
        case StUsername = 4
        case StNewpassword = 8
        case StRealname = 16

      }

      //Enum type declaration end 

    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasSettype:Bool = false
    private(set) var settype:Int32 = Int32(0)

    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var hasPassword:Bool = false
    private(set) var password:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasUsername:Bool = false
    private(set) var username:String = ""

    private(set) var hasNewpassword:Bool = false
    private(set) var newpassword:String = ""

    private(set) var hasRealname:Bool = false
    private(set) var realname:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
      if !hasSettype {
        return false
      }
      if !hasPassword {
        return false
      }
      if !hasNewpassword {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasSettype {
        output.writeInt32(2, value:settype)
      }
      if hasUserid {
        output.writeInt32(3, value:userid)
      }
      if hasPassword {
        output.writeString(4, value:password)
      }
      if hasPhonenumber {
        output.writeString(5, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(6, value:emailaddress)
      }
      if hasUsername {
        output.writeString(7, value:username)
      }
      if hasNewpassword {
        output.writeString(8, value:newpassword)
      }
      if hasRealname {
        output.writeString(9, value:realname)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasSettype {
        serialize_size += settype.computeInt32Size(2)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(3)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(4)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(5)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(6)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(7)
      }
      if hasNewpassword {
        serialize_size += newpassword.computeStringSize(8)
      }
      if hasRealname {
        serialize_size += realname.computeStringSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserSetReq {
      return Comm.PkgUserSetReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserSetReq {
      return Comm.PkgUserSetReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserSetReq {
      return Comm.PkgUserSetReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserSetReq {
      return Comm.PkgUserSetReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserSetReq {
      return Comm.PkgUserSetReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserSetReq {
      return Comm.PkgUserSetReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserSetReqBuilder {
      return Comm.PkgUserSetReq.classBuilder() as! Comm.PkgUserSetReqBuilder
    }
    internal func builder() -> Comm.PkgUserSetReqBuilder {
      return classBuilder() as! Comm.PkgUserSetReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserSetReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserSetReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserSetReqBuilder {
      return Comm.PkgUserSetReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserSetReq) -> Comm.PkgUserSetReqBuilder {
      return Comm.PkgUserSetReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasSettype {
        output += "\(indent) settype: \(settype) \n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if hasNewpassword {
        output += "\(indent) newpassword: \(newpassword) \n"
      }
      if hasRealname {
        output += "\(indent) realname: \(realname) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasSettype {
               hashCode = (hashCode &* 31) &+ settype.hashValue
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasNewpassword {
               hashCode = (hashCode &* 31) &+ newpassword.hashValue
            }
            if hasRealname {
               hashCode = (hashCode &* 31) &+ realname.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserSetReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserSetReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserSetReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserSetReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserSetReq

    required override internal init () {
       builderResult = Comm.PkgUserSetReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserSetReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserSetReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasSettype:Bool {
         get {
              return builderResult.hasSettype
         }
    }
    var settype:Int32 {
         get {
              return builderResult.settype
         }
         set (value) {
             builderResult.hasSettype = true
             builderResult.settype = value
         }
    }
    func setSettype(value:Int32)-> Comm.PkgUserSetReqBuilder {
      self.settype = value
      return self
    }
    internal func clearSettype() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasSettype = false
         builderResult.settype = Int32(0)
         return self
    }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgUserSetReqBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    var hasPassword:Bool {
         get {
              return builderResult.hasPassword
         }
    }
    var password:String {
         get {
              return builderResult.password
         }
         set (value) {
             builderResult.hasPassword = true
             builderResult.password = value
         }
    }
    func setPassword(value:String)-> Comm.PkgUserSetReqBuilder {
      self.password = value
      return self
    }
    internal func clearPassword() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasPassword = false
         builderResult.password = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserSetReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserSetReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    func setUsername(value:String)-> Comm.PkgUserSetReqBuilder {
      self.username = value
      return self
    }
    internal func clearUsername() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    var hasNewpassword:Bool {
         get {
              return builderResult.hasNewpassword
         }
    }
    var newpassword:String {
         get {
              return builderResult.newpassword
         }
         set (value) {
             builderResult.hasNewpassword = true
             builderResult.newpassword = value
         }
    }
    func setNewpassword(value:String)-> Comm.PkgUserSetReqBuilder {
      self.newpassword = value
      return self
    }
    internal func clearNewpassword() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasNewpassword = false
         builderResult.newpassword = ""
         return self
    }
    var hasRealname:Bool {
         get {
              return builderResult.hasRealname
         }
    }
    var realname:String {
         get {
              return builderResult.realname
         }
         set (value) {
             builderResult.hasRealname = true
             builderResult.realname = value
         }
    }
    func setRealname(value:String)-> Comm.PkgUserSetReqBuilder {
      self.realname = value
      return self
    }
    internal func clearRealname() -> Comm.PkgUserSetReqBuilder{
         builderResult.hasRealname = false
         builderResult.realname = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserSetReqBuilder {
      builderResult = Comm.PkgUserSetReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserSetReqBuilder {
      return Comm.PkgUserSetReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserSetReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserSetReq {
      var returnMe:Comm.PkgUserSetReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserSetReq) -> Comm.PkgUserSetReqBuilder {
      if (other == Comm.PkgUserSetReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasSettype {
           settype = other.settype
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasPassword {
           password = other.password
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasNewpassword {
           newpassword = other.newpassword
      }
      if other.hasRealname {
           realname = other.realname
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserSetReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserSetReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 16 :
          settype = input.readInt32()

        case 24 :
          userid = input.readInt32()

        case 34 :
          password = input.readString()

        case 42 :
          phonenumber = input.readString()

        case 50 :
          emailaddress = input.readString()

        case 58 :
          username = input.readString()

        case 66 :
          newpassword = input.readString()

        case 74 :
          realname = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserSetReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserSetReply {
      return Comm.PkgUserSetReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserSetReply {
      return Comm.PkgUserSetReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserSetReply {
      return Comm.PkgUserSetReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserSetReply {
      return Comm.PkgUserSetReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserSetReply {
      return Comm.PkgUserSetReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserSetReply {
      return Comm.PkgUserSetReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserSetReplyBuilder {
      return Comm.PkgUserSetReply.classBuilder() as! Comm.PkgUserSetReplyBuilder
    }
    internal func builder() -> Comm.PkgUserSetReplyBuilder {
      return classBuilder() as! Comm.PkgUserSetReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserSetReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserSetReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserSetReplyBuilder {
      return Comm.PkgUserSetReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserSetReply) -> Comm.PkgUserSetReplyBuilder {
      return Comm.PkgUserSetReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserSetReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserSetReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserSetReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserSetReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserSetReply

    required override internal init () {
       builderResult = Comm.PkgUserSetReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserSetReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserSetReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserSetReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserSetReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserSetReplyBuilder {
      builderResult = Comm.PkgUserSetReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserSetReplyBuilder {
      return Comm.PkgUserSetReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserSetReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserSetReply {
      var returnMe:Comm.PkgUserSetReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserSetReply) -> Comm.PkgUserSetReplyBuilder {
      if (other == Comm.PkgUserSetReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserSetReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserSetReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserInvitionUserReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var gettype:Comm.EnGetType = Comm.EnGetType.GtPhone
    private(set) var hasGettype:Bool = false
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasRealname:Bool = false
    private(set) var realname:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGettype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGettype {
        output.writeEnum(1, value:gettype.rawValue)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(4, value:emailaddress)
      }
      if hasRealname {
        output.writeString(5, value:realname)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasGettype) {
        serialize_size += gettype.rawValue.computeEnumSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(4)
      }
      if hasRealname {
        serialize_size += realname.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserInvitionUserReq {
      return Comm.PkgUserInvitionUserReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionUserReq {
      return Comm.PkgUserInvitionUserReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserInvitionUserReq {
      return Comm.PkgUserInvitionUserReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserInvitionUserReq {
      return Comm.PkgUserInvitionUserReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserInvitionUserReq {
      return Comm.PkgUserInvitionUserReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionUserReq {
      return Comm.PkgUserInvitionUserReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserInvitionUserReqBuilder {
      return Comm.PkgUserInvitionUserReq.classBuilder() as! Comm.PkgUserInvitionUserReqBuilder
    }
    internal func builder() -> Comm.PkgUserInvitionUserReqBuilder {
      return classBuilder() as! Comm.PkgUserInvitionUserReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionUserReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionUserReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserInvitionUserReqBuilder {
      return Comm.PkgUserInvitionUserReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserInvitionUserReq) -> Comm.PkgUserInvitionUserReqBuilder {
      return Comm.PkgUserInvitionUserReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasGettype) {
        output += "\(indent) gettype: \(gettype.rawValue)\n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasRealname {
        output += "\(indent) realname: \(realname) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGettype {
               hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasRealname {
               hashCode = (hashCode &* 31) &+ realname.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserInvitionUserReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserInvitionUserReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserInvitionUserReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserInvitionUserReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserInvitionUserReq

    required override internal init () {
       builderResult = Comm.PkgUserInvitionUserReq()
       super.init()
    }
      var hasGettype:Bool{
          get {
              return builderResult.hasGettype
          }
      }
      var gettype:Comm.EnGetType {
          get {
              return builderResult.gettype
          }
          set (value) {
              builderResult.hasGettype = true
              builderResult.gettype = value
          }
      }
      internal func setGettype(value:Comm.EnGetType)-> Comm.PkgUserInvitionUserReqBuilder {
        self.gettype = value
        return self
      }
      internal func clearGettype() -> Comm.PkgUserInvitionUserReqBuilder {
         builderResult.hasGettype = false
         builderResult.gettype = .GtPhone
         return self
      }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgUserInvitionUserReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgUserInvitionUserReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgUserInvitionUserReqBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgUserInvitionUserReqBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasRealname:Bool {
         get {
              return builderResult.hasRealname
         }
    }
    var realname:String {
         get {
              return builderResult.realname
         }
         set (value) {
             builderResult.hasRealname = true
             builderResult.realname = value
         }
    }
    func setRealname(value:String)-> Comm.PkgUserInvitionUserReqBuilder {
      self.realname = value
      return self
    }
    internal func clearRealname() -> Comm.PkgUserInvitionUserReqBuilder{
         builderResult.hasRealname = false
         builderResult.realname = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserInvitionUserReqBuilder {
      builderResult = Comm.PkgUserInvitionUserReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserInvitionUserReqBuilder {
      return Comm.PkgUserInvitionUserReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserInvitionUserReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserInvitionUserReq {
      var returnMe:Comm.PkgUserInvitionUserReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserInvitionUserReq) -> Comm.PkgUserInvitionUserReqBuilder {
      if (other == Comm.PkgUserInvitionUserReq()) {
       return self
      }
      if other.hasGettype {
           gettype = other.gettype
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasRealname {
           realname = other.realname
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserInvitionUserReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionUserReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntgettype = input.readEnum()
          if let enumsgettype = Comm.EnGetType(rawValue:valueIntgettype){
               gettype = enumsgettype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntgettype))
          }

        case 26 :
          phonenumber = input.readString()

        case 34 :
          emailaddress = input.readString()

        case 42 :
          realname = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserInvitionUserReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasInvitioncode:Bool = false
    private(set) var invitioncode:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasInvitioncode {
        output.writeString(3, value:invitioncode)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasInvitioncode {
        serialize_size += invitioncode.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserInvitionUserReply {
      return Comm.PkgUserInvitionUserReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionUserReply {
      return Comm.PkgUserInvitionUserReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserInvitionUserReply {
      return Comm.PkgUserInvitionUserReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserInvitionUserReply {
      return Comm.PkgUserInvitionUserReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserInvitionUserReply {
      return Comm.PkgUserInvitionUserReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionUserReply {
      return Comm.PkgUserInvitionUserReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserInvitionUserReplyBuilder {
      return Comm.PkgUserInvitionUserReply.classBuilder() as! Comm.PkgUserInvitionUserReplyBuilder
    }
    internal func builder() -> Comm.PkgUserInvitionUserReplyBuilder {
      return classBuilder() as! Comm.PkgUserInvitionUserReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionUserReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionUserReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserInvitionUserReplyBuilder {
      return Comm.PkgUserInvitionUserReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserInvitionUserReply) -> Comm.PkgUserInvitionUserReplyBuilder {
      return Comm.PkgUserInvitionUserReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasInvitioncode {
        output += "\(indent) invitioncode: \(invitioncode) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasInvitioncode {
               hashCode = (hashCode &* 31) &+ invitioncode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserInvitionUserReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserInvitionUserReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserInvitionUserReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserInvitionUserReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserInvitionUserReply

    required override internal init () {
       builderResult = Comm.PkgUserInvitionUserReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserInvitionUserReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserInvitionUserReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserInvitionUserReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserInvitionUserReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasInvitioncode:Bool {
         get {
              return builderResult.hasInvitioncode
         }
    }
    var invitioncode:String {
         get {
              return builderResult.invitioncode
         }
         set (value) {
             builderResult.hasInvitioncode = true
             builderResult.invitioncode = value
         }
    }
    func setInvitioncode(value:String)-> Comm.PkgUserInvitionUserReplyBuilder {
      self.invitioncode = value
      return self
    }
    internal func clearInvitioncode() -> Comm.PkgUserInvitionUserReplyBuilder{
         builderResult.hasInvitioncode = false
         builderResult.invitioncode = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserInvitionUserReplyBuilder {
      builderResult = Comm.PkgUserInvitionUserReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserInvitionUserReplyBuilder {
      return Comm.PkgUserInvitionUserReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserInvitionUserReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserInvitionUserReply {
      var returnMe:Comm.PkgUserInvitionUserReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserInvitionUserReply) -> Comm.PkgUserInvitionUserReplyBuilder {
      if (other == Comm.PkgUserInvitionUserReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasInvitioncode {
           invitioncode = other.invitioncode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserInvitionUserReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionUserReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          invitioncode = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserInvitionCheckReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasInvitioncode:Bool = false
    private(set) var invitioncode:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasInvitioncode {
        output.writeString(1, value:invitioncode)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasInvitioncode {
        serialize_size += invitioncode.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserInvitionCheckReq {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionCheckReq {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserInvitionCheckReq {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserInvitionCheckReq {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserInvitionCheckReq {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionCheckReq {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserInvitionCheckReqBuilder {
      return Comm.PkgUserInvitionCheckReq.classBuilder() as! Comm.PkgUserInvitionCheckReqBuilder
    }
    internal func builder() -> Comm.PkgUserInvitionCheckReqBuilder {
      return classBuilder() as! Comm.PkgUserInvitionCheckReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionCheckReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionCheckReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserInvitionCheckReqBuilder {
      return Comm.PkgUserInvitionCheckReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserInvitionCheckReq) -> Comm.PkgUserInvitionCheckReqBuilder {
      return Comm.PkgUserInvitionCheckReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasInvitioncode {
        output += "\(indent) invitioncode: \(invitioncode) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasInvitioncode {
               hashCode = (hashCode &* 31) &+ invitioncode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserInvitionCheckReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserInvitionCheckReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserInvitionCheckReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserInvitionCheckReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserInvitionCheckReq

    required override internal init () {
       builderResult = Comm.PkgUserInvitionCheckReq()
       super.init()
    }
    var hasInvitioncode:Bool {
         get {
              return builderResult.hasInvitioncode
         }
    }
    var invitioncode:String {
         get {
              return builderResult.invitioncode
         }
         set (value) {
             builderResult.hasInvitioncode = true
             builderResult.invitioncode = value
         }
    }
    func setInvitioncode(value:String)-> Comm.PkgUserInvitionCheckReqBuilder {
      self.invitioncode = value
      return self
    }
    internal func clearInvitioncode() -> Comm.PkgUserInvitionCheckReqBuilder{
         builderResult.hasInvitioncode = false
         builderResult.invitioncode = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserInvitionCheckReqBuilder {
      builderResult = Comm.PkgUserInvitionCheckReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserInvitionCheckReqBuilder {
      return Comm.PkgUserInvitionCheckReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserInvitionCheckReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserInvitionCheckReq {
      var returnMe:Comm.PkgUserInvitionCheckReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserInvitionCheckReq) -> Comm.PkgUserInvitionCheckReqBuilder {
      if (other == Comm.PkgUserInvitionCheckReq()) {
       return self
      }
      if other.hasInvitioncode {
           invitioncode = other.invitioncode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserInvitionCheckReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionCheckReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          invitioncode = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserInvitionCheckReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasPermission:Bool = false
    private(set) var permission:Int32 = Int32(0)

    private(set) var hasCompanyid:Bool = false
    private(set) var companyid:Int32 = Int32(0)

    private(set) var hasCompanyname:Bool = false
    private(set) var companyname:String = ""

    private(set) var hasCompanyusernumber:Bool = false
    private(set) var companyusernumber:Int32 = Int32(0)

    private(set) var hasRolename:Bool = false
    private(set) var rolename:String = ""

    private(set) var hasCompanycreatetime:Bool = false
    private(set) var companycreatetime:String = ""

    private(set) var hasPermissionroleid:Bool = false
    private(set) var permissionroleid:Int32 = Int32(0)

    private(set) var hasCompanyinfo:Bool = false
    private(set) var companyinfo:Comm.PkgCompanyInfo!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasPermission {
        output.writeInt32(15, value:permission)
      }
      if hasCompanyid {
        output.writeInt32(16, value:companyid)
      }
      if hasCompanyname {
        output.writeString(17, value:companyname)
      }
      if hasCompanyusernumber {
        output.writeInt32(18, value:companyusernumber)
      }
      if hasRolename {
        output.writeString(20, value:rolename)
      }
      if hasCompanycreatetime {
        output.writeString(21, value:companycreatetime)
      }
      if hasPermissionroleid {
        output.writeInt32(22, value:permissionroleid)
      }
      if hasCompanyinfo {
        output.writeMessage(100, value:companyinfo)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasPermission {
        serialize_size += permission.computeInt32Size(15)
      }
      if hasCompanyid {
        serialize_size += companyid.computeInt32Size(16)
      }
      if hasCompanyname {
        serialize_size += companyname.computeStringSize(17)
      }
      if hasCompanyusernumber {
        serialize_size += companyusernumber.computeInt32Size(18)
      }
      if hasRolename {
        serialize_size += rolename.computeStringSize(20)
      }
      if hasCompanycreatetime {
        serialize_size += companycreatetime.computeStringSize(21)
      }
      if hasPermissionroleid {
        serialize_size += permissionroleid.computeInt32Size(22)
      }
      if hasCompanyinfo {
          if let varSizecompanyinfo = companyinfo?.computeMessageSize(100) {
              serialize_size += varSizecompanyinfo
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserInvitionCheckReply {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionCheckReply {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserInvitionCheckReply {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserInvitionCheckReply {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserInvitionCheckReply {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionCheckReply {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserInvitionCheckReplyBuilder {
      return Comm.PkgUserInvitionCheckReply.classBuilder() as! Comm.PkgUserInvitionCheckReplyBuilder
    }
    internal func builder() -> Comm.PkgUserInvitionCheckReplyBuilder {
      return classBuilder() as! Comm.PkgUserInvitionCheckReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionCheckReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserInvitionCheckReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserInvitionCheckReplyBuilder {
      return Comm.PkgUserInvitionCheckReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserInvitionCheckReply) -> Comm.PkgUserInvitionCheckReplyBuilder {
      return Comm.PkgUserInvitionCheckReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasPermission {
        output += "\(indent) permission: \(permission) \n"
      }
      if hasCompanyid {
        output += "\(indent) companyid: \(companyid) \n"
      }
      if hasCompanyname {
        output += "\(indent) companyname: \(companyname) \n"
      }
      if hasCompanyusernumber {
        output += "\(indent) companyusernumber: \(companyusernumber) \n"
      }
      if hasRolename {
        output += "\(indent) rolename: \(rolename) \n"
      }
      if hasCompanycreatetime {
        output += "\(indent) companycreatetime: \(companycreatetime) \n"
      }
      if hasPermissionroleid {
        output += "\(indent) permissionroleid: \(permissionroleid) \n"
      }
      if hasCompanyinfo {
        output += "\(indent) companyinfo {\n"
        companyinfo?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasPermission {
               hashCode = (hashCode &* 31) &+ permission.hashValue
            }
            if hasCompanyid {
               hashCode = (hashCode &* 31) &+ companyid.hashValue
            }
            if hasCompanyname {
               hashCode = (hashCode &* 31) &+ companyname.hashValue
            }
            if hasCompanyusernumber {
               hashCode = (hashCode &* 31) &+ companyusernumber.hashValue
            }
            if hasRolename {
               hashCode = (hashCode &* 31) &+ rolename.hashValue
            }
            if hasCompanycreatetime {
               hashCode = (hashCode &* 31) &+ companycreatetime.hashValue
            }
            if hasPermissionroleid {
               hashCode = (hashCode &* 31) &+ permissionroleid.hashValue
            }
            if hasCompanyinfo {
                if let hashValuecompanyinfo = companyinfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecompanyinfo
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserInvitionCheckReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserInvitionCheckReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserInvitionCheckReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserInvitionCheckReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserInvitionCheckReply

    required override internal init () {
       builderResult = Comm.PkgUserInvitionCheckReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasPermission:Bool {
         get {
              return builderResult.hasPermission
         }
    }
    var permission:Int32 {
         get {
              return builderResult.permission
         }
         set (value) {
             builderResult.hasPermission = true
             builderResult.permission = value
         }
    }
    func setPermission(value:Int32)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.permission = value
      return self
    }
    internal func clearPermission() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasPermission = false
         builderResult.permission = Int32(0)
         return self
    }
    var hasCompanyid:Bool {
         get {
              return builderResult.hasCompanyid
         }
    }
    var companyid:Int32 {
         get {
              return builderResult.companyid
         }
         set (value) {
             builderResult.hasCompanyid = true
             builderResult.companyid = value
         }
    }
    func setCompanyid(value:Int32)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.companyid = value
      return self
    }
    internal func clearCompanyid() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasCompanyid = false
         builderResult.companyid = Int32(0)
         return self
    }
    var hasCompanyname:Bool {
         get {
              return builderResult.hasCompanyname
         }
    }
    var companyname:String {
         get {
              return builderResult.companyname
         }
         set (value) {
             builderResult.hasCompanyname = true
             builderResult.companyname = value
         }
    }
    func setCompanyname(value:String)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.companyname = value
      return self
    }
    internal func clearCompanyname() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasCompanyname = false
         builderResult.companyname = ""
         return self
    }
    var hasCompanyusernumber:Bool {
         get {
              return builderResult.hasCompanyusernumber
         }
    }
    var companyusernumber:Int32 {
         get {
              return builderResult.companyusernumber
         }
         set (value) {
             builderResult.hasCompanyusernumber = true
             builderResult.companyusernumber = value
         }
    }
    func setCompanyusernumber(value:Int32)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.companyusernumber = value
      return self
    }
    internal func clearCompanyusernumber() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasCompanyusernumber = false
         builderResult.companyusernumber = Int32(0)
         return self
    }
    var hasRolename:Bool {
         get {
              return builderResult.hasRolename
         }
    }
    var rolename:String {
         get {
              return builderResult.rolename
         }
         set (value) {
             builderResult.hasRolename = true
             builderResult.rolename = value
         }
    }
    func setRolename(value:String)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.rolename = value
      return self
    }
    internal func clearRolename() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasRolename = false
         builderResult.rolename = ""
         return self
    }
    var hasCompanycreatetime:Bool {
         get {
              return builderResult.hasCompanycreatetime
         }
    }
    var companycreatetime:String {
         get {
              return builderResult.companycreatetime
         }
         set (value) {
             builderResult.hasCompanycreatetime = true
             builderResult.companycreatetime = value
         }
    }
    func setCompanycreatetime(value:String)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.companycreatetime = value
      return self
    }
    internal func clearCompanycreatetime() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasCompanycreatetime = false
         builderResult.companycreatetime = ""
         return self
    }
    var hasPermissionroleid:Bool {
         get {
              return builderResult.hasPermissionroleid
         }
    }
    var permissionroleid:Int32 {
         get {
              return builderResult.permissionroleid
         }
         set (value) {
             builderResult.hasPermissionroleid = true
             builderResult.permissionroleid = value
         }
    }
    func setPermissionroleid(value:Int32)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.permissionroleid = value
      return self
    }
    internal func clearPermissionroleid() -> Comm.PkgUserInvitionCheckReplyBuilder{
         builderResult.hasPermissionroleid = false
         builderResult.permissionroleid = Int32(0)
         return self
    }
    var hasCompanyinfo:Bool {
         get {
             return builderResult.hasCompanyinfo
         }
    }
    var companyinfo:Comm.PkgCompanyInfo! {
         get {
             return builderResult.companyinfo
         }
         set (value) {
             builderResult.hasCompanyinfo = true
             builderResult.companyinfo = value
         }
    }
    func setCompanyinfo(value:Comm.PkgCompanyInfo!)-> Comm.PkgUserInvitionCheckReplyBuilder {
      self.companyinfo = value
      return self
    }
    internal func mergeCompanyinfo(value:Comm.PkgCompanyInfo) -> Comm.PkgUserInvitionCheckReplyBuilder {
      if (builderResult.hasCompanyinfo) {
        builderResult.companyinfo = Comm.PkgCompanyInfo.builderWithPrototype(builderResult.companyinfo).mergeFrom(value).buildPartial()
      } else {
        builderResult.companyinfo = value
      }
      builderResult.hasCompanyinfo = true
      return self
    }
    internal func clearCompanyinfo() -> Comm.PkgUserInvitionCheckReplyBuilder {
      builderResult.hasCompanyinfo = false
      builderResult.companyinfo = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserInvitionCheckReplyBuilder {
      builderResult = Comm.PkgUserInvitionCheckReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserInvitionCheckReplyBuilder {
      return Comm.PkgUserInvitionCheckReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserInvitionCheckReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserInvitionCheckReply {
      var returnMe:Comm.PkgUserInvitionCheckReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserInvitionCheckReply) -> Comm.PkgUserInvitionCheckReplyBuilder {
      if (other == Comm.PkgUserInvitionCheckReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasPermission {
           permission = other.permission
      }
      if other.hasCompanyid {
           companyid = other.companyid
      }
      if other.hasCompanyname {
           companyname = other.companyname
      }
      if other.hasCompanyusernumber {
           companyusernumber = other.companyusernumber
      }
      if other.hasRolename {
           rolename = other.rolename
      }
      if other.hasCompanycreatetime {
           companycreatetime = other.companycreatetime
      }
      if other.hasPermissionroleid {
           permissionroleid = other.permissionroleid
      }
      if (other.hasCompanyinfo) {
          mergeCompanyinfo(other.companyinfo)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserInvitionCheckReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserInvitionCheckReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 120 :
          permission = input.readInt32()

        case 128 :
          companyid = input.readInt32()

        case 138 :
          companyname = input.readString()

        case 144 :
          companyusernumber = input.readInt32()

        case 162 :
          rolename = input.readString()

        case 170 :
          companycreatetime = input.readString()

        case 176 :
          permissionroleid = input.readInt32()

        case 802 :
          var subBuilder:Comm.PkgCompanyInfoBuilder = Comm.PkgCompanyInfo.builder()
          if hasCompanyinfo {
            subBuilder.mergeFrom(companyinfo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          companyinfo = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCreateCompanyReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasCompanyname:Bool = false
    private(set) var companyname:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasCompanyname {
        output.writeString(1, value:companyname)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCompanyname {
        serialize_size += companyname.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCreateCompanyReq {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateCompanyReq {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCreateCompanyReq {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCreateCompanyReq {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCreateCompanyReq {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateCompanyReq {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCreateCompanyReqBuilder {
      return Comm.PkgUserCreateCompanyReq.classBuilder() as! Comm.PkgUserCreateCompanyReqBuilder
    }
    internal func builder() -> Comm.PkgUserCreateCompanyReqBuilder {
      return classBuilder() as! Comm.PkgUserCreateCompanyReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateCompanyReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateCompanyReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCreateCompanyReqBuilder {
      return Comm.PkgUserCreateCompanyReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCreateCompanyReq) -> Comm.PkgUserCreateCompanyReqBuilder {
      return Comm.PkgUserCreateCompanyReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasCompanyname {
        output += "\(indent) companyname: \(companyname) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCompanyname {
               hashCode = (hashCode &* 31) &+ companyname.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCreateCompanyReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCreateCompanyReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCreateCompanyReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCreateCompanyReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCreateCompanyReq

    required override internal init () {
       builderResult = Comm.PkgUserCreateCompanyReq()
       super.init()
    }
    var hasCompanyname:Bool {
         get {
              return builderResult.hasCompanyname
         }
    }
    var companyname:String {
         get {
              return builderResult.companyname
         }
         set (value) {
             builderResult.hasCompanyname = true
             builderResult.companyname = value
         }
    }
    func setCompanyname(value:String)-> Comm.PkgUserCreateCompanyReqBuilder {
      self.companyname = value
      return self
    }
    internal func clearCompanyname() -> Comm.PkgUserCreateCompanyReqBuilder{
         builderResult.hasCompanyname = false
         builderResult.companyname = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCreateCompanyReqBuilder {
      builderResult = Comm.PkgUserCreateCompanyReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserCreateCompanyReqBuilder {
      return Comm.PkgUserCreateCompanyReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCreateCompanyReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCreateCompanyReq {
      var returnMe:Comm.PkgUserCreateCompanyReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCreateCompanyReq) -> Comm.PkgUserCreateCompanyReqBuilder {
      if (other == Comm.PkgUserCreateCompanyReq()) {
       return self
      }
      if other.hasCompanyname {
           companyname = other.companyname
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCreateCompanyReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateCompanyReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          companyname = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserCreateCompanyReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasCompanyid:Bool = false
    private(set) var companyid:Int32 = Int32(0)

    private(set) var hasCompanyname:Bool = false
    private(set) var companyname:String = ""

    private(set) var hasCompanyusernumber:Bool = false
    private(set) var companyusernumber:Int32 = Int32(0)

    private(set) var hasRolename:Bool = false
    private(set) var rolename:String = ""

    private(set) var hasCompanycreatetime:Bool = false
    private(set) var companycreatetime:String = ""

    private(set) var hasPermissionroleid:Bool = false
    private(set) var permissionroleid:Int32 = Int32(0)

    private(set) var hasCompanyinfo:Bool = false
    private(set) var companyinfo:Comm.PkgCompanyInfo!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasCompanyid {
        output.writeInt32(16, value:companyid)
      }
      if hasCompanyname {
        output.writeString(17, value:companyname)
      }
      if hasCompanyusernumber {
        output.writeInt32(18, value:companyusernumber)
      }
      if hasRolename {
        output.writeString(20, value:rolename)
      }
      if hasCompanycreatetime {
        output.writeString(21, value:companycreatetime)
      }
      if hasPermissionroleid {
        output.writeInt32(22, value:permissionroleid)
      }
      if hasCompanyinfo {
        output.writeMessage(100, value:companyinfo)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasCompanyid {
        serialize_size += companyid.computeInt32Size(16)
      }
      if hasCompanyname {
        serialize_size += companyname.computeStringSize(17)
      }
      if hasCompanyusernumber {
        serialize_size += companyusernumber.computeInt32Size(18)
      }
      if hasRolename {
        serialize_size += rolename.computeStringSize(20)
      }
      if hasCompanycreatetime {
        serialize_size += companycreatetime.computeStringSize(21)
      }
      if hasPermissionroleid {
        serialize_size += permissionroleid.computeInt32Size(22)
      }
      if hasCompanyinfo {
          if let varSizecompanyinfo = companyinfo?.computeMessageSize(100) {
              serialize_size += varSizecompanyinfo
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserCreateCompanyReply {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateCompanyReply {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserCreateCompanyReply {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserCreateCompanyReply {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserCreateCompanyReply {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateCompanyReply {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserCreateCompanyReplyBuilder {
      return Comm.PkgUserCreateCompanyReply.classBuilder() as! Comm.PkgUserCreateCompanyReplyBuilder
    }
    internal func builder() -> Comm.PkgUserCreateCompanyReplyBuilder {
      return classBuilder() as! Comm.PkgUserCreateCompanyReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateCompanyReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserCreateCompanyReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserCreateCompanyReplyBuilder {
      return Comm.PkgUserCreateCompanyReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserCreateCompanyReply) -> Comm.PkgUserCreateCompanyReplyBuilder {
      return Comm.PkgUserCreateCompanyReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasCompanyid {
        output += "\(indent) companyid: \(companyid) \n"
      }
      if hasCompanyname {
        output += "\(indent) companyname: \(companyname) \n"
      }
      if hasCompanyusernumber {
        output += "\(indent) companyusernumber: \(companyusernumber) \n"
      }
      if hasRolename {
        output += "\(indent) rolename: \(rolename) \n"
      }
      if hasCompanycreatetime {
        output += "\(indent) companycreatetime: \(companycreatetime) \n"
      }
      if hasPermissionroleid {
        output += "\(indent) permissionroleid: \(permissionroleid) \n"
      }
      if hasCompanyinfo {
        output += "\(indent) companyinfo {\n"
        companyinfo?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasCompanyid {
               hashCode = (hashCode &* 31) &+ companyid.hashValue
            }
            if hasCompanyname {
               hashCode = (hashCode &* 31) &+ companyname.hashValue
            }
            if hasCompanyusernumber {
               hashCode = (hashCode &* 31) &+ companyusernumber.hashValue
            }
            if hasRolename {
               hashCode = (hashCode &* 31) &+ rolename.hashValue
            }
            if hasCompanycreatetime {
               hashCode = (hashCode &* 31) &+ companycreatetime.hashValue
            }
            if hasPermissionroleid {
               hashCode = (hashCode &* 31) &+ permissionroleid.hashValue
            }
            if hasCompanyinfo {
                if let hashValuecompanyinfo = companyinfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecompanyinfo
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserCreateCompanyReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserCreateCompanyReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserCreateCompanyReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserCreateCompanyReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserCreateCompanyReply

    required override internal init () {
       builderResult = Comm.PkgUserCreateCompanyReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasCompanyid:Bool {
         get {
              return builderResult.hasCompanyid
         }
    }
    var companyid:Int32 {
         get {
              return builderResult.companyid
         }
         set (value) {
             builderResult.hasCompanyid = true
             builderResult.companyid = value
         }
    }
    func setCompanyid(value:Int32)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.companyid = value
      return self
    }
    internal func clearCompanyid() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasCompanyid = false
         builderResult.companyid = Int32(0)
         return self
    }
    var hasCompanyname:Bool {
         get {
              return builderResult.hasCompanyname
         }
    }
    var companyname:String {
         get {
              return builderResult.companyname
         }
         set (value) {
             builderResult.hasCompanyname = true
             builderResult.companyname = value
         }
    }
    func setCompanyname(value:String)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.companyname = value
      return self
    }
    internal func clearCompanyname() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasCompanyname = false
         builderResult.companyname = ""
         return self
    }
    var hasCompanyusernumber:Bool {
         get {
              return builderResult.hasCompanyusernumber
         }
    }
    var companyusernumber:Int32 {
         get {
              return builderResult.companyusernumber
         }
         set (value) {
             builderResult.hasCompanyusernumber = true
             builderResult.companyusernumber = value
         }
    }
    func setCompanyusernumber(value:Int32)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.companyusernumber = value
      return self
    }
    internal func clearCompanyusernumber() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasCompanyusernumber = false
         builderResult.companyusernumber = Int32(0)
         return self
    }
    var hasRolename:Bool {
         get {
              return builderResult.hasRolename
         }
    }
    var rolename:String {
         get {
              return builderResult.rolename
         }
         set (value) {
             builderResult.hasRolename = true
             builderResult.rolename = value
         }
    }
    func setRolename(value:String)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.rolename = value
      return self
    }
    internal func clearRolename() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasRolename = false
         builderResult.rolename = ""
         return self
    }
    var hasCompanycreatetime:Bool {
         get {
              return builderResult.hasCompanycreatetime
         }
    }
    var companycreatetime:String {
         get {
              return builderResult.companycreatetime
         }
         set (value) {
             builderResult.hasCompanycreatetime = true
             builderResult.companycreatetime = value
         }
    }
    func setCompanycreatetime(value:String)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.companycreatetime = value
      return self
    }
    internal func clearCompanycreatetime() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasCompanycreatetime = false
         builderResult.companycreatetime = ""
         return self
    }
    var hasPermissionroleid:Bool {
         get {
              return builderResult.hasPermissionroleid
         }
    }
    var permissionroleid:Int32 {
         get {
              return builderResult.permissionroleid
         }
         set (value) {
             builderResult.hasPermissionroleid = true
             builderResult.permissionroleid = value
         }
    }
    func setPermissionroleid(value:Int32)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.permissionroleid = value
      return self
    }
    internal func clearPermissionroleid() -> Comm.PkgUserCreateCompanyReplyBuilder{
         builderResult.hasPermissionroleid = false
         builderResult.permissionroleid = Int32(0)
         return self
    }
    var hasCompanyinfo:Bool {
         get {
             return builderResult.hasCompanyinfo
         }
    }
    var companyinfo:Comm.PkgCompanyInfo! {
         get {
             return builderResult.companyinfo
         }
         set (value) {
             builderResult.hasCompanyinfo = true
             builderResult.companyinfo = value
         }
    }
    func setCompanyinfo(value:Comm.PkgCompanyInfo!)-> Comm.PkgUserCreateCompanyReplyBuilder {
      self.companyinfo = value
      return self
    }
    internal func mergeCompanyinfo(value:Comm.PkgCompanyInfo) -> Comm.PkgUserCreateCompanyReplyBuilder {
      if (builderResult.hasCompanyinfo) {
        builderResult.companyinfo = Comm.PkgCompanyInfo.builderWithPrototype(builderResult.companyinfo).mergeFrom(value).buildPartial()
      } else {
        builderResult.companyinfo = value
      }
      builderResult.hasCompanyinfo = true
      return self
    }
    internal func clearCompanyinfo() -> Comm.PkgUserCreateCompanyReplyBuilder {
      builderResult.hasCompanyinfo = false
      builderResult.companyinfo = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserCreateCompanyReplyBuilder {
      builderResult = Comm.PkgUserCreateCompanyReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserCreateCompanyReplyBuilder {
      return Comm.PkgUserCreateCompanyReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserCreateCompanyReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserCreateCompanyReply {
      var returnMe:Comm.PkgUserCreateCompanyReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserCreateCompanyReply) -> Comm.PkgUserCreateCompanyReplyBuilder {
      if (other == Comm.PkgUserCreateCompanyReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasCompanyid {
           companyid = other.companyid
      }
      if other.hasCompanyname {
           companyname = other.companyname
      }
      if other.hasCompanyusernumber {
           companyusernumber = other.companyusernumber
      }
      if other.hasRolename {
           rolename = other.rolename
      }
      if other.hasCompanycreatetime {
           companycreatetime = other.companycreatetime
      }
      if other.hasPermissionroleid {
           permissionroleid = other.permissionroleid
      }
      if (other.hasCompanyinfo) {
          mergeCompanyinfo(other.companyinfo)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserCreateCompanyReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserCreateCompanyReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 128 :
          companyid = input.readInt32()

        case 138 :
          companyname = input.readString()

        case 144 :
          companyusernumber = input.readInt32()

        case 162 :
          rolename = input.readString()

        case 170 :
          companycreatetime = input.readString()

        case 176 :
          permissionroleid = input.readInt32()

        case 802 :
          var subBuilder:Comm.PkgCompanyInfoBuilder = Comm.PkgCompanyInfo.builder()
          if hasCompanyinfo {
            subBuilder.mergeFrom(companyinfo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          companyinfo = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserReassignAdminReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasAdminuserid:Bool = false
    private(set) var adminuserid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasAdminuserid {
        output.writeInt32(2, value:adminuserid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAdminuserid {
        serialize_size += adminuserid.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserReassignAdminReq {
      return Comm.PkgUserReassignAdminReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserReassignAdminReq {
      return Comm.PkgUserReassignAdminReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserReassignAdminReq {
      return Comm.PkgUserReassignAdminReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserReassignAdminReq {
      return Comm.PkgUserReassignAdminReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserReassignAdminReq {
      return Comm.PkgUserReassignAdminReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserReassignAdminReq {
      return Comm.PkgUserReassignAdminReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserReassignAdminReqBuilder {
      return Comm.PkgUserReassignAdminReq.classBuilder() as! Comm.PkgUserReassignAdminReqBuilder
    }
    internal func builder() -> Comm.PkgUserReassignAdminReqBuilder {
      return classBuilder() as! Comm.PkgUserReassignAdminReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserReassignAdminReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserReassignAdminReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserReassignAdminReqBuilder {
      return Comm.PkgUserReassignAdminReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserReassignAdminReq) -> Comm.PkgUserReassignAdminReqBuilder {
      return Comm.PkgUserReassignAdminReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasAdminuserid {
        output += "\(indent) adminuserid: \(adminuserid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAdminuserid {
               hashCode = (hashCode &* 31) &+ adminuserid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserReassignAdminReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserReassignAdminReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserReassignAdminReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserReassignAdminReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserReassignAdminReq

    required override internal init () {
       builderResult = Comm.PkgUserReassignAdminReq()
       super.init()
    }
    var hasAdminuserid:Bool {
         get {
              return builderResult.hasAdminuserid
         }
    }
    var adminuserid:Int32 {
         get {
              return builderResult.adminuserid
         }
         set (value) {
             builderResult.hasAdminuserid = true
             builderResult.adminuserid = value
         }
    }
    func setAdminuserid(value:Int32)-> Comm.PkgUserReassignAdminReqBuilder {
      self.adminuserid = value
      return self
    }
    internal func clearAdminuserid() -> Comm.PkgUserReassignAdminReqBuilder{
         builderResult.hasAdminuserid = false
         builderResult.adminuserid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserReassignAdminReqBuilder {
      builderResult = Comm.PkgUserReassignAdminReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserReassignAdminReqBuilder {
      return Comm.PkgUserReassignAdminReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserReassignAdminReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserReassignAdminReq {
      var returnMe:Comm.PkgUserReassignAdminReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserReassignAdminReq) -> Comm.PkgUserReassignAdminReqBuilder {
      if (other == Comm.PkgUserReassignAdminReq()) {
       return self
      }
      if other.hasAdminuserid {
           adminuserid = other.adminuserid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserReassignAdminReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserReassignAdminReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 16 :
          adminuserid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserReassignAdminReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasPermission:Bool = false
    private(set) var permission:Int32 = Int32(0)

    private(set) var hasRolename:Bool = false
    private(set) var rolename:String = ""

    private(set) var hasPermissionroleid:Bool = false
    private(set) var permissionroleid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasPermission {
        output.writeInt32(15, value:permission)
      }
      if hasRolename {
        output.writeString(20, value:rolename)
      }
      if hasPermissionroleid {
        output.writeInt32(22, value:permissionroleid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasPermission {
        serialize_size += permission.computeInt32Size(15)
      }
      if hasRolename {
        serialize_size += rolename.computeStringSize(20)
      }
      if hasPermissionroleid {
        serialize_size += permissionroleid.computeInt32Size(22)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserReassignAdminReply {
      return Comm.PkgUserReassignAdminReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserReassignAdminReply {
      return Comm.PkgUserReassignAdminReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserReassignAdminReply {
      return Comm.PkgUserReassignAdminReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserReassignAdminReply {
      return Comm.PkgUserReassignAdminReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserReassignAdminReply {
      return Comm.PkgUserReassignAdminReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserReassignAdminReply {
      return Comm.PkgUserReassignAdminReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserReassignAdminReplyBuilder {
      return Comm.PkgUserReassignAdminReply.classBuilder() as! Comm.PkgUserReassignAdminReplyBuilder
    }
    internal func builder() -> Comm.PkgUserReassignAdminReplyBuilder {
      return classBuilder() as! Comm.PkgUserReassignAdminReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserReassignAdminReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserReassignAdminReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserReassignAdminReplyBuilder {
      return Comm.PkgUserReassignAdminReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserReassignAdminReply) -> Comm.PkgUserReassignAdminReplyBuilder {
      return Comm.PkgUserReassignAdminReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasPermission {
        output += "\(indent) permission: \(permission) \n"
      }
      if hasRolename {
        output += "\(indent) rolename: \(rolename) \n"
      }
      if hasPermissionroleid {
        output += "\(indent) permissionroleid: \(permissionroleid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasPermission {
               hashCode = (hashCode &* 31) &+ permission.hashValue
            }
            if hasRolename {
               hashCode = (hashCode &* 31) &+ rolename.hashValue
            }
            if hasPermissionroleid {
               hashCode = (hashCode &* 31) &+ permissionroleid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserReassignAdminReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserReassignAdminReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserReassignAdminReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserReassignAdminReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserReassignAdminReply

    required override internal init () {
       builderResult = Comm.PkgUserReassignAdminReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserReassignAdminReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserReassignAdminReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserReassignAdminReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserReassignAdminReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasPermission:Bool {
         get {
              return builderResult.hasPermission
         }
    }
    var permission:Int32 {
         get {
              return builderResult.permission
         }
         set (value) {
             builderResult.hasPermission = true
             builderResult.permission = value
         }
    }
    func setPermission(value:Int32)-> Comm.PkgUserReassignAdminReplyBuilder {
      self.permission = value
      return self
    }
    internal func clearPermission() -> Comm.PkgUserReassignAdminReplyBuilder{
         builderResult.hasPermission = false
         builderResult.permission = Int32(0)
         return self
    }
    var hasRolename:Bool {
         get {
              return builderResult.hasRolename
         }
    }
    var rolename:String {
         get {
              return builderResult.rolename
         }
         set (value) {
             builderResult.hasRolename = true
             builderResult.rolename = value
         }
    }
    func setRolename(value:String)-> Comm.PkgUserReassignAdminReplyBuilder {
      self.rolename = value
      return self
    }
    internal func clearRolename() -> Comm.PkgUserReassignAdminReplyBuilder{
         builderResult.hasRolename = false
         builderResult.rolename = ""
         return self
    }
    var hasPermissionroleid:Bool {
         get {
              return builderResult.hasPermissionroleid
         }
    }
    var permissionroleid:Int32 {
         get {
              return builderResult.permissionroleid
         }
         set (value) {
             builderResult.hasPermissionroleid = true
             builderResult.permissionroleid = value
         }
    }
    func setPermissionroleid(value:Int32)-> Comm.PkgUserReassignAdminReplyBuilder {
      self.permissionroleid = value
      return self
    }
    internal func clearPermissionroleid() -> Comm.PkgUserReassignAdminReplyBuilder{
         builderResult.hasPermissionroleid = false
         builderResult.permissionroleid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserReassignAdminReplyBuilder {
      builderResult = Comm.PkgUserReassignAdminReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserReassignAdminReplyBuilder {
      return Comm.PkgUserReassignAdminReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserReassignAdminReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserReassignAdminReply {
      var returnMe:Comm.PkgUserReassignAdminReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserReassignAdminReply) -> Comm.PkgUserReassignAdminReplyBuilder {
      if (other == Comm.PkgUserReassignAdminReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasPermission {
           permission = other.permission
      }
      if other.hasRolename {
           rolename = other.rolename
      }
      if other.hasPermissionroleid {
           permissionroleid = other.permissionroleid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserReassignAdminReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserReassignAdminReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 120 :
          permission = input.readInt32()

        case 162 :
          rolename = input.readString()

        case 176 :
          permissionroleid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserDeleteFromCompanyReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var useridlist:Array<Int32> = Array<Int32>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !useridlist.isEmpty {
        for oneValueuseridlist in useridlist {
          output.writeInt32(1, value:oneValueuseridlist)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeUseridlist:Int32 = 0
      for oneValueuseridlist in useridlist {
          dataSizeUseridlist += oneValueuseridlist.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeUseridlist
      serialize_size += 1 * Int32(useridlist.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserDeleteFromCompanyReq {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserDeleteFromCompanyReq {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserDeleteFromCompanyReq {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserDeleteFromCompanyReq {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserDeleteFromCompanyReq {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserDeleteFromCompanyReq {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      return Comm.PkgUserDeleteFromCompanyReq.classBuilder() as! Comm.PkgUserDeleteFromCompanyReqBuilder
    }
    internal func builder() -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      return classBuilder() as! Comm.PkgUserDeleteFromCompanyReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserDeleteFromCompanyReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserDeleteFromCompanyReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      return Comm.PkgUserDeleteFromCompanyReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserDeleteFromCompanyReq) -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      return Comm.PkgUserDeleteFromCompanyReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var useridlistElementIndex:Int = 0
      for oneValueuseridlist in useridlist  {
          output += "\(indent) useridlist[\(useridlistElementIndex)]: \(oneValueuseridlist)\n"
          useridlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueuseridlist in useridlist {
                hashCode = (hashCode &* 31) &+ oneValueuseridlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserDeleteFromCompanyReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserDeleteFromCompanyReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserDeleteFromCompanyReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserDeleteFromCompanyReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserDeleteFromCompanyReq

    required override internal init () {
       builderResult = Comm.PkgUserDeleteFromCompanyReq()
       super.init()
    }
    var useridlist:Array<Int32> {
         get {
             return builderResult.useridlist
         }
         set (array) {
             builderResult.useridlist = array
         }
    }
    func setUseridlist(value:Array<Int32>)-> Comm.PkgUserDeleteFromCompanyReqBuilder {
      self.useridlist = value
      return self
    }
    internal func clearUseridlist() -> Comm.PkgUserDeleteFromCompanyReqBuilder {
       builderResult.useridlist.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      builderResult = Comm.PkgUserDeleteFromCompanyReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      return Comm.PkgUserDeleteFromCompanyReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserDeleteFromCompanyReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserDeleteFromCompanyReq {
      var returnMe:Comm.PkgUserDeleteFromCompanyReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserDeleteFromCompanyReq) -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      if (other == Comm.PkgUserDeleteFromCompanyReq()) {
       return self
      }
      if !other.useridlist.isEmpty {
          builderResult.useridlist += other.useridlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserDeleteFromCompanyReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserDeleteFromCompanyReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          useridlist += [input.readInt32()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserDeleteFromCompanyReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasCompanyusernumber:Bool = false
    private(set) var companyusernumber:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasCompanyusernumber {
        output.writeInt32(18, value:companyusernumber)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasCompanyusernumber {
        serialize_size += companyusernumber.computeInt32Size(18)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserDeleteFromCompanyReply {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserDeleteFromCompanyReply {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserDeleteFromCompanyReply {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserDeleteFromCompanyReply {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserDeleteFromCompanyReply {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserDeleteFromCompanyReply {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      return Comm.PkgUserDeleteFromCompanyReply.classBuilder() as! Comm.PkgUserDeleteFromCompanyReplyBuilder
    }
    internal func builder() -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      return classBuilder() as! Comm.PkgUserDeleteFromCompanyReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserDeleteFromCompanyReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserDeleteFromCompanyReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      return Comm.PkgUserDeleteFromCompanyReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserDeleteFromCompanyReply) -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      return Comm.PkgUserDeleteFromCompanyReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasCompanyusernumber {
        output += "\(indent) companyusernumber: \(companyusernumber) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasCompanyusernumber {
               hashCode = (hashCode &* 31) &+ companyusernumber.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserDeleteFromCompanyReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserDeleteFromCompanyReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserDeleteFromCompanyReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserDeleteFromCompanyReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserDeleteFromCompanyReply

    required override internal init () {
       builderResult = Comm.PkgUserDeleteFromCompanyReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserDeleteFromCompanyReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserDeleteFromCompanyReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasCompanyusernumber:Bool {
         get {
              return builderResult.hasCompanyusernumber
         }
    }
    var companyusernumber:Int32 {
         get {
              return builderResult.companyusernumber
         }
         set (value) {
             builderResult.hasCompanyusernumber = true
             builderResult.companyusernumber = value
         }
    }
    func setCompanyusernumber(value:Int32)-> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      self.companyusernumber = value
      return self
    }
    internal func clearCompanyusernumber() -> Comm.PkgUserDeleteFromCompanyReplyBuilder{
         builderResult.hasCompanyusernumber = false
         builderResult.companyusernumber = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      builderResult = Comm.PkgUserDeleteFromCompanyReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      return Comm.PkgUserDeleteFromCompanyReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserDeleteFromCompanyReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserDeleteFromCompanyReply {
      var returnMe:Comm.PkgUserDeleteFromCompanyReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserDeleteFromCompanyReply) -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      if (other == Comm.PkgUserDeleteFromCompanyReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasCompanyusernumber {
           companyusernumber = other.companyusernumber
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserDeleteFromCompanyReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserDeleteFromCompanyReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 144 :
          companyusernumber = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserExitCompanyReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnCmd:Int32 {
        case CmdExit = 1
        case CmdDismiss = 2

      }

      //Enum type declaration end 

    private(set) var encmd:Comm.PkgUserExitCompanyReq.EnCmd = Comm.PkgUserExitCompanyReq.EnCmd.CmdExit
    private(set) var hasEncmd:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasEncmd {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasEncmd {
        output.writeEnum(1, value:encmd.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasEncmd) {
        serialize_size += encmd.rawValue.computeEnumSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserExitCompanyReq {
      return Comm.PkgUserExitCompanyReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserExitCompanyReq {
      return Comm.PkgUserExitCompanyReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserExitCompanyReq {
      return Comm.PkgUserExitCompanyReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserExitCompanyReq {
      return Comm.PkgUserExitCompanyReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserExitCompanyReq {
      return Comm.PkgUserExitCompanyReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserExitCompanyReq {
      return Comm.PkgUserExitCompanyReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserExitCompanyReqBuilder {
      return Comm.PkgUserExitCompanyReq.classBuilder() as! Comm.PkgUserExitCompanyReqBuilder
    }
    internal func builder() -> Comm.PkgUserExitCompanyReqBuilder {
      return classBuilder() as! Comm.PkgUserExitCompanyReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserExitCompanyReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserExitCompanyReq.builder()
    }
    internal func toBuilder() -> Comm.PkgUserExitCompanyReqBuilder {
      return Comm.PkgUserExitCompanyReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserExitCompanyReq) -> Comm.PkgUserExitCompanyReqBuilder {
      return Comm.PkgUserExitCompanyReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasEncmd) {
        output += "\(indent) encmd: \(encmd.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEncmd {
               hashCode = (hashCode &* 31) &+ Int(encmd.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserExitCompanyReq"
    }
    override internal func className() -> String {
        return "Comm.PkgUserExitCompanyReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserExitCompanyReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserExitCompanyReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserExitCompanyReq

    required override internal init () {
       builderResult = Comm.PkgUserExitCompanyReq()
       super.init()
    }
      var hasEncmd:Bool{
          get {
              return builderResult.hasEncmd
          }
      }
      var encmd:Comm.PkgUserExitCompanyReq.EnCmd {
          get {
              return builderResult.encmd
          }
          set (value) {
              builderResult.hasEncmd = true
              builderResult.encmd = value
          }
      }
      internal func setEncmd(value:Comm.PkgUserExitCompanyReq.EnCmd)-> Comm.PkgUserExitCompanyReqBuilder {
        self.encmd = value
        return self
      }
      internal func clearEncmd() -> Comm.PkgUserExitCompanyReqBuilder {
         builderResult.hasEncmd = false
         builderResult.encmd = .CmdExit
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserExitCompanyReqBuilder {
      builderResult = Comm.PkgUserExitCompanyReq()
      return self
    }
    internal override func clone() -> Comm.PkgUserExitCompanyReqBuilder {
      return Comm.PkgUserExitCompanyReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserExitCompanyReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserExitCompanyReq {
      var returnMe:Comm.PkgUserExitCompanyReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserExitCompanyReq) -> Comm.PkgUserExitCompanyReqBuilder {
      if (other == Comm.PkgUserExitCompanyReq()) {
       return self
      }
      if other.hasEncmd {
           encmd = other.encmd
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserExitCompanyReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserExitCompanyReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntencmd = input.readEnum()
          if let enumsencmd = Comm.PkgUserExitCompanyReq.EnCmd(rawValue:valueIntencmd){
               encmd = enumsencmd
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntencmd))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserExitCompanyReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgUserExitCompanyReply {
      return Comm.PkgUserExitCompanyReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserExitCompanyReply {
      return Comm.PkgUserExitCompanyReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgUserExitCompanyReply {
      return Comm.PkgUserExitCompanyReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgUserExitCompanyReply {
      return Comm.PkgUserExitCompanyReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgUserExitCompanyReply {
      return Comm.PkgUserExitCompanyReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserExitCompanyReply {
      return Comm.PkgUserExitCompanyReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgUserExitCompanyReplyBuilder {
      return Comm.PkgUserExitCompanyReply.classBuilder() as! Comm.PkgUserExitCompanyReplyBuilder
    }
    internal func builder() -> Comm.PkgUserExitCompanyReplyBuilder {
      return classBuilder() as! Comm.PkgUserExitCompanyReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgUserExitCompanyReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgUserExitCompanyReply.builder()
    }
    internal func toBuilder() -> Comm.PkgUserExitCompanyReplyBuilder {
      return Comm.PkgUserExitCompanyReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgUserExitCompanyReply) -> Comm.PkgUserExitCompanyReplyBuilder {
      return Comm.PkgUserExitCompanyReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgUserExitCompanyReply"
    }
    override internal func className() -> String {
        return "Comm.PkgUserExitCompanyReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgUserExitCompanyReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserExitCompanyReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgUserExitCompanyReply

    required override internal init () {
       builderResult = Comm.PkgUserExitCompanyReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgUserExitCompanyReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgUserExitCompanyReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgUserExitCompanyReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgUserExitCompanyReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgUserExitCompanyReplyBuilder {
      builderResult = Comm.PkgUserExitCompanyReply()
      return self
    }
    internal override func clone() -> Comm.PkgUserExitCompanyReplyBuilder {
      return Comm.PkgUserExitCompanyReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgUserExitCompanyReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgUserExitCompanyReply {
      var returnMe:Comm.PkgUserExitCompanyReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgUserExitCompanyReply) -> Comm.PkgUserExitCompanyReplyBuilder {
      if (other == Comm.PkgUserExitCompanyReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgUserExitCompanyReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgUserExitCompanyReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskInfo : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnTaskLevel:Int32 {
        case TlImportanceArgency = 3
        case TlImportanceNotargency = 1
        case TlNotimportanceArgency = 2
        case TlNotimportanceNotargency = 0

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnTaskStatus:Int32 {
        case TsNew = 0
        case TsGoing = 1
        case TsFinished = 2
        case TsDeny = 3
        case TsDeleted = 4

      }

      //Enum type declaration end 

    private(set) var hasId:Bool = false
    private(set) var id:Int32 = Int32(0)

    private(set) var hasParentid:Bool = false
    private(set) var parentid:Int32 = Int32(0)

    private(set) var hasName:Bool = false
    private(set) var name:String = ""

    private(set) var hasTaskdate:Bool = false
    private(set) var taskdate:String = ""

    private(set) var hasContent:Bool = false
    private(set) var content:String = ""

    private(set) var hasRemark:Bool = false
    private(set) var remark:String = ""

    private(set) var tasklevel:Comm.PkgTaskInfo.EnTaskLevel = Comm.PkgTaskInfo.EnTaskLevel.TlImportanceNotargency
    private(set) var hasTasklevel:Bool = false
    private(set) var hasCreateuserid:Bool = false
    private(set) var createuserid:Int32 = Int32(0)

    private(set) var status:Comm.PkgTaskInfo.EnTaskStatus = Comm.PkgTaskInfo.EnTaskStatus.TsNew
    private(set) var hasStatus:Bool = false
    private(set) var hasCreatetime:Bool = false
    private(set) var createtime:String = ""

    private(set) var hasFinishtime:Bool = false
    private(set) var finishtime:String = ""

    private(set) var hasAccepteduserid:Bool = false
    private(set) var accepteduserid:Int32 = Int32(0)

    private(set) var hasCoworkid:Bool = false
    private(set) var coworkid:Int32 = Int32(0)

    private(set) var hasUpdatetime:Bool = false
    private(set) var updatetime:String = ""

    private(set) var hasIsreaded:Bool = false
    private(set) var isreaded:Int32 = Int32(0)

    private(set) var hasSortflag:Bool = false
    private(set) var sortflag:Int32 = Int32(0)

    private(set) var hasCreatedrealname:Bool = false
    private(set) var createdrealname:String = ""

    private(set) var hasAcceptedrealname:Bool = false
    private(set) var acceptedrealname:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasId {
        output.writeInt32(1, value:id)
      }
      if hasParentid {
        output.writeInt32(2, value:parentid)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasTaskdate {
        output.writeString(4, value:taskdate)
      }
      if hasContent {
        output.writeString(5, value:content)
      }
      if hasRemark {
        output.writeString(6, value:remark)
      }
      if hasTasklevel {
        output.writeEnum(7, value:tasklevel.rawValue)
      }
      if hasCreateuserid {
        output.writeInt32(8, value:createuserid)
      }
      if hasStatus {
        output.writeEnum(9, value:status.rawValue)
      }
      if hasCreatetime {
        output.writeString(10, value:createtime)
      }
      if hasFinishtime {
        output.writeString(11, value:finishtime)
      }
      if hasAccepteduserid {
        output.writeInt32(13, value:accepteduserid)
      }
      if hasCoworkid {
        output.writeInt32(14, value:coworkid)
      }
      if hasUpdatetime {
        output.writeString(15, value:updatetime)
      }
      if hasIsreaded {
        output.writeInt32(16, value:isreaded)
      }
      if hasSortflag {
        output.writeInt32(17, value:sortflag)
      }
      if hasCreatedrealname {
        output.writeString(30, value:createdrealname)
      }
      if hasAcceptedrealname {
        output.writeString(31, value:acceptedrealname)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt32Size(1)
      }
      if hasParentid {
        serialize_size += parentid.computeInt32Size(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasTaskdate {
        serialize_size += taskdate.computeStringSize(4)
      }
      if hasContent {
        serialize_size += content.computeStringSize(5)
      }
      if hasRemark {
        serialize_size += remark.computeStringSize(6)
      }
      if (hasTasklevel) {
        serialize_size += tasklevel.rawValue.computeEnumSize(7)
      }
      if hasCreateuserid {
        serialize_size += createuserid.computeInt32Size(8)
      }
      if (hasStatus) {
        serialize_size += status.rawValue.computeEnumSize(9)
      }
      if hasCreatetime {
        serialize_size += createtime.computeStringSize(10)
      }
      if hasFinishtime {
        serialize_size += finishtime.computeStringSize(11)
      }
      if hasAccepteduserid {
        serialize_size += accepteduserid.computeInt32Size(13)
      }
      if hasCoworkid {
        serialize_size += coworkid.computeInt32Size(14)
      }
      if hasUpdatetime {
        serialize_size += updatetime.computeStringSize(15)
      }
      if hasIsreaded {
        serialize_size += isreaded.computeInt32Size(16)
      }
      if hasSortflag {
        serialize_size += sortflag.computeInt32Size(17)
      }
      if hasCreatedrealname {
        serialize_size += createdrealname.computeStringSize(30)
      }
      if hasAcceptedrealname {
        serialize_size += acceptedrealname.computeStringSize(31)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskInfo {
      return Comm.PkgTaskInfo.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskInfo {
      return Comm.PkgTaskInfo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskInfo {
      return Comm.PkgTaskInfo.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskInfo {
      return Comm.PkgTaskInfo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskInfo {
      return Comm.PkgTaskInfo.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskInfo {
      return Comm.PkgTaskInfo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskInfoBuilder {
      return Comm.PkgTaskInfo.classBuilder() as! Comm.PkgTaskInfoBuilder
    }
    internal func builder() -> Comm.PkgTaskInfoBuilder {
      return classBuilder() as! Comm.PkgTaskInfoBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskInfoBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskInfo.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskInfoBuilder {
      return Comm.PkgTaskInfo.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskInfo) -> Comm.PkgTaskInfoBuilder {
      return Comm.PkgTaskInfo.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasParentid {
        output += "\(indent) parentid: \(parentid) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasTaskdate {
        output += "\(indent) taskdate: \(taskdate) \n"
      }
      if hasContent {
        output += "\(indent) content: \(content) \n"
      }
      if hasRemark {
        output += "\(indent) remark: \(remark) \n"
      }
      if (hasTasklevel) {
        output += "\(indent) tasklevel: \(tasklevel.rawValue)\n"
      }
      if hasCreateuserid {
        output += "\(indent) createuserid: \(createuserid) \n"
      }
      if (hasStatus) {
        output += "\(indent) status: \(status.rawValue)\n"
      }
      if hasCreatetime {
        output += "\(indent) createtime: \(createtime) \n"
      }
      if hasFinishtime {
        output += "\(indent) finishtime: \(finishtime) \n"
      }
      if hasAccepteduserid {
        output += "\(indent) accepteduserid: \(accepteduserid) \n"
      }
      if hasCoworkid {
        output += "\(indent) coworkid: \(coworkid) \n"
      }
      if hasUpdatetime {
        output += "\(indent) updatetime: \(updatetime) \n"
      }
      if hasIsreaded {
        output += "\(indent) isreaded: \(isreaded) \n"
      }
      if hasSortflag {
        output += "\(indent) sortflag: \(sortflag) \n"
      }
      if hasCreatedrealname {
        output += "\(indent) createdrealname: \(createdrealname) \n"
      }
      if hasAcceptedrealname {
        output += "\(indent) acceptedrealname: \(acceptedrealname) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasParentid {
               hashCode = (hashCode &* 31) &+ parentid.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasTaskdate {
               hashCode = (hashCode &* 31) &+ taskdate.hashValue
            }
            if hasContent {
               hashCode = (hashCode &* 31) &+ content.hashValue
            }
            if hasRemark {
               hashCode = (hashCode &* 31) &+ remark.hashValue
            }
            if hasTasklevel {
               hashCode = (hashCode &* 31) &+ Int(tasklevel.rawValue)
            }
            if hasCreateuserid {
               hashCode = (hashCode &* 31) &+ createuserid.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ Int(status.rawValue)
            }
            if hasCreatetime {
               hashCode = (hashCode &* 31) &+ createtime.hashValue
            }
            if hasFinishtime {
               hashCode = (hashCode &* 31) &+ finishtime.hashValue
            }
            if hasAccepteduserid {
               hashCode = (hashCode &* 31) &+ accepteduserid.hashValue
            }
            if hasCoworkid {
               hashCode = (hashCode &* 31) &+ coworkid.hashValue
            }
            if hasUpdatetime {
               hashCode = (hashCode &* 31) &+ updatetime.hashValue
            }
            if hasIsreaded {
               hashCode = (hashCode &* 31) &+ isreaded.hashValue
            }
            if hasSortflag {
               hashCode = (hashCode &* 31) &+ sortflag.hashValue
            }
            if hasCreatedrealname {
               hashCode = (hashCode &* 31) &+ createdrealname.hashValue
            }
            if hasAcceptedrealname {
               hashCode = (hashCode &* 31) &+ acceptedrealname.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskInfo"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskInfo"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskInfo.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskInfoBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskInfo

    required override internal init () {
       builderResult = Comm.PkgTaskInfo()
       super.init()
    }
    var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    var id:Int32 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    func setId(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.id = value
      return self
    }
    internal func clearId() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasId = false
         builderResult.id = Int32(0)
         return self
    }
    var hasParentid:Bool {
         get {
              return builderResult.hasParentid
         }
    }
    var parentid:Int32 {
         get {
              return builderResult.parentid
         }
         set (value) {
             builderResult.hasParentid = true
             builderResult.parentid = value
         }
    }
    func setParentid(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.parentid = value
      return self
    }
    internal func clearParentid() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasParentid = false
         builderResult.parentid = Int32(0)
         return self
    }
    var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    func setName(value:String)-> Comm.PkgTaskInfoBuilder {
      self.name = value
      return self
    }
    internal func clearName() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    var hasTaskdate:Bool {
         get {
              return builderResult.hasTaskdate
         }
    }
    var taskdate:String {
         get {
              return builderResult.taskdate
         }
         set (value) {
             builderResult.hasTaskdate = true
             builderResult.taskdate = value
         }
    }
    func setTaskdate(value:String)-> Comm.PkgTaskInfoBuilder {
      self.taskdate = value
      return self
    }
    internal func clearTaskdate() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasTaskdate = false
         builderResult.taskdate = ""
         return self
    }
    var hasContent:Bool {
         get {
              return builderResult.hasContent
         }
    }
    var content:String {
         get {
              return builderResult.content
         }
         set (value) {
             builderResult.hasContent = true
             builderResult.content = value
         }
    }
    func setContent(value:String)-> Comm.PkgTaskInfoBuilder {
      self.content = value
      return self
    }
    internal func clearContent() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasContent = false
         builderResult.content = ""
         return self
    }
    var hasRemark:Bool {
         get {
              return builderResult.hasRemark
         }
    }
    var remark:String {
         get {
              return builderResult.remark
         }
         set (value) {
             builderResult.hasRemark = true
             builderResult.remark = value
         }
    }
    func setRemark(value:String)-> Comm.PkgTaskInfoBuilder {
      self.remark = value
      return self
    }
    internal func clearRemark() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasRemark = false
         builderResult.remark = ""
         return self
    }
      var hasTasklevel:Bool{
          get {
              return builderResult.hasTasklevel
          }
      }
      var tasklevel:Comm.PkgTaskInfo.EnTaskLevel {
          get {
              return builderResult.tasklevel
          }
          set (value) {
              builderResult.hasTasklevel = true
              builderResult.tasklevel = value
          }
      }
      internal func setTasklevel(value:Comm.PkgTaskInfo.EnTaskLevel)-> Comm.PkgTaskInfoBuilder {
        self.tasklevel = value
        return self
      }
      internal func clearTasklevel() -> Comm.PkgTaskInfoBuilder {
         builderResult.hasTasklevel = false
         builderResult.tasklevel = .TlImportanceNotargency
         return self
      }
    var hasCreateuserid:Bool {
         get {
              return builderResult.hasCreateuserid
         }
    }
    var createuserid:Int32 {
         get {
              return builderResult.createuserid
         }
         set (value) {
             builderResult.hasCreateuserid = true
             builderResult.createuserid = value
         }
    }
    func setCreateuserid(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.createuserid = value
      return self
    }
    internal func clearCreateuserid() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasCreateuserid = false
         builderResult.createuserid = Int32(0)
         return self
    }
      var hasStatus:Bool{
          get {
              return builderResult.hasStatus
          }
      }
      var status:Comm.PkgTaskInfo.EnTaskStatus {
          get {
              return builderResult.status
          }
          set (value) {
              builderResult.hasStatus = true
              builderResult.status = value
          }
      }
      internal func setStatus(value:Comm.PkgTaskInfo.EnTaskStatus)-> Comm.PkgTaskInfoBuilder {
        self.status = value
        return self
      }
      internal func clearStatus() -> Comm.PkgTaskInfoBuilder {
         builderResult.hasStatus = false
         builderResult.status = .TsNew
         return self
      }
    var hasCreatetime:Bool {
         get {
              return builderResult.hasCreatetime
         }
    }
    var createtime:String {
         get {
              return builderResult.createtime
         }
         set (value) {
             builderResult.hasCreatetime = true
             builderResult.createtime = value
         }
    }
    func setCreatetime(value:String)-> Comm.PkgTaskInfoBuilder {
      self.createtime = value
      return self
    }
    internal func clearCreatetime() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasCreatetime = false
         builderResult.createtime = ""
         return self
    }
    var hasFinishtime:Bool {
         get {
              return builderResult.hasFinishtime
         }
    }
    var finishtime:String {
         get {
              return builderResult.finishtime
         }
         set (value) {
             builderResult.hasFinishtime = true
             builderResult.finishtime = value
         }
    }
    func setFinishtime(value:String)-> Comm.PkgTaskInfoBuilder {
      self.finishtime = value
      return self
    }
    internal func clearFinishtime() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasFinishtime = false
         builderResult.finishtime = ""
         return self
    }
    var hasAccepteduserid:Bool {
         get {
              return builderResult.hasAccepteduserid
         }
    }
    var accepteduserid:Int32 {
         get {
              return builderResult.accepteduserid
         }
         set (value) {
             builderResult.hasAccepteduserid = true
             builderResult.accepteduserid = value
         }
    }
    func setAccepteduserid(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.accepteduserid = value
      return self
    }
    internal func clearAccepteduserid() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasAccepteduserid = false
         builderResult.accepteduserid = Int32(0)
         return self
    }
    var hasCoworkid:Bool {
         get {
              return builderResult.hasCoworkid
         }
    }
    var coworkid:Int32 {
         get {
              return builderResult.coworkid
         }
         set (value) {
             builderResult.hasCoworkid = true
             builderResult.coworkid = value
         }
    }
    func setCoworkid(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.coworkid = value
      return self
    }
    internal func clearCoworkid() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasCoworkid = false
         builderResult.coworkid = Int32(0)
         return self
    }
    var hasUpdatetime:Bool {
         get {
              return builderResult.hasUpdatetime
         }
    }
    var updatetime:String {
         get {
              return builderResult.updatetime
         }
         set (value) {
             builderResult.hasUpdatetime = true
             builderResult.updatetime = value
         }
    }
    func setUpdatetime(value:String)-> Comm.PkgTaskInfoBuilder {
      self.updatetime = value
      return self
    }
    internal func clearUpdatetime() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasUpdatetime = false
         builderResult.updatetime = ""
         return self
    }
    var hasIsreaded:Bool {
         get {
              return builderResult.hasIsreaded
         }
    }
    var isreaded:Int32 {
         get {
              return builderResult.isreaded
         }
         set (value) {
             builderResult.hasIsreaded = true
             builderResult.isreaded = value
         }
    }
    func setIsreaded(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.isreaded = value
      return self
    }
    internal func clearIsreaded() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasIsreaded = false
         builderResult.isreaded = Int32(0)
         return self
    }
    var hasSortflag:Bool {
         get {
              return builderResult.hasSortflag
         }
    }
    var sortflag:Int32 {
         get {
              return builderResult.sortflag
         }
         set (value) {
             builderResult.hasSortflag = true
             builderResult.sortflag = value
         }
    }
    func setSortflag(value:Int32)-> Comm.PkgTaskInfoBuilder {
      self.sortflag = value
      return self
    }
    internal func clearSortflag() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasSortflag = false
         builderResult.sortflag = Int32(0)
         return self
    }
    var hasCreatedrealname:Bool {
         get {
              return builderResult.hasCreatedrealname
         }
    }
    var createdrealname:String {
         get {
              return builderResult.createdrealname
         }
         set (value) {
             builderResult.hasCreatedrealname = true
             builderResult.createdrealname = value
         }
    }
    func setCreatedrealname(value:String)-> Comm.PkgTaskInfoBuilder {
      self.createdrealname = value
      return self
    }
    internal func clearCreatedrealname() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasCreatedrealname = false
         builderResult.createdrealname = ""
         return self
    }
    var hasAcceptedrealname:Bool {
         get {
              return builderResult.hasAcceptedrealname
         }
    }
    var acceptedrealname:String {
         get {
              return builderResult.acceptedrealname
         }
         set (value) {
             builderResult.hasAcceptedrealname = true
             builderResult.acceptedrealname = value
         }
    }
    func setAcceptedrealname(value:String)-> Comm.PkgTaskInfoBuilder {
      self.acceptedrealname = value
      return self
    }
    internal func clearAcceptedrealname() -> Comm.PkgTaskInfoBuilder{
         builderResult.hasAcceptedrealname = false
         builderResult.acceptedrealname = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskInfoBuilder {
      builderResult = Comm.PkgTaskInfo()
      return self
    }
    internal override func clone() -> Comm.PkgTaskInfoBuilder {
      return Comm.PkgTaskInfo.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskInfo {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskInfo {
      var returnMe:Comm.PkgTaskInfo = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskInfo) -> Comm.PkgTaskInfoBuilder {
      if (other == Comm.PkgTaskInfo()) {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasParentid {
           parentid = other.parentid
      }
      if other.hasName {
           name = other.name
      }
      if other.hasTaskdate {
           taskdate = other.taskdate
      }
      if other.hasContent {
           content = other.content
      }
      if other.hasRemark {
           remark = other.remark
      }
      if other.hasTasklevel {
           tasklevel = other.tasklevel
      }
      if other.hasCreateuserid {
           createuserid = other.createuserid
      }
      if other.hasStatus {
           status = other.status
      }
      if other.hasCreatetime {
           createtime = other.createtime
      }
      if other.hasFinishtime {
           finishtime = other.finishtime
      }
      if other.hasAccepteduserid {
           accepteduserid = other.accepteduserid
      }
      if other.hasCoworkid {
           coworkid = other.coworkid
      }
      if other.hasUpdatetime {
           updatetime = other.updatetime
      }
      if other.hasIsreaded {
           isreaded = other.isreaded
      }
      if other.hasSortflag {
           sortflag = other.sortflag
      }
      if other.hasCreatedrealname {
           createdrealname = other.createdrealname
      }
      if other.hasAcceptedrealname {
           acceptedrealname = other.acceptedrealname
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskInfoBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskInfoBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          id = input.readInt32()

        case 16 :
          parentid = input.readInt32()

        case 26 :
          name = input.readString()

        case 34 :
          taskdate = input.readString()

        case 42 :
          content = input.readString()

        case 50 :
          remark = input.readString()

        case 56 :
          let valueInttasklevel = input.readEnum()
          if let enumstasklevel = Comm.PkgTaskInfo.EnTaskLevel(rawValue:valueInttasklevel){
               tasklevel = enumstasklevel
          } else {
               unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueInttasklevel))
          }

        case 64 :
          createuserid = input.readInt32()

        case 72 :
          let valueIntstatus = input.readEnum()
          if let enumsstatus = Comm.PkgTaskInfo.EnTaskStatus(rawValue:valueIntstatus){
               status = enumsstatus
          } else {
               unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntstatus))
          }

        case 82 :
          createtime = input.readString()

        case 90 :
          finishtime = input.readString()

        case 104 :
          accepteduserid = input.readInt32()

        case 112 :
          coworkid = input.readInt32()

        case 122 :
          updatetime = input.readString()

        case 128 :
          isreaded = input.readInt32()

        case 136 :
          sortflag = input.readInt32()

        case 242 :
          createdrealname = input.readString()

        case 250 :
          acceptedrealname = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskPageQueryReq : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class PkgTaskQueryCondition : GeneratedMessage, GeneratedMessageProtocol {


          //Enum type declaration start 

          internal enum EnReadedFlag:Int32 {
            case PrAll = 1
            case PrReaded = 2
            case PrNotreaded = 3

          }

          //Enum type declaration end 

        private(set) var hasTaskdatestart:Bool = false
        private(set) var taskdatestart:String = ""

        private(set) var hasTaskdateend:Bool = false
        private(set) var taskdateend:String = ""

        private(set) var hasKeyforname:Bool = false
        private(set) var keyforname:String = ""

        private(set) var hasKeyforcontent:Bool = false
        private(set) var keyforcontent:String = ""

        private(set) var enreadedflag:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.EnReadedFlag = Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.EnReadedFlag.PrAll
        private(set) var hasEnreadedflag:Bool = false
        private(set) var hasLastupdatetime:Bool = false
        private(set) var lastupdatetime:String = ""

        private(set) var taskstatuslist:Array<Int32> = Array<Int32>()
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasTaskdatestart {
            output.writeString(2, value:taskdatestart)
          }
          if hasTaskdateend {
            output.writeString(3, value:taskdateend)
          }
          if hasKeyforname {
            output.writeString(4, value:keyforname)
          }
          if hasKeyforcontent {
            output.writeString(5, value:keyforcontent)
          }
          if !taskstatuslist.isEmpty {
            for oneValuetaskstatuslist in taskstatuslist {
              output.writeInt32(6, value:oneValuetaskstatuslist)
            }
          }
          if hasEnreadedflag {
            output.writeEnum(7, value:enreadedflag.rawValue)
          }
          if hasLastupdatetime {
            output.writeString(100, value:lastupdatetime)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTaskdatestart {
            serialize_size += taskdatestart.computeStringSize(2)
          }
          if hasTaskdateend {
            serialize_size += taskdateend.computeStringSize(3)
          }
          if hasKeyforname {
            serialize_size += keyforname.computeStringSize(4)
          }
          if hasKeyforcontent {
            serialize_size += keyforcontent.computeStringSize(5)
          }
          var dataSizeTaskstatuslist:Int32 = 0
          for oneValuetaskstatuslist in taskstatuslist {
              dataSizeTaskstatuslist += oneValuetaskstatuslist.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeTaskstatuslist
          serialize_size += 1 * Int32(taskstatuslist.count)
          if (hasEnreadedflag) {
            serialize_size += enreadedflag.rawValue.computeEnumSize(7)
          }
          if hasLastupdatetime {
            serialize_size += lastupdatetime.computeStringSize(100)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.classBuilder() as! Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder
        }
        internal func builder() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          return classBuilder() as! Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder()
        }
        internal func toBuilder() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasTaskdatestart {
            output += "\(indent) taskdatestart: \(taskdatestart) \n"
          }
          if hasTaskdateend {
            output += "\(indent) taskdateend: \(taskdateend) \n"
          }
          if hasKeyforname {
            output += "\(indent) keyforname: \(keyforname) \n"
          }
          if hasKeyforcontent {
            output += "\(indent) keyforcontent: \(keyforcontent) \n"
          }
          var taskstatuslistElementIndex:Int = 0
          for oneValuetaskstatuslist in taskstatuslist  {
              output += "\(indent) taskstatuslist[\(taskstatuslistElementIndex)]: \(oneValuetaskstatuslist)\n"
              taskstatuslistElementIndex++
          }
          if (hasEnreadedflag) {
            output += "\(indent) enreadedflag: \(enreadedflag.rawValue)\n"
          }
          if hasLastupdatetime {
            output += "\(indent) lastupdatetime: \(lastupdatetime) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTaskdatestart {
                   hashCode = (hashCode &* 31) &+ taskdatestart.hashValue
                }
                if hasTaskdateend {
                   hashCode = (hashCode &* 31) &+ taskdateend.hashValue
                }
                if hasKeyforname {
                   hashCode = (hashCode &* 31) &+ keyforname.hashValue
                }
                if hasKeyforcontent {
                   hashCode = (hashCode &* 31) &+ keyforcontent.hashValue
                }
                for oneValuetaskstatuslist in taskstatuslist {
                    hashCode = (hashCode &* 31) &+ oneValuetaskstatuslist.hashValue
                }
                if hasEnreadedflag {
                   hashCode = (hashCode &* 31) &+ Int(enreadedflag.rawValue)
                }
                if hasLastupdatetime {
                   hashCode = (hashCode &* 31) &+ lastupdatetime.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition"
        }
        override internal func className() -> String {
            return "Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.self
        }
        //Meta information declaration end

      }

      final internal class PkgTaskQueryConditionBuilder : GeneratedMessageBuilder {
        private var builderResult:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition

        required override internal init () {
           builderResult = Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition()
           super.init()
        }
        var hasTaskdatestart:Bool {
             get {
                  return builderResult.hasTaskdatestart
             }
        }
        var taskdatestart:String {
             get {
                  return builderResult.taskdatestart
             }
             set (value) {
                 builderResult.hasTaskdatestart = true
                 builderResult.taskdatestart = value
             }
        }
        func setTaskdatestart(value:String)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          self.taskdatestart = value
          return self
        }
        internal func clearTaskdatestart() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder{
             builderResult.hasTaskdatestart = false
             builderResult.taskdatestart = ""
             return self
        }
        var hasTaskdateend:Bool {
             get {
                  return builderResult.hasTaskdateend
             }
        }
        var taskdateend:String {
             get {
                  return builderResult.taskdateend
             }
             set (value) {
                 builderResult.hasTaskdateend = true
                 builderResult.taskdateend = value
             }
        }
        func setTaskdateend(value:String)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          self.taskdateend = value
          return self
        }
        internal func clearTaskdateend() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder{
             builderResult.hasTaskdateend = false
             builderResult.taskdateend = ""
             return self
        }
        var hasKeyforname:Bool {
             get {
                  return builderResult.hasKeyforname
             }
        }
        var keyforname:String {
             get {
                  return builderResult.keyforname
             }
             set (value) {
                 builderResult.hasKeyforname = true
                 builderResult.keyforname = value
             }
        }
        func setKeyforname(value:String)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          self.keyforname = value
          return self
        }
        internal func clearKeyforname() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder{
             builderResult.hasKeyforname = false
             builderResult.keyforname = ""
             return self
        }
        var hasKeyforcontent:Bool {
             get {
                  return builderResult.hasKeyforcontent
             }
        }
        var keyforcontent:String {
             get {
                  return builderResult.keyforcontent
             }
             set (value) {
                 builderResult.hasKeyforcontent = true
                 builderResult.keyforcontent = value
             }
        }
        func setKeyforcontent(value:String)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          self.keyforcontent = value
          return self
        }
        internal func clearKeyforcontent() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder{
             builderResult.hasKeyforcontent = false
             builderResult.keyforcontent = ""
             return self
        }
        var taskstatuslist:Array<Int32> {
             get {
                 return builderResult.taskstatuslist
             }
             set (array) {
                 builderResult.taskstatuslist = array
             }
        }
        func setTaskstatuslist(value:Array<Int32>)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          self.taskstatuslist = value
          return self
        }
        internal func clearTaskstatuslist() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
           builderResult.taskstatuslist.removeAll(keepCapacity: false)
           return self
        }
          var hasEnreadedflag:Bool{
              get {
                  return builderResult.hasEnreadedflag
              }
          }
          var enreadedflag:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.EnReadedFlag {
              get {
                  return builderResult.enreadedflag
              }
              set (value) {
                  builderResult.hasEnreadedflag = true
                  builderResult.enreadedflag = value
              }
          }
          internal func setEnreadedflag(value:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.EnReadedFlag)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
            self.enreadedflag = value
            return self
          }
          internal func clearEnreadedflag() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
             builderResult.hasEnreadedflag = false
             builderResult.enreadedflag = .PrAll
             return self
          }
        var hasLastupdatetime:Bool {
             get {
                  return builderResult.hasLastupdatetime
             }
        }
        var lastupdatetime:String {
             get {
                  return builderResult.lastupdatetime
             }
             set (value) {
                 builderResult.hasLastupdatetime = true
                 builderResult.lastupdatetime = value
             }
        }
        func setLastupdatetime(value:String)-> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          self.lastupdatetime = value
          return self
        }
        internal func clearLastupdatetime() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder{
             builderResult.hasLastupdatetime = false
             builderResult.lastupdatetime = ""
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          builderResult = Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition()
          return self
        }
        internal override func clone() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          return Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builderWithPrototype(builderResult)
        }
        internal override func build() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition {
          var returnMe:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition = builderResult
          return returnMe
        }
        internal func mergeFrom(other:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          if (other == Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition()) {
           return self
          }
          if other.hasTaskdatestart {
               taskdatestart = other.taskdatestart
          }
          if other.hasTaskdateend {
               taskdateend = other.taskdateend
          }
          if other.hasKeyforname {
               keyforname = other.keyforname
          }
          if other.hasKeyforcontent {
               keyforcontent = other.keyforcontent
          }
          if !other.taskstatuslist.isEmpty {
              builderResult.taskstatuslist += other.taskstatuslist
          }
          if other.hasEnreadedflag {
               enreadedflag = other.enreadedflag
          }
          if other.hasLastupdatetime {
               lastupdatetime = other.lastupdatetime
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 18 :
              taskdatestart = input.readString()

            case 26 :
              taskdateend = input.readString()

            case 34 :
              keyforname = input.readString()

            case 42 :
              keyforcontent = input.readString()

            case 48 :
              taskstatuslist += [input.readInt32()]

            case 56 :
              let valueIntenreadedflag = input.readEnum()
              if let enumsenreadedflag = Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.EnReadedFlag(rawValue:valueIntenreadedflag){
                   enreadedflag = enumsenreadedflag
              } else {
                   unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntenreadedflag))
              }

            case 802 :
              lastupdatetime = input.readString()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



      //Enum type declaration start 

      internal enum EnTaskFlag:Int32 {
        case TfMytask = 0
        case TfCoworktask = 1
        case TfTasktable = 2
        case TfUserdefined = 10

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnTaskQueryCondition:Int32 {
        case TqcDatestart = 1
        case TqcDateend = 2
        case TqcKeyforname = 4
        case TqcKeyforcontent = 8
        case TqcTaskstatus = 16
        case TqcTasknotstatus = 32
        case TqcOnlysend = 64
        case TqcOnlyrecv = 128
        case TqcReadedflag = 256
        case TqcLastupdatetime = 1024

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnPageFlag:Int32 {
        case POnlynum = 1
        case PReturnall = 2
        case PReturnpage = 3

      }

      //Enum type declaration end 

    private(set) var taskflag:Comm.PkgTaskPageQueryReq.EnTaskFlag = Comm.PkgTaskPageQueryReq.EnTaskFlag.TfMytask
    private(set) var hasTaskflag:Bool = false
    private(set) var hasEnconditon:Bool = false
    private(set) var enconditon:Int32 = Int32(0)

    private(set) var hasPkgtaskquerycondition:Bool = false
    private(set) var pkgtaskquerycondition:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition!
    private(set) var pageflag:Comm.PkgTaskPageQueryReq.EnPageFlag = Comm.PkgTaskPageQueryReq.EnPageFlag.PReturnall
    private(set) var hasPageflag:Bool = false
    private(set) var hasIndexstart:Bool = false
    private(set) var indexstart:Int32 = Int32(0)

    private(set) var hasIndexend:Bool = false
    private(set) var indexend:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasTaskflag {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasTaskflag {
        output.writeEnum(1, value:taskflag.rawValue)
      }
      if hasEnconditon {
        output.writeInt32(2, value:enconditon)
      }
      if hasPkgtaskquerycondition {
        output.writeMessage(3, value:pkgtaskquerycondition)
      }
      if hasPageflag {
        output.writeEnum(4, value:pageflag.rawValue)
      }
      if hasIndexstart {
        output.writeInt32(5, value:indexstart)
      }
      if hasIndexend {
        output.writeInt32(6, value:indexend)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasTaskflag) {
        serialize_size += taskflag.rawValue.computeEnumSize(1)
      }
      if hasEnconditon {
        serialize_size += enconditon.computeInt32Size(2)
      }
      if hasPkgtaskquerycondition {
          if let varSizepkgtaskquerycondition = pkgtaskquerycondition?.computeMessageSize(3) {
              serialize_size += varSizepkgtaskquerycondition
          }
      }
      if (hasPageflag) {
        serialize_size += pageflag.rawValue.computeEnumSize(4)
      }
      if hasIndexstart {
        serialize_size += indexstart.computeInt32Size(5)
      }
      if hasIndexend {
        serialize_size += indexend.computeInt32Size(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskPageQueryReq {
      return Comm.PkgTaskPageQueryReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReq {
      return Comm.PkgTaskPageQueryReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskPageQueryReq {
      return Comm.PkgTaskPageQueryReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskPageQueryReq {
      return Comm.PkgTaskPageQueryReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskPageQueryReq {
      return Comm.PkgTaskPageQueryReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReq {
      return Comm.PkgTaskPageQueryReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskPageQueryReqBuilder {
      return Comm.PkgTaskPageQueryReq.classBuilder() as! Comm.PkgTaskPageQueryReqBuilder
    }
    internal func builder() -> Comm.PkgTaskPageQueryReqBuilder {
      return classBuilder() as! Comm.PkgTaskPageQueryReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskPageQueryReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskPageQueryReq.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskPageQueryReqBuilder {
      return Comm.PkgTaskPageQueryReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskPageQueryReq) -> Comm.PkgTaskPageQueryReqBuilder {
      return Comm.PkgTaskPageQueryReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasTaskflag) {
        output += "\(indent) taskflag: \(taskflag.rawValue)\n"
      }
      if hasEnconditon {
        output += "\(indent) enconditon: \(enconditon) \n"
      }
      if hasPkgtaskquerycondition {
        output += "\(indent) pkgtaskquerycondition {\n"
        pkgtaskquerycondition?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasPageflag) {
        output += "\(indent) pageflag: \(pageflag.rawValue)\n"
      }
      if hasIndexstart {
        output += "\(indent) indexstart: \(indexstart) \n"
      }
      if hasIndexend {
        output += "\(indent) indexend: \(indexend) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTaskflag {
               hashCode = (hashCode &* 31) &+ Int(taskflag.rawValue)
            }
            if hasEnconditon {
               hashCode = (hashCode &* 31) &+ enconditon.hashValue
            }
            if hasPkgtaskquerycondition {
                if let hashValuepkgtaskquerycondition = pkgtaskquerycondition?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepkgtaskquerycondition
                }
            }
            if hasPageflag {
               hashCode = (hashCode &* 31) &+ Int(pageflag.rawValue)
            }
            if hasIndexstart {
               hashCode = (hashCode &* 31) &+ indexstart.hashValue
            }
            if hasIndexend {
               hashCode = (hashCode &* 31) &+ indexend.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskPageQueryReq"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskPageQueryReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskPageQueryReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskPageQueryReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskPageQueryReq

    required override internal init () {
       builderResult = Comm.PkgTaskPageQueryReq()
       super.init()
    }
      var hasTaskflag:Bool{
          get {
              return builderResult.hasTaskflag
          }
      }
      var taskflag:Comm.PkgTaskPageQueryReq.EnTaskFlag {
          get {
              return builderResult.taskflag
          }
          set (value) {
              builderResult.hasTaskflag = true
              builderResult.taskflag = value
          }
      }
      internal func setTaskflag(value:Comm.PkgTaskPageQueryReq.EnTaskFlag)-> Comm.PkgTaskPageQueryReqBuilder {
        self.taskflag = value
        return self
      }
      internal func clearTaskflag() -> Comm.PkgTaskPageQueryReqBuilder {
         builderResult.hasTaskflag = false
         builderResult.taskflag = .TfMytask
         return self
      }
    var hasEnconditon:Bool {
         get {
              return builderResult.hasEnconditon
         }
    }
    var enconditon:Int32 {
         get {
              return builderResult.enconditon
         }
         set (value) {
             builderResult.hasEnconditon = true
             builderResult.enconditon = value
         }
    }
    func setEnconditon(value:Int32)-> Comm.PkgTaskPageQueryReqBuilder {
      self.enconditon = value
      return self
    }
    internal func clearEnconditon() -> Comm.PkgTaskPageQueryReqBuilder{
         builderResult.hasEnconditon = false
         builderResult.enconditon = Int32(0)
         return self
    }
    var hasPkgtaskquerycondition:Bool {
         get {
             return builderResult.hasPkgtaskquerycondition
         }
    }
    var pkgtaskquerycondition:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition! {
         get {
             return builderResult.pkgtaskquerycondition
         }
         set (value) {
             builderResult.hasPkgtaskquerycondition = true
             builderResult.pkgtaskquerycondition = value
         }
    }
    func setPkgtaskquerycondition(value:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition!)-> Comm.PkgTaskPageQueryReqBuilder {
      self.pkgtaskquerycondition = value
      return self
    }
    internal func mergePkgtaskquerycondition(value:Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition) -> Comm.PkgTaskPageQueryReqBuilder {
      if (builderResult.hasPkgtaskquerycondition) {
        builderResult.pkgtaskquerycondition = Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builderWithPrototype(builderResult.pkgtaskquerycondition).mergeFrom(value).buildPartial()
      } else {
        builderResult.pkgtaskquerycondition = value
      }
      builderResult.hasPkgtaskquerycondition = true
      return self
    }
    internal func clearPkgtaskquerycondition() -> Comm.PkgTaskPageQueryReqBuilder {
      builderResult.hasPkgtaskquerycondition = false
      builderResult.pkgtaskquerycondition = nil
      return self
    }
      var hasPageflag:Bool{
          get {
              return builderResult.hasPageflag
          }
      }
      var pageflag:Comm.PkgTaskPageQueryReq.EnPageFlag {
          get {
              return builderResult.pageflag
          }
          set (value) {
              builderResult.hasPageflag = true
              builderResult.pageflag = value
          }
      }
      internal func setPageflag(value:Comm.PkgTaskPageQueryReq.EnPageFlag)-> Comm.PkgTaskPageQueryReqBuilder {
        self.pageflag = value
        return self
      }
      internal func clearPageflag() -> Comm.PkgTaskPageQueryReqBuilder {
         builderResult.hasPageflag = false
         builderResult.pageflag = .PReturnall
         return self
      }
    var hasIndexstart:Bool {
         get {
              return builderResult.hasIndexstart
         }
    }
    var indexstart:Int32 {
         get {
              return builderResult.indexstart
         }
         set (value) {
             builderResult.hasIndexstart = true
             builderResult.indexstart = value
         }
    }
    func setIndexstart(value:Int32)-> Comm.PkgTaskPageQueryReqBuilder {
      self.indexstart = value
      return self
    }
    internal func clearIndexstart() -> Comm.PkgTaskPageQueryReqBuilder{
         builderResult.hasIndexstart = false
         builderResult.indexstart = Int32(0)
         return self
    }
    var hasIndexend:Bool {
         get {
              return builderResult.hasIndexend
         }
    }
    var indexend:Int32 {
         get {
              return builderResult.indexend
         }
         set (value) {
             builderResult.hasIndexend = true
             builderResult.indexend = value
         }
    }
    func setIndexend(value:Int32)-> Comm.PkgTaskPageQueryReqBuilder {
      self.indexend = value
      return self
    }
    internal func clearIndexend() -> Comm.PkgTaskPageQueryReqBuilder{
         builderResult.hasIndexend = false
         builderResult.indexend = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskPageQueryReqBuilder {
      builderResult = Comm.PkgTaskPageQueryReq()
      return self
    }
    internal override func clone() -> Comm.PkgTaskPageQueryReqBuilder {
      return Comm.PkgTaskPageQueryReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskPageQueryReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskPageQueryReq {
      var returnMe:Comm.PkgTaskPageQueryReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskPageQueryReq) -> Comm.PkgTaskPageQueryReqBuilder {
      if (other == Comm.PkgTaskPageQueryReq()) {
       return self
      }
      if other.hasTaskflag {
           taskflag = other.taskflag
      }
      if other.hasEnconditon {
           enconditon = other.enconditon
      }
      if (other.hasPkgtaskquerycondition) {
          mergePkgtaskquerycondition(other.pkgtaskquerycondition)
      }
      if other.hasPageflag {
           pageflag = other.pageflag
      }
      if other.hasIndexstart {
           indexstart = other.indexstart
      }
      if other.hasIndexend {
           indexend = other.indexend
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskPageQueryReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueInttaskflag = input.readEnum()
          if let enumstaskflag = Comm.PkgTaskPageQueryReq.EnTaskFlag(rawValue:valueInttaskflag){
               taskflag = enumstaskflag
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInttaskflag))
          }

        case 16 :
          enconditon = input.readInt32()

        case 26 :
          var subBuilder:Comm.PkgTaskPageQueryReq.PkgTaskQueryConditionBuilder = Comm.PkgTaskPageQueryReq.PkgTaskQueryCondition.builder()
          if hasPkgtaskquerycondition {
            subBuilder.mergeFrom(pkgtaskquerycondition)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          pkgtaskquerycondition = subBuilder.buildPartial()

        case 32 :
          let valueIntpageflag = input.readEnum()
          if let enumspageflag = Comm.PkgTaskPageQueryReq.EnPageFlag(rawValue:valueIntpageflag){
               pageflag = enumspageflag
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntpageflag))
          }

        case 40 :
          indexstart = input.readInt32()

        case 48 :
          indexend = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskPageQueryReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasReturnnum:Bool = false
    private(set) var returnnum:Int32 = Int32(0)

    private(set) var taskinfolist:Array<Comm.PkgTaskInfo>  = Array<Comm.PkgTaskInfo>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      for oneElementtaskinfolist in taskinfolist {
          output.writeMessage(3, value:oneElementtaskinfolist)
      }
      if hasReturnnum {
        output.writeInt32(5, value:returnnum)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      for oneElementtaskinfolist in taskinfolist {
          serialize_size += oneElementtaskinfolist.computeMessageSize(3)
      }
      if hasReturnnum {
        serialize_size += returnnum.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskPageQueryReply {
      return Comm.PkgTaskPageQueryReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReply {
      return Comm.PkgTaskPageQueryReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskPageQueryReply {
      return Comm.PkgTaskPageQueryReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskPageQueryReply {
      return Comm.PkgTaskPageQueryReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskPageQueryReply {
      return Comm.PkgTaskPageQueryReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReply {
      return Comm.PkgTaskPageQueryReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskPageQueryReplyBuilder {
      return Comm.PkgTaskPageQueryReply.classBuilder() as! Comm.PkgTaskPageQueryReplyBuilder
    }
    internal func builder() -> Comm.PkgTaskPageQueryReplyBuilder {
      return classBuilder() as! Comm.PkgTaskPageQueryReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskPageQueryReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskPageQueryReply.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskPageQueryReplyBuilder {
      return Comm.PkgTaskPageQueryReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskPageQueryReply) -> Comm.PkgTaskPageQueryReplyBuilder {
      return Comm.PkgTaskPageQueryReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      var taskinfolistElementIndex:Int = 0
      for oneElementtaskinfolist in taskinfolist {
          output += "\(indent) taskinfolist[\(taskinfolistElementIndex)] {\n"
          oneElementtaskinfolist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          taskinfolistElementIndex++
      }
      if hasReturnnum {
        output += "\(indent) returnnum: \(returnnum) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            for oneElementtaskinfolist in taskinfolist {
                hashCode = (hashCode &* 31) &+ oneElementtaskinfolist.hashValue
            }
            if hasReturnnum {
               hashCode = (hashCode &* 31) &+ returnnum.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskPageQueryReply"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskPageQueryReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskPageQueryReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskPageQueryReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskPageQueryReply

    required override internal init () {
       builderResult = Comm.PkgTaskPageQueryReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgTaskPageQueryReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgTaskPageQueryReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgTaskPageQueryReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgTaskPageQueryReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var taskinfolist:Array<Comm.PkgTaskInfo> {
         get {
             return builderResult.taskinfolist
         }
         set (value) {
             builderResult.taskinfolist = value
         }
    }
    func setTaskinfolist(value:Array<Comm.PkgTaskInfo>)-> Comm.PkgTaskPageQueryReplyBuilder {
      self.taskinfolist = value
      return self
    }
    internal func clearTaskinfolist() -> Comm.PkgTaskPageQueryReplyBuilder {
      builderResult.taskinfolist.removeAll(keepCapacity: false)
      return self
    }
    var hasReturnnum:Bool {
         get {
              return builderResult.hasReturnnum
         }
    }
    var returnnum:Int32 {
         get {
              return builderResult.returnnum
         }
         set (value) {
             builderResult.hasReturnnum = true
             builderResult.returnnum = value
         }
    }
    func setReturnnum(value:Int32)-> Comm.PkgTaskPageQueryReplyBuilder {
      self.returnnum = value
      return self
    }
    internal func clearReturnnum() -> Comm.PkgTaskPageQueryReplyBuilder{
         builderResult.hasReturnnum = false
         builderResult.returnnum = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskPageQueryReplyBuilder {
      builderResult = Comm.PkgTaskPageQueryReply()
      return self
    }
    internal override func clone() -> Comm.PkgTaskPageQueryReplyBuilder {
      return Comm.PkgTaskPageQueryReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskPageQueryReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskPageQueryReply {
      var returnMe:Comm.PkgTaskPageQueryReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskPageQueryReply) -> Comm.PkgTaskPageQueryReplyBuilder {
      if (other == Comm.PkgTaskPageQueryReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if !other.taskinfolist.isEmpty  {
         builderResult.taskinfolist += other.taskinfolist
      }
      if other.hasReturnnum {
           returnnum = other.returnnum
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskPageQueryReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskPageQueryReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          var subBuilder = Comm.PkgTaskInfo.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          taskinfolist += [subBuilder.buildPartial()]

        case 40 :
          returnnum = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskQueryReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnQueryFlag:Int32 {
        case QfTaskinfo = 1
        case QfTaskwithsubtask = 2
        case QfTaskwithassgin = 4

      }

      //Enum type declaration end 

    private(set) var queryflag:Comm.PkgTaskQueryReq.EnQueryFlag = Comm.PkgTaskQueryReq.EnQueryFlag.QfTaskinfo
    private(set) var hasQueryflag:Bool = false
    private(set) var hasTaskid:Bool = false
    private(set) var taskid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasQueryflag {
        return false
      }
      if !hasTaskid {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasQueryflag {
        output.writeEnum(1, value:queryflag.rawValue)
      }
      if hasTaskid {
        output.writeInt32(2, value:taskid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasQueryflag) {
        serialize_size += queryflag.rawValue.computeEnumSize(1)
      }
      if hasTaskid {
        serialize_size += taskid.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskQueryReq {
      return Comm.PkgTaskQueryReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskQueryReq {
      return Comm.PkgTaskQueryReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskQueryReq {
      return Comm.PkgTaskQueryReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskQueryReq {
      return Comm.PkgTaskQueryReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskQueryReq {
      return Comm.PkgTaskQueryReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskQueryReq {
      return Comm.PkgTaskQueryReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskQueryReqBuilder {
      return Comm.PkgTaskQueryReq.classBuilder() as! Comm.PkgTaskQueryReqBuilder
    }
    internal func builder() -> Comm.PkgTaskQueryReqBuilder {
      return classBuilder() as! Comm.PkgTaskQueryReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskQueryReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskQueryReq.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskQueryReqBuilder {
      return Comm.PkgTaskQueryReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskQueryReq) -> Comm.PkgTaskQueryReqBuilder {
      return Comm.PkgTaskQueryReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasQueryflag) {
        output += "\(indent) queryflag: \(queryflag.rawValue)\n"
      }
      if hasTaskid {
        output += "\(indent) taskid: \(taskid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasQueryflag {
               hashCode = (hashCode &* 31) &+ Int(queryflag.rawValue)
            }
            if hasTaskid {
               hashCode = (hashCode &* 31) &+ taskid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskQueryReq"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskQueryReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskQueryReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskQueryReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskQueryReq

    required override internal init () {
       builderResult = Comm.PkgTaskQueryReq()
       super.init()
    }
      var hasQueryflag:Bool{
          get {
              return builderResult.hasQueryflag
          }
      }
      var queryflag:Comm.PkgTaskQueryReq.EnQueryFlag {
          get {
              return builderResult.queryflag
          }
          set (value) {
              builderResult.hasQueryflag = true
              builderResult.queryflag = value
          }
      }
      internal func setQueryflag(value:Comm.PkgTaskQueryReq.EnQueryFlag)-> Comm.PkgTaskQueryReqBuilder {
        self.queryflag = value
        return self
      }
      internal func clearQueryflag() -> Comm.PkgTaskQueryReqBuilder {
         builderResult.hasQueryflag = false
         builderResult.queryflag = .QfTaskinfo
         return self
      }
    var hasTaskid:Bool {
         get {
              return builderResult.hasTaskid
         }
    }
    var taskid:Int32 {
         get {
              return builderResult.taskid
         }
         set (value) {
             builderResult.hasTaskid = true
             builderResult.taskid = value
         }
    }
    func setTaskid(value:Int32)-> Comm.PkgTaskQueryReqBuilder {
      self.taskid = value
      return self
    }
    internal func clearTaskid() -> Comm.PkgTaskQueryReqBuilder{
         builderResult.hasTaskid = false
         builderResult.taskid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskQueryReqBuilder {
      builderResult = Comm.PkgTaskQueryReq()
      return self
    }
    internal override func clone() -> Comm.PkgTaskQueryReqBuilder {
      return Comm.PkgTaskQueryReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskQueryReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskQueryReq {
      var returnMe:Comm.PkgTaskQueryReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskQueryReq) -> Comm.PkgTaskQueryReqBuilder {
      if (other == Comm.PkgTaskQueryReq()) {
       return self
      }
      if other.hasQueryflag {
           queryflag = other.queryflag
      }
      if other.hasTaskid {
           taskid = other.taskid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskQueryReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskQueryReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntqueryflag = input.readEnum()
          if let enumsqueryflag = Comm.PkgTaskQueryReq.EnQueryFlag(rawValue:valueIntqueryflag){
               queryflag = enumsqueryflag
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntqueryflag))
          }

        case 16 :
          taskid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskQueryReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasTaskinfo:Bool = false
    private(set) var taskinfo:Comm.PkgTaskInfo!
    private(set) var taskinfolist:Array<Comm.PkgTaskInfo>  = Array<Comm.PkgTaskInfo>()
    private(set) var accepteduseridlist:Array<Int32> = Array<Int32>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasTaskinfo {
        output.writeMessage(3, value:taskinfo)
      }
      for oneElementtaskinfolist in taskinfolist {
          output.writeMessage(4, value:oneElementtaskinfolist)
      }
      if !accepteduseridlist.isEmpty {
        for oneValueaccepteduseridlist in accepteduseridlist {
          output.writeInt32(5, value:oneValueaccepteduseridlist)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasTaskinfo {
          if let varSizetaskinfo = taskinfo?.computeMessageSize(3) {
              serialize_size += varSizetaskinfo
          }
      }
      for oneElementtaskinfolist in taskinfolist {
          serialize_size += oneElementtaskinfolist.computeMessageSize(4)
      }
      var dataSizeAccepteduseridlist:Int32 = 0
      for oneValueaccepteduseridlist in accepteduseridlist {
          dataSizeAccepteduseridlist += oneValueaccepteduseridlist.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeAccepteduseridlist
      serialize_size += 1 * Int32(accepteduseridlist.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskQueryReply {
      return Comm.PkgTaskQueryReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskQueryReply {
      return Comm.PkgTaskQueryReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskQueryReply {
      return Comm.PkgTaskQueryReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskQueryReply {
      return Comm.PkgTaskQueryReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskQueryReply {
      return Comm.PkgTaskQueryReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskQueryReply {
      return Comm.PkgTaskQueryReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskQueryReplyBuilder {
      return Comm.PkgTaskQueryReply.classBuilder() as! Comm.PkgTaskQueryReplyBuilder
    }
    internal func builder() -> Comm.PkgTaskQueryReplyBuilder {
      return classBuilder() as! Comm.PkgTaskQueryReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskQueryReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskQueryReply.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskQueryReplyBuilder {
      return Comm.PkgTaskQueryReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskQueryReply) -> Comm.PkgTaskQueryReplyBuilder {
      return Comm.PkgTaskQueryReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasTaskinfo {
        output += "\(indent) taskinfo {\n"
        taskinfo?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var taskinfolistElementIndex:Int = 0
      for oneElementtaskinfolist in taskinfolist {
          output += "\(indent) taskinfolist[\(taskinfolistElementIndex)] {\n"
          oneElementtaskinfolist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          taskinfolistElementIndex++
      }
      var accepteduseridlistElementIndex:Int = 0
      for oneValueaccepteduseridlist in accepteduseridlist  {
          output += "\(indent) accepteduseridlist[\(accepteduseridlistElementIndex)]: \(oneValueaccepteduseridlist)\n"
          accepteduseridlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasTaskinfo {
                if let hashValuetaskinfo = taskinfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetaskinfo
                }
            }
            for oneElementtaskinfolist in taskinfolist {
                hashCode = (hashCode &* 31) &+ oneElementtaskinfolist.hashValue
            }
            for oneValueaccepteduseridlist in accepteduseridlist {
                hashCode = (hashCode &* 31) &+ oneValueaccepteduseridlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskQueryReply"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskQueryReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskQueryReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskQueryReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskQueryReply

    required override internal init () {
       builderResult = Comm.PkgTaskQueryReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgTaskQueryReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgTaskQueryReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgTaskQueryReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgTaskQueryReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasTaskinfo:Bool {
         get {
             return builderResult.hasTaskinfo
         }
    }
    var taskinfo:Comm.PkgTaskInfo! {
         get {
             return builderResult.taskinfo
         }
         set (value) {
             builderResult.hasTaskinfo = true
             builderResult.taskinfo = value
         }
    }
    func setTaskinfo(value:Comm.PkgTaskInfo!)-> Comm.PkgTaskQueryReplyBuilder {
      self.taskinfo = value
      return self
    }
    internal func mergeTaskinfo(value:Comm.PkgTaskInfo) -> Comm.PkgTaskQueryReplyBuilder {
      if (builderResult.hasTaskinfo) {
        builderResult.taskinfo = Comm.PkgTaskInfo.builderWithPrototype(builderResult.taskinfo).mergeFrom(value).buildPartial()
      } else {
        builderResult.taskinfo = value
      }
      builderResult.hasTaskinfo = true
      return self
    }
    internal func clearTaskinfo() -> Comm.PkgTaskQueryReplyBuilder {
      builderResult.hasTaskinfo = false
      builderResult.taskinfo = nil
      return self
    }
    var taskinfolist:Array<Comm.PkgTaskInfo> {
         get {
             return builderResult.taskinfolist
         }
         set (value) {
             builderResult.taskinfolist = value
         }
    }
    func setTaskinfolist(value:Array<Comm.PkgTaskInfo>)-> Comm.PkgTaskQueryReplyBuilder {
      self.taskinfolist = value
      return self
    }
    internal func clearTaskinfolist() -> Comm.PkgTaskQueryReplyBuilder {
      builderResult.taskinfolist.removeAll(keepCapacity: false)
      return self
    }
    var accepteduseridlist:Array<Int32> {
         get {
             return builderResult.accepteduseridlist
         }
         set (array) {
             builderResult.accepteduseridlist = array
         }
    }
    func setAccepteduseridlist(value:Array<Int32>)-> Comm.PkgTaskQueryReplyBuilder {
      self.accepteduseridlist = value
      return self
    }
    internal func clearAccepteduseridlist() -> Comm.PkgTaskQueryReplyBuilder {
       builderResult.accepteduseridlist.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskQueryReplyBuilder {
      builderResult = Comm.PkgTaskQueryReply()
      return self
    }
    internal override func clone() -> Comm.PkgTaskQueryReplyBuilder {
      return Comm.PkgTaskQueryReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskQueryReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskQueryReply {
      var returnMe:Comm.PkgTaskQueryReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskQueryReply) -> Comm.PkgTaskQueryReplyBuilder {
      if (other == Comm.PkgTaskQueryReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if (other.hasTaskinfo) {
          mergeTaskinfo(other.taskinfo)
      }
      if !other.taskinfolist.isEmpty  {
         builderResult.taskinfolist += other.taskinfolist
      }
      if !other.accepteduseridlist.isEmpty {
          builderResult.accepteduseridlist += other.accepteduseridlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskQueryReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskQueryReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          var subBuilder:Comm.PkgTaskInfoBuilder = Comm.PkgTaskInfo.builder()
          if hasTaskinfo {
            subBuilder.mergeFrom(taskinfo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          taskinfo = subBuilder.buildPartial()

        case 34 :
          var subBuilder = Comm.PkgTaskInfo.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          taskinfolist += [subBuilder.buildPartial()]

        case 40 :
          accepteduseridlist += [input.readInt32()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskSortFlag : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasTaskid:Bool = false
    private(set) var taskid:Int32 = Int32(0)

    private(set) var hasSortflag:Bool = false
    private(set) var sortflag:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasTaskid {
        return false
      }
      if !hasSortflag {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasTaskid {
        output.writeInt32(1, value:taskid)
      }
      if hasSortflag {
        output.writeInt32(2, value:sortflag)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTaskid {
        serialize_size += taskid.computeInt32Size(1)
      }
      if hasSortflag {
        serialize_size += sortflag.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskSortFlag {
      return Comm.PkgTaskSortFlag.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSortFlag {
      return Comm.PkgTaskSortFlag.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskSortFlag {
      return Comm.PkgTaskSortFlag.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskSortFlag {
      return Comm.PkgTaskSortFlag.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskSortFlag {
      return Comm.PkgTaskSortFlag.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSortFlag {
      return Comm.PkgTaskSortFlag.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskSortFlagBuilder {
      return Comm.PkgTaskSortFlag.classBuilder() as! Comm.PkgTaskSortFlagBuilder
    }
    internal func builder() -> Comm.PkgTaskSortFlagBuilder {
      return classBuilder() as! Comm.PkgTaskSortFlagBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskSortFlagBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskSortFlag.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskSortFlagBuilder {
      return Comm.PkgTaskSortFlag.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskSortFlag) -> Comm.PkgTaskSortFlagBuilder {
      return Comm.PkgTaskSortFlag.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasTaskid {
        output += "\(indent) taskid: \(taskid) \n"
      }
      if hasSortflag {
        output += "\(indent) sortflag: \(sortflag) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTaskid {
               hashCode = (hashCode &* 31) &+ taskid.hashValue
            }
            if hasSortflag {
               hashCode = (hashCode &* 31) &+ sortflag.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskSortFlag"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskSortFlag"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskSortFlag.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskSortFlagBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskSortFlag

    required override internal init () {
       builderResult = Comm.PkgTaskSortFlag()
       super.init()
    }
    var hasTaskid:Bool {
         get {
              return builderResult.hasTaskid
         }
    }
    var taskid:Int32 {
         get {
              return builderResult.taskid
         }
         set (value) {
             builderResult.hasTaskid = true
             builderResult.taskid = value
         }
    }
    func setTaskid(value:Int32)-> Comm.PkgTaskSortFlagBuilder {
      self.taskid = value
      return self
    }
    internal func clearTaskid() -> Comm.PkgTaskSortFlagBuilder{
         builderResult.hasTaskid = false
         builderResult.taskid = Int32(0)
         return self
    }
    var hasSortflag:Bool {
         get {
              return builderResult.hasSortflag
         }
    }
    var sortflag:Int32 {
         get {
              return builderResult.sortflag
         }
         set (value) {
             builderResult.hasSortflag = true
             builderResult.sortflag = value
         }
    }
    func setSortflag(value:Int32)-> Comm.PkgTaskSortFlagBuilder {
      self.sortflag = value
      return self
    }
    internal func clearSortflag() -> Comm.PkgTaskSortFlagBuilder{
         builderResult.hasSortflag = false
         builderResult.sortflag = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskSortFlagBuilder {
      builderResult = Comm.PkgTaskSortFlag()
      return self
    }
    internal override func clone() -> Comm.PkgTaskSortFlagBuilder {
      return Comm.PkgTaskSortFlag.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskSortFlag {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskSortFlag {
      var returnMe:Comm.PkgTaskSortFlag = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskSortFlag) -> Comm.PkgTaskSortFlagBuilder {
      if (other == Comm.PkgTaskSortFlag()) {
       return self
      }
      if other.hasTaskid {
           taskid = other.taskid
      }
      if other.hasSortflag {
           sortflag = other.sortflag
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskSortFlagBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSortFlagBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          taskid = input.readInt32()

        case 16 :
          sortflag = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskSetSortFlagReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var tasksortflaglist:Array<Comm.PkgTaskSortFlag>  = Array<Comm.PkgTaskSortFlag>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      var isInittasksortflaglist:Bool = true
      for oneElementtasksortflaglist in tasksortflaglist {
          if (!oneElementtasksortflaglist.isInitialized()) {
              isInittasksortflaglist = false
              break 
          }
      }
      if !isInittasksortflaglist {
       return isInittasksortflaglist
       }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      for oneElementtasksortflaglist in tasksortflaglist {
          output.writeMessage(1, value:oneElementtasksortflaglist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementtasksortflaglist in tasksortflaglist {
          serialize_size += oneElementtasksortflaglist.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskSetSortFlagReq {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSetSortFlagReq {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskSetSortFlagReq {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskSetSortFlagReq {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskSetSortFlagReq {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSetSortFlagReq {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskSetSortFlagReqBuilder {
      return Comm.PkgTaskSetSortFlagReq.classBuilder() as! Comm.PkgTaskSetSortFlagReqBuilder
    }
    internal func builder() -> Comm.PkgTaskSetSortFlagReqBuilder {
      return classBuilder() as! Comm.PkgTaskSetSortFlagReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskSetSortFlagReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskSetSortFlagReq.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskSetSortFlagReqBuilder {
      return Comm.PkgTaskSetSortFlagReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskSetSortFlagReq) -> Comm.PkgTaskSetSortFlagReqBuilder {
      return Comm.PkgTaskSetSortFlagReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var tasksortflaglistElementIndex:Int = 0
      for oneElementtasksortflaglist in tasksortflaglist {
          output += "\(indent) tasksortflaglist[\(tasksortflaglistElementIndex)] {\n"
          oneElementtasksortflaglist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          tasksortflaglistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementtasksortflaglist in tasksortflaglist {
                hashCode = (hashCode &* 31) &+ oneElementtasksortflaglist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskSetSortFlagReq"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskSetSortFlagReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskSetSortFlagReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskSetSortFlagReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskSetSortFlagReq

    required override internal init () {
       builderResult = Comm.PkgTaskSetSortFlagReq()
       super.init()
    }
    var tasksortflaglist:Array<Comm.PkgTaskSortFlag> {
         get {
             return builderResult.tasksortflaglist
         }
         set (value) {
             builderResult.tasksortflaglist = value
         }
    }
    func setTasksortflaglist(value:Array<Comm.PkgTaskSortFlag>)-> Comm.PkgTaskSetSortFlagReqBuilder {
      self.tasksortflaglist = value
      return self
    }
    internal func clearTasksortflaglist() -> Comm.PkgTaskSetSortFlagReqBuilder {
      builderResult.tasksortflaglist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskSetSortFlagReqBuilder {
      builderResult = Comm.PkgTaskSetSortFlagReq()
      return self
    }
    internal override func clone() -> Comm.PkgTaskSetSortFlagReqBuilder {
      return Comm.PkgTaskSetSortFlagReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskSetSortFlagReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskSetSortFlagReq {
      var returnMe:Comm.PkgTaskSetSortFlagReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskSetSortFlagReq) -> Comm.PkgTaskSetSortFlagReqBuilder {
      if (other == Comm.PkgTaskSetSortFlagReq()) {
       return self
      }
      if !other.tasksortflaglist.isEmpty  {
         builderResult.tasksortflaglist += other.tasksortflaglist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskSetSortFlagReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSetSortFlagReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder = Comm.PkgTaskSortFlag.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          tasksortflaglist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskSetSortFlagReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskSetSortFlagReply {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSetSortFlagReply {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskSetSortFlagReply {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskSetSortFlagReply {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskSetSortFlagReply {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSetSortFlagReply {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskSetSortFlagReplyBuilder {
      return Comm.PkgTaskSetSortFlagReply.classBuilder() as! Comm.PkgTaskSetSortFlagReplyBuilder
    }
    internal func builder() -> Comm.PkgTaskSetSortFlagReplyBuilder {
      return classBuilder() as! Comm.PkgTaskSetSortFlagReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskSetSortFlagReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskSetSortFlagReply.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskSetSortFlagReplyBuilder {
      return Comm.PkgTaskSetSortFlagReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskSetSortFlagReply) -> Comm.PkgTaskSetSortFlagReplyBuilder {
      return Comm.PkgTaskSetSortFlagReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskSetSortFlagReply"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskSetSortFlagReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskSetSortFlagReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskSetSortFlagReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskSetSortFlagReply

    required override internal init () {
       builderResult = Comm.PkgTaskSetSortFlagReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgTaskSetSortFlagReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgTaskSetSortFlagReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgTaskSetSortFlagReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgTaskSetSortFlagReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskSetSortFlagReplyBuilder {
      builderResult = Comm.PkgTaskSetSortFlagReply()
      return self
    }
    internal override func clone() -> Comm.PkgTaskSetSortFlagReplyBuilder {
      return Comm.PkgTaskSetSortFlagReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskSetSortFlagReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskSetSortFlagReply {
      var returnMe:Comm.PkgTaskSetSortFlagReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskSetSortFlagReply) -> Comm.PkgTaskSetSortFlagReplyBuilder {
      if (other == Comm.PkgTaskSetSortFlagReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskSetSortFlagReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskSetSortFlagReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskOperationReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnTaskOperation:Int32 {
        case ToInsertInfo = 1
        case ToInsertInfoSubtaskinfo = 2
        case ToInsertInfoCowork = 4
        case ToUpdateInfo = 16
        case ToUpdateStatus = 32
        case ToDeleteInfo = 64
        case ToUpdateReaded = 128

      }

      //Enum type declaration end 

    private(set) var hasTaskoperation:Bool = false
    private(set) var taskoperation:Int32 = Int32(0)

    private(set) var hasTaskinfo:Bool = false
    private(set) var taskinfo:Comm.PkgTaskInfo!
    private(set) var hasTaskid:Bool = false
    private(set) var taskid:Int32 = Int32(0)

    private(set) var hasReason:Bool = false
    private(set) var reason:String = ""

    private(set) var hasUpdatestatus:Bool = false
    private(set) var updatestatus:Int32 = Int32(0)

    private(set) var hasUpdatereaded:Bool = false
    private(set) var updatereaded:Int32 = Int32(0)

    private(set) var taskinfolist:Array<Comm.PkgTaskInfo>  = Array<Comm.PkgTaskInfo>()
    private(set) var accepteduseridlist:Array<Int32> = Array<Int32>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasTaskoperation {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasTaskoperation {
        output.writeInt32(1, value:taskoperation)
      }
      if hasTaskinfo {
        output.writeMessage(3, value:taskinfo)
      }
      for oneElementtaskinfolist in taskinfolist {
          output.writeMessage(4, value:oneElementtaskinfolist)
      }
      if !accepteduseridlist.isEmpty {
        for oneValueaccepteduseridlist in accepteduseridlist {
          output.writeInt32(5, value:oneValueaccepteduseridlist)
        }
      }
      if hasTaskid {
        output.writeInt32(10, value:taskid)
      }
      if hasReason {
        output.writeString(11, value:reason)
      }
      if hasUpdatestatus {
        output.writeInt32(12, value:updatestatus)
      }
      if hasUpdatereaded {
        output.writeInt32(13, value:updatereaded)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTaskoperation {
        serialize_size += taskoperation.computeInt32Size(1)
      }
      if hasTaskinfo {
          if let varSizetaskinfo = taskinfo?.computeMessageSize(3) {
              serialize_size += varSizetaskinfo
          }
      }
      for oneElementtaskinfolist in taskinfolist {
          serialize_size += oneElementtaskinfolist.computeMessageSize(4)
      }
      var dataSizeAccepteduseridlist:Int32 = 0
      for oneValueaccepteduseridlist in accepteduseridlist {
          dataSizeAccepteduseridlist += oneValueaccepteduseridlist.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeAccepteduseridlist
      serialize_size += 1 * Int32(accepteduseridlist.count)
      if hasTaskid {
        serialize_size += taskid.computeInt32Size(10)
      }
      if hasReason {
        serialize_size += reason.computeStringSize(11)
      }
      if hasUpdatestatus {
        serialize_size += updatestatus.computeInt32Size(12)
      }
      if hasUpdatereaded {
        serialize_size += updatereaded.computeInt32Size(13)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskOperationReq {
      return Comm.PkgTaskOperationReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskOperationReq {
      return Comm.PkgTaskOperationReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskOperationReq {
      return Comm.PkgTaskOperationReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskOperationReq {
      return Comm.PkgTaskOperationReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskOperationReq {
      return Comm.PkgTaskOperationReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskOperationReq {
      return Comm.PkgTaskOperationReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskOperationReqBuilder {
      return Comm.PkgTaskOperationReq.classBuilder() as! Comm.PkgTaskOperationReqBuilder
    }
    internal func builder() -> Comm.PkgTaskOperationReqBuilder {
      return classBuilder() as! Comm.PkgTaskOperationReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskOperationReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskOperationReq.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskOperationReqBuilder {
      return Comm.PkgTaskOperationReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskOperationReq) -> Comm.PkgTaskOperationReqBuilder {
      return Comm.PkgTaskOperationReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasTaskoperation {
        output += "\(indent) taskoperation: \(taskoperation) \n"
      }
      if hasTaskinfo {
        output += "\(indent) taskinfo {\n"
        taskinfo?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var taskinfolistElementIndex:Int = 0
      for oneElementtaskinfolist in taskinfolist {
          output += "\(indent) taskinfolist[\(taskinfolistElementIndex)] {\n"
          oneElementtaskinfolist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          taskinfolistElementIndex++
      }
      var accepteduseridlistElementIndex:Int = 0
      for oneValueaccepteduseridlist in accepteduseridlist  {
          output += "\(indent) accepteduseridlist[\(accepteduseridlistElementIndex)]: \(oneValueaccepteduseridlist)\n"
          accepteduseridlistElementIndex++
      }
      if hasTaskid {
        output += "\(indent) taskid: \(taskid) \n"
      }
      if hasReason {
        output += "\(indent) reason: \(reason) \n"
      }
      if hasUpdatestatus {
        output += "\(indent) updatestatus: \(updatestatus) \n"
      }
      if hasUpdatereaded {
        output += "\(indent) updatereaded: \(updatereaded) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTaskoperation {
               hashCode = (hashCode &* 31) &+ taskoperation.hashValue
            }
            if hasTaskinfo {
                if let hashValuetaskinfo = taskinfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetaskinfo
                }
            }
            for oneElementtaskinfolist in taskinfolist {
                hashCode = (hashCode &* 31) &+ oneElementtaskinfolist.hashValue
            }
            for oneValueaccepteduseridlist in accepteduseridlist {
                hashCode = (hashCode &* 31) &+ oneValueaccepteduseridlist.hashValue
            }
            if hasTaskid {
               hashCode = (hashCode &* 31) &+ taskid.hashValue
            }
            if hasReason {
               hashCode = (hashCode &* 31) &+ reason.hashValue
            }
            if hasUpdatestatus {
               hashCode = (hashCode &* 31) &+ updatestatus.hashValue
            }
            if hasUpdatereaded {
               hashCode = (hashCode &* 31) &+ updatereaded.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskOperationReq"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskOperationReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskOperationReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskOperationReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskOperationReq

    required override internal init () {
       builderResult = Comm.PkgTaskOperationReq()
       super.init()
    }
    var hasTaskoperation:Bool {
         get {
              return builderResult.hasTaskoperation
         }
    }
    var taskoperation:Int32 {
         get {
              return builderResult.taskoperation
         }
         set (value) {
             builderResult.hasTaskoperation = true
             builderResult.taskoperation = value
         }
    }
    func setTaskoperation(value:Int32)-> Comm.PkgTaskOperationReqBuilder {
      self.taskoperation = value
      return self
    }
    internal func clearTaskoperation() -> Comm.PkgTaskOperationReqBuilder{
         builderResult.hasTaskoperation = false
         builderResult.taskoperation = Int32(0)
         return self
    }
    var hasTaskinfo:Bool {
         get {
             return builderResult.hasTaskinfo
         }
    }
    var taskinfo:Comm.PkgTaskInfo! {
         get {
             return builderResult.taskinfo
         }
         set (value) {
             builderResult.hasTaskinfo = true
             builderResult.taskinfo = value
         }
    }
    func setTaskinfo(value:Comm.PkgTaskInfo!)-> Comm.PkgTaskOperationReqBuilder {
      self.taskinfo = value
      return self
    }
    internal func mergeTaskinfo(value:Comm.PkgTaskInfo) -> Comm.PkgTaskOperationReqBuilder {
      if (builderResult.hasTaskinfo) {
        builderResult.taskinfo = Comm.PkgTaskInfo.builderWithPrototype(builderResult.taskinfo).mergeFrom(value).buildPartial()
      } else {
        builderResult.taskinfo = value
      }
      builderResult.hasTaskinfo = true
      return self
    }
    internal func clearTaskinfo() -> Comm.PkgTaskOperationReqBuilder {
      builderResult.hasTaskinfo = false
      builderResult.taskinfo = nil
      return self
    }
    var taskinfolist:Array<Comm.PkgTaskInfo> {
         get {
             return builderResult.taskinfolist
         }
         set (value) {
             builderResult.taskinfolist = value
         }
    }
    func setTaskinfolist(value:Array<Comm.PkgTaskInfo>)-> Comm.PkgTaskOperationReqBuilder {
      self.taskinfolist = value
      return self
    }
    internal func clearTaskinfolist() -> Comm.PkgTaskOperationReqBuilder {
      builderResult.taskinfolist.removeAll(keepCapacity: false)
      return self
    }
    var accepteduseridlist:Array<Int32> {
         get {
             return builderResult.accepteduseridlist
         }
         set (array) {
             builderResult.accepteduseridlist = array
         }
    }
    func setAccepteduseridlist(value:Array<Int32>)-> Comm.PkgTaskOperationReqBuilder {
      self.accepteduseridlist = value
      return self
    }
    internal func clearAccepteduseridlist() -> Comm.PkgTaskOperationReqBuilder {
       builderResult.accepteduseridlist.removeAll(keepCapacity: false)
       return self
    }
    var hasTaskid:Bool {
         get {
              return builderResult.hasTaskid
         }
    }
    var taskid:Int32 {
         get {
              return builderResult.taskid
         }
         set (value) {
             builderResult.hasTaskid = true
             builderResult.taskid = value
         }
    }
    func setTaskid(value:Int32)-> Comm.PkgTaskOperationReqBuilder {
      self.taskid = value
      return self
    }
    internal func clearTaskid() -> Comm.PkgTaskOperationReqBuilder{
         builderResult.hasTaskid = false
         builderResult.taskid = Int32(0)
         return self
    }
    var hasReason:Bool {
         get {
              return builderResult.hasReason
         }
    }
    var reason:String {
         get {
              return builderResult.reason
         }
         set (value) {
             builderResult.hasReason = true
             builderResult.reason = value
         }
    }
    func setReason(value:String)-> Comm.PkgTaskOperationReqBuilder {
      self.reason = value
      return self
    }
    internal func clearReason() -> Comm.PkgTaskOperationReqBuilder{
         builderResult.hasReason = false
         builderResult.reason = ""
         return self
    }
    var hasUpdatestatus:Bool {
         get {
              return builderResult.hasUpdatestatus
         }
    }
    var updatestatus:Int32 {
         get {
              return builderResult.updatestatus
         }
         set (value) {
             builderResult.hasUpdatestatus = true
             builderResult.updatestatus = value
         }
    }
    func setUpdatestatus(value:Int32)-> Comm.PkgTaskOperationReqBuilder {
      self.updatestatus = value
      return self
    }
    internal func clearUpdatestatus() -> Comm.PkgTaskOperationReqBuilder{
         builderResult.hasUpdatestatus = false
         builderResult.updatestatus = Int32(0)
         return self
    }
    var hasUpdatereaded:Bool {
         get {
              return builderResult.hasUpdatereaded
         }
    }
    var updatereaded:Int32 {
         get {
              return builderResult.updatereaded
         }
         set (value) {
             builderResult.hasUpdatereaded = true
             builderResult.updatereaded = value
         }
    }
    func setUpdatereaded(value:Int32)-> Comm.PkgTaskOperationReqBuilder {
      self.updatereaded = value
      return self
    }
    internal func clearUpdatereaded() -> Comm.PkgTaskOperationReqBuilder{
         builderResult.hasUpdatereaded = false
         builderResult.updatereaded = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskOperationReqBuilder {
      builderResult = Comm.PkgTaskOperationReq()
      return self
    }
    internal override func clone() -> Comm.PkgTaskOperationReqBuilder {
      return Comm.PkgTaskOperationReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskOperationReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskOperationReq {
      var returnMe:Comm.PkgTaskOperationReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskOperationReq) -> Comm.PkgTaskOperationReqBuilder {
      if (other == Comm.PkgTaskOperationReq()) {
       return self
      }
      if other.hasTaskoperation {
           taskoperation = other.taskoperation
      }
      if (other.hasTaskinfo) {
          mergeTaskinfo(other.taskinfo)
      }
      if !other.taskinfolist.isEmpty  {
         builderResult.taskinfolist += other.taskinfolist
      }
      if !other.accepteduseridlist.isEmpty {
          builderResult.accepteduseridlist += other.accepteduseridlist
      }
      if other.hasTaskid {
           taskid = other.taskid
      }
      if other.hasReason {
           reason = other.reason
      }
      if other.hasUpdatestatus {
           updatestatus = other.updatestatus
      }
      if other.hasUpdatereaded {
           updatereaded = other.updatereaded
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskOperationReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskOperationReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          taskoperation = input.readInt32()

        case 26 :
          var subBuilder:Comm.PkgTaskInfoBuilder = Comm.PkgTaskInfo.builder()
          if hasTaskinfo {
            subBuilder.mergeFrom(taskinfo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          taskinfo = subBuilder.buildPartial()

        case 34 :
          var subBuilder = Comm.PkgTaskInfo.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          taskinfolist += [subBuilder.buildPartial()]

        case 40 :
          accepteduseridlist += [input.readInt32()]

        case 80 :
          taskid = input.readInt32()

        case 90 :
          reason = input.readString()

        case 96 :
          updatestatus = input.readInt32()

        case 104 :
          updatereaded = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgTaskOperationReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasTaskid:Bool = false
    private(set) var taskid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasTaskid {
        output.writeInt32(5, value:taskid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasTaskid {
        serialize_size += taskid.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgTaskOperationReply {
      return Comm.PkgTaskOperationReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskOperationReply {
      return Comm.PkgTaskOperationReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgTaskOperationReply {
      return Comm.PkgTaskOperationReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgTaskOperationReply {
      return Comm.PkgTaskOperationReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgTaskOperationReply {
      return Comm.PkgTaskOperationReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskOperationReply {
      return Comm.PkgTaskOperationReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgTaskOperationReplyBuilder {
      return Comm.PkgTaskOperationReply.classBuilder() as! Comm.PkgTaskOperationReplyBuilder
    }
    internal func builder() -> Comm.PkgTaskOperationReplyBuilder {
      return classBuilder() as! Comm.PkgTaskOperationReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskOperationReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgTaskOperationReply.builder()
    }
    internal func toBuilder() -> Comm.PkgTaskOperationReplyBuilder {
      return Comm.PkgTaskOperationReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgTaskOperationReply) -> Comm.PkgTaskOperationReplyBuilder {
      return Comm.PkgTaskOperationReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasTaskid {
        output += "\(indent) taskid: \(taskid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasTaskid {
               hashCode = (hashCode &* 31) &+ taskid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgTaskOperationReply"
    }
    override internal func className() -> String {
        return "Comm.PkgTaskOperationReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgTaskOperationReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgTaskOperationReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgTaskOperationReply

    required override internal init () {
       builderResult = Comm.PkgTaskOperationReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgTaskOperationReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgTaskOperationReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgTaskOperationReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgTaskOperationReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasTaskid:Bool {
         get {
              return builderResult.hasTaskid
         }
    }
    var taskid:Int32 {
         get {
              return builderResult.taskid
         }
         set (value) {
             builderResult.hasTaskid = true
             builderResult.taskid = value
         }
    }
    func setTaskid(value:Int32)-> Comm.PkgTaskOperationReplyBuilder {
      self.taskid = value
      return self
    }
    internal func clearTaskid() -> Comm.PkgTaskOperationReplyBuilder{
         builderResult.hasTaskid = false
         builderResult.taskid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgTaskOperationReplyBuilder {
      builderResult = Comm.PkgTaskOperationReply()
      return self
    }
    internal override func clone() -> Comm.PkgTaskOperationReplyBuilder {
      return Comm.PkgTaskOperationReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgTaskOperationReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgTaskOperationReply {
      var returnMe:Comm.PkgTaskOperationReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgTaskOperationReply) -> Comm.PkgTaskOperationReplyBuilder {
      if (other == Comm.PkgTaskOperationReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasTaskid {
           taskid = other.taskid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgTaskOperationReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgTaskOperationReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 40 :
          taskid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgCompanyGroup : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasGroupid:Bool = false
    private(set) var groupid:Int32 = Int32(0)

    private(set) var hasCompanyid:Bool = false
    private(set) var companyid:Int32 = Int32(0)

    private(set) var hasGroupname:Bool = false
    private(set) var groupname:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGroupid {
        return false
      }
      if !hasCompanyid {
        return false
      }
      if !hasGroupname {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGroupid {
        output.writeInt32(1, value:groupid)
      }
      if hasCompanyid {
        output.writeInt32(2, value:companyid)
      }
      if hasGroupname {
        output.writeString(3, value:groupname)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGroupid {
        serialize_size += groupid.computeInt32Size(1)
      }
      if hasCompanyid {
        serialize_size += companyid.computeInt32Size(2)
      }
      if hasGroupname {
        serialize_size += groupname.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgCompanyGroup {
      return Comm.PkgCompanyGroup.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroup {
      return Comm.PkgCompanyGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgCompanyGroup {
      return Comm.PkgCompanyGroup.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgCompanyGroup {
      return Comm.PkgCompanyGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgCompanyGroup {
      return Comm.PkgCompanyGroup.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroup {
      return Comm.PkgCompanyGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgCompanyGroupBuilder {
      return Comm.PkgCompanyGroup.classBuilder() as! Comm.PkgCompanyGroupBuilder
    }
    internal func builder() -> Comm.PkgCompanyGroupBuilder {
      return classBuilder() as! Comm.PkgCompanyGroupBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyGroupBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyGroup.builder()
    }
    internal func toBuilder() -> Comm.PkgCompanyGroupBuilder {
      return Comm.PkgCompanyGroup.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgCompanyGroup) -> Comm.PkgCompanyGroupBuilder {
      return Comm.PkgCompanyGroup.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasGroupid {
        output += "\(indent) groupid: \(groupid) \n"
      }
      if hasCompanyid {
        output += "\(indent) companyid: \(companyid) \n"
      }
      if hasGroupname {
        output += "\(indent) groupname: \(groupname) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGroupid {
               hashCode = (hashCode &* 31) &+ groupid.hashValue
            }
            if hasCompanyid {
               hashCode = (hashCode &* 31) &+ companyid.hashValue
            }
            if hasGroupname {
               hashCode = (hashCode &* 31) &+ groupname.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgCompanyGroup"
    }
    override internal func className() -> String {
        return "Comm.PkgCompanyGroup"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgCompanyGroup.self
    }
    //Meta information declaration end

  }

  final internal class PkgCompanyGroupBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgCompanyGroup

    required override internal init () {
       builderResult = Comm.PkgCompanyGroup()
       super.init()
    }
    var hasGroupid:Bool {
         get {
              return builderResult.hasGroupid
         }
    }
    var groupid:Int32 {
         get {
              return builderResult.groupid
         }
         set (value) {
             builderResult.hasGroupid = true
             builderResult.groupid = value
         }
    }
    func setGroupid(value:Int32)-> Comm.PkgCompanyGroupBuilder {
      self.groupid = value
      return self
    }
    internal func clearGroupid() -> Comm.PkgCompanyGroupBuilder{
         builderResult.hasGroupid = false
         builderResult.groupid = Int32(0)
         return self
    }
    var hasCompanyid:Bool {
         get {
              return builderResult.hasCompanyid
         }
    }
    var companyid:Int32 {
         get {
              return builderResult.companyid
         }
         set (value) {
             builderResult.hasCompanyid = true
             builderResult.companyid = value
         }
    }
    func setCompanyid(value:Int32)-> Comm.PkgCompanyGroupBuilder {
      self.companyid = value
      return self
    }
    internal func clearCompanyid() -> Comm.PkgCompanyGroupBuilder{
         builderResult.hasCompanyid = false
         builderResult.companyid = Int32(0)
         return self
    }
    var hasGroupname:Bool {
         get {
              return builderResult.hasGroupname
         }
    }
    var groupname:String {
         get {
              return builderResult.groupname
         }
         set (value) {
             builderResult.hasGroupname = true
             builderResult.groupname = value
         }
    }
    func setGroupname(value:String)-> Comm.PkgCompanyGroupBuilder {
      self.groupname = value
      return self
    }
    internal func clearGroupname() -> Comm.PkgCompanyGroupBuilder{
         builderResult.hasGroupname = false
         builderResult.groupname = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgCompanyGroupBuilder {
      builderResult = Comm.PkgCompanyGroup()
      return self
    }
    internal override func clone() -> Comm.PkgCompanyGroupBuilder {
      return Comm.PkgCompanyGroup.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgCompanyGroup {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgCompanyGroup {
      var returnMe:Comm.PkgCompanyGroup = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgCompanyGroup) -> Comm.PkgCompanyGroupBuilder {
      if (other == Comm.PkgCompanyGroup()) {
       return self
      }
      if other.hasGroupid {
           groupid = other.groupid
      }
      if other.hasCompanyid {
           companyid = other.companyid
      }
      if other.hasGroupname {
           groupname = other.groupname
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgCompanyGroupBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          groupid = input.readInt32()

        case 16 :
          companyid = input.readInt32()

        case 26 :
          groupname = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgGroupUser : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasGroupid:Bool = false
    private(set) var groupid:Int32 = Int32(0)

    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var hasRealname:Bool = false
    private(set) var realname:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasEmailaddress:Bool = false
    private(set) var emailaddress:String = ""

    private(set) var hasPermission:Bool = false
    private(set) var permission:Int32 = Int32(0)

    private(set) var hasCreatetime:Bool = false
    private(set) var createtime:String = ""

    private(set) var hasRolename:Bool = false
    private(set) var rolename:String = ""

    private(set) var hasPermissionroleid:Bool = false
    private(set) var permissionroleid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasGroupid {
        return false
      }
      if !hasUserid {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasGroupid {
        output.writeInt32(1, value:groupid)
      }
      if hasUserid {
        output.writeInt32(2, value:userid)
      }
      if hasRealname {
        output.writeString(3, value:realname)
      }
      if hasPhonenumber {
        output.writeString(12, value:phonenumber)
      }
      if hasEmailaddress {
        output.writeString(13, value:emailaddress)
      }
      if hasPermission {
        output.writeInt32(15, value:permission)
      }
      if hasCreatetime {
        output.writeString(19, value:createtime)
      }
      if hasRolename {
        output.writeString(20, value:rolename)
      }
      if hasPermissionroleid {
        output.writeInt32(22, value:permissionroleid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGroupid {
        serialize_size += groupid.computeInt32Size(1)
      }
      if hasUserid {
        serialize_size += userid.computeInt32Size(2)
      }
      if hasRealname {
        serialize_size += realname.computeStringSize(3)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(12)
      }
      if hasEmailaddress {
        serialize_size += emailaddress.computeStringSize(13)
      }
      if hasPermission {
        serialize_size += permission.computeInt32Size(15)
      }
      if hasCreatetime {
        serialize_size += createtime.computeStringSize(19)
      }
      if hasRolename {
        serialize_size += rolename.computeStringSize(20)
      }
      if hasPermissionroleid {
        serialize_size += permissionroleid.computeInt32Size(22)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgGroupUser {
      return Comm.PkgGroupUser.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgGroupUser {
      return Comm.PkgGroupUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgGroupUser {
      return Comm.PkgGroupUser.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgGroupUser {
      return Comm.PkgGroupUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgGroupUser {
      return Comm.PkgGroupUser.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgGroupUser {
      return Comm.PkgGroupUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgGroupUserBuilder {
      return Comm.PkgGroupUser.classBuilder() as! Comm.PkgGroupUserBuilder
    }
    internal func builder() -> Comm.PkgGroupUserBuilder {
      return classBuilder() as! Comm.PkgGroupUserBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgGroupUserBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgGroupUser.builder()
    }
    internal func toBuilder() -> Comm.PkgGroupUserBuilder {
      return Comm.PkgGroupUser.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgGroupUser) -> Comm.PkgGroupUserBuilder {
      return Comm.PkgGroupUser.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasGroupid {
        output += "\(indent) groupid: \(groupid) \n"
      }
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if hasRealname {
        output += "\(indent) realname: \(realname) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasEmailaddress {
        output += "\(indent) emailaddress: \(emailaddress) \n"
      }
      if hasPermission {
        output += "\(indent) permission: \(permission) \n"
      }
      if hasCreatetime {
        output += "\(indent) createtime: \(createtime) \n"
      }
      if hasRolename {
        output += "\(indent) rolename: \(rolename) \n"
      }
      if hasPermissionroleid {
        output += "\(indent) permissionroleid: \(permissionroleid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGroupid {
               hashCode = (hashCode &* 31) &+ groupid.hashValue
            }
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasRealname {
               hashCode = (hashCode &* 31) &+ realname.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasEmailaddress {
               hashCode = (hashCode &* 31) &+ emailaddress.hashValue
            }
            if hasPermission {
               hashCode = (hashCode &* 31) &+ permission.hashValue
            }
            if hasCreatetime {
               hashCode = (hashCode &* 31) &+ createtime.hashValue
            }
            if hasRolename {
               hashCode = (hashCode &* 31) &+ rolename.hashValue
            }
            if hasPermissionroleid {
               hashCode = (hashCode &* 31) &+ permissionroleid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgGroupUser"
    }
    override internal func className() -> String {
        return "Comm.PkgGroupUser"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgGroupUser.self
    }
    //Meta information declaration end

  }

  final internal class PkgGroupUserBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgGroupUser

    required override internal init () {
       builderResult = Comm.PkgGroupUser()
       super.init()
    }
    var hasGroupid:Bool {
         get {
              return builderResult.hasGroupid
         }
    }
    var groupid:Int32 {
         get {
              return builderResult.groupid
         }
         set (value) {
             builderResult.hasGroupid = true
             builderResult.groupid = value
         }
    }
    func setGroupid(value:Int32)-> Comm.PkgGroupUserBuilder {
      self.groupid = value
      return self
    }
    internal func clearGroupid() -> Comm.PkgGroupUserBuilder{
         builderResult.hasGroupid = false
         builderResult.groupid = Int32(0)
         return self
    }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgGroupUserBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgGroupUserBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
    var hasRealname:Bool {
         get {
              return builderResult.hasRealname
         }
    }
    var realname:String {
         get {
              return builderResult.realname
         }
         set (value) {
             builderResult.hasRealname = true
             builderResult.realname = value
         }
    }
    func setRealname(value:String)-> Comm.PkgGroupUserBuilder {
      self.realname = value
      return self
    }
    internal func clearRealname() -> Comm.PkgGroupUserBuilder{
         builderResult.hasRealname = false
         builderResult.realname = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> Comm.PkgGroupUserBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> Comm.PkgGroupUserBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasEmailaddress:Bool {
         get {
              return builderResult.hasEmailaddress
         }
    }
    var emailaddress:String {
         get {
              return builderResult.emailaddress
         }
         set (value) {
             builderResult.hasEmailaddress = true
             builderResult.emailaddress = value
         }
    }
    func setEmailaddress(value:String)-> Comm.PkgGroupUserBuilder {
      self.emailaddress = value
      return self
    }
    internal func clearEmailaddress() -> Comm.PkgGroupUserBuilder{
         builderResult.hasEmailaddress = false
         builderResult.emailaddress = ""
         return self
    }
    var hasPermission:Bool {
         get {
              return builderResult.hasPermission
         }
    }
    var permission:Int32 {
         get {
              return builderResult.permission
         }
         set (value) {
             builderResult.hasPermission = true
             builderResult.permission = value
         }
    }
    func setPermission(value:Int32)-> Comm.PkgGroupUserBuilder {
      self.permission = value
      return self
    }
    internal func clearPermission() -> Comm.PkgGroupUserBuilder{
         builderResult.hasPermission = false
         builderResult.permission = Int32(0)
         return self
    }
    var hasCreatetime:Bool {
         get {
              return builderResult.hasCreatetime
         }
    }
    var createtime:String {
         get {
              return builderResult.createtime
         }
         set (value) {
             builderResult.hasCreatetime = true
             builderResult.createtime = value
         }
    }
    func setCreatetime(value:String)-> Comm.PkgGroupUserBuilder {
      self.createtime = value
      return self
    }
    internal func clearCreatetime() -> Comm.PkgGroupUserBuilder{
         builderResult.hasCreatetime = false
         builderResult.createtime = ""
         return self
    }
    var hasRolename:Bool {
         get {
              return builderResult.hasRolename
         }
    }
    var rolename:String {
         get {
              return builderResult.rolename
         }
         set (value) {
             builderResult.hasRolename = true
             builderResult.rolename = value
         }
    }
    func setRolename(value:String)-> Comm.PkgGroupUserBuilder {
      self.rolename = value
      return self
    }
    internal func clearRolename() -> Comm.PkgGroupUserBuilder{
         builderResult.hasRolename = false
         builderResult.rolename = ""
         return self
    }
    var hasPermissionroleid:Bool {
         get {
              return builderResult.hasPermissionroleid
         }
    }
    var permissionroleid:Int32 {
         get {
              return builderResult.permissionroleid
         }
         set (value) {
             builderResult.hasPermissionroleid = true
             builderResult.permissionroleid = value
         }
    }
    func setPermissionroleid(value:Int32)-> Comm.PkgGroupUserBuilder {
      self.permissionroleid = value
      return self
    }
    internal func clearPermissionroleid() -> Comm.PkgGroupUserBuilder{
         builderResult.hasPermissionroleid = false
         builderResult.permissionroleid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgGroupUserBuilder {
      builderResult = Comm.PkgGroupUser()
      return self
    }
    internal override func clone() -> Comm.PkgGroupUserBuilder {
      return Comm.PkgGroupUser.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgGroupUser {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgGroupUser {
      var returnMe:Comm.PkgGroupUser = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgGroupUser) -> Comm.PkgGroupUserBuilder {
      if (other == Comm.PkgGroupUser()) {
       return self
      }
      if other.hasGroupid {
           groupid = other.groupid
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasRealname {
           realname = other.realname
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasEmailaddress {
           emailaddress = other.emailaddress
      }
      if other.hasPermission {
           permission = other.permission
      }
      if other.hasCreatetime {
           createtime = other.createtime
      }
      if other.hasRolename {
           rolename = other.rolename
      }
      if other.hasPermissionroleid {
           permissionroleid = other.permissionroleid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgGroupUserBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgGroupUserBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          groupid = input.readInt32()

        case 16 :
          userid = input.readInt32()

        case 26 :
          realname = input.readString()

        case 98 :
          phonenumber = input.readString()

        case 106 :
          emailaddress = input.readString()

        case 120 :
          permission = input.readInt32()

        case 154 :
          createtime = input.readString()

        case 162 :
          rolename = input.readString()

        case 176 :
          permissionroleid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgCompanyGroupQueryReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnQueryType:Int32 {
        case QtAll = 0
        case QtMine = 1

      }

      //Enum type declaration end 

    private(set) var querytype:Comm.PkgCompanyGroupQueryReq.EnQueryType = Comm.PkgCompanyGroupQueryReq.EnQueryType.QtAll
    private(set) var hasQuerytype:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasQuerytype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasQuerytype {
        output.writeEnum(1, value:querytype.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasQuerytype) {
        serialize_size += querytype.rawValue.computeEnumSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgCompanyGroupQueryReq {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupQueryReq {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgCompanyGroupQueryReq {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgCompanyGroupQueryReq {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgCompanyGroupQueryReq {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupQueryReq {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgCompanyGroupQueryReqBuilder {
      return Comm.PkgCompanyGroupQueryReq.classBuilder() as! Comm.PkgCompanyGroupQueryReqBuilder
    }
    internal func builder() -> Comm.PkgCompanyGroupQueryReqBuilder {
      return classBuilder() as! Comm.PkgCompanyGroupQueryReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyGroupQueryReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyGroupQueryReq.builder()
    }
    internal func toBuilder() -> Comm.PkgCompanyGroupQueryReqBuilder {
      return Comm.PkgCompanyGroupQueryReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgCompanyGroupQueryReq) -> Comm.PkgCompanyGroupQueryReqBuilder {
      return Comm.PkgCompanyGroupQueryReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasQuerytype) {
        output += "\(indent) querytype: \(querytype.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasQuerytype {
               hashCode = (hashCode &* 31) &+ Int(querytype.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgCompanyGroupQueryReq"
    }
    override internal func className() -> String {
        return "Comm.PkgCompanyGroupQueryReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgCompanyGroupQueryReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgCompanyGroupQueryReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgCompanyGroupQueryReq

    required override internal init () {
       builderResult = Comm.PkgCompanyGroupQueryReq()
       super.init()
    }
      var hasQuerytype:Bool{
          get {
              return builderResult.hasQuerytype
          }
      }
      var querytype:Comm.PkgCompanyGroupQueryReq.EnQueryType {
          get {
              return builderResult.querytype
          }
          set (value) {
              builderResult.hasQuerytype = true
              builderResult.querytype = value
          }
      }
      internal func setQuerytype(value:Comm.PkgCompanyGroupQueryReq.EnQueryType)-> Comm.PkgCompanyGroupQueryReqBuilder {
        self.querytype = value
        return self
      }
      internal func clearQuerytype() -> Comm.PkgCompanyGroupQueryReqBuilder {
         builderResult.hasQuerytype = false
         builderResult.querytype = .QtAll
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgCompanyGroupQueryReqBuilder {
      builderResult = Comm.PkgCompanyGroupQueryReq()
      return self
    }
    internal override func clone() -> Comm.PkgCompanyGroupQueryReqBuilder {
      return Comm.PkgCompanyGroupQueryReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgCompanyGroupQueryReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgCompanyGroupQueryReq {
      var returnMe:Comm.PkgCompanyGroupQueryReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgCompanyGroupQueryReq) -> Comm.PkgCompanyGroupQueryReqBuilder {
      if (other == Comm.PkgCompanyGroupQueryReq()) {
       return self
      }
      if other.hasQuerytype {
           querytype = other.querytype
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgCompanyGroupQueryReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupQueryReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntquerytype = input.readEnum()
          if let enumsquerytype = Comm.PkgCompanyGroupQueryReq.EnQueryType(rawValue:valueIntquerytype){
               querytype = enumsquerytype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntquerytype))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgCompanyGroupQueryReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var companygrouplist:Array<Comm.PkgCompanyGroup>  = Array<Comm.PkgCompanyGroup>()
    private(set) var groupuserlist:Array<Comm.PkgGroupUser>  = Array<Comm.PkgGroupUser>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
      var isInitcompanygrouplist:Bool = true
      for oneElementcompanygrouplist in companygrouplist {
          if (!oneElementcompanygrouplist.isInitialized()) {
              isInitcompanygrouplist = false
              break 
          }
      }
      if !isInitcompanygrouplist {
       return isInitcompanygrouplist
       }
      var isInitgroupuserlist:Bool = true
      for oneElementgroupuserlist in groupuserlist {
          if (!oneElementgroupuserlist.isInitialized()) {
              isInitgroupuserlist = false
              break 
          }
      }
      if !isInitgroupuserlist {
       return isInitgroupuserlist
       }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      for oneElementcompanygrouplist in companygrouplist {
          output.writeMessage(4, value:oneElementcompanygrouplist)
      }
      for oneElementgroupuserlist in groupuserlist {
          output.writeMessage(5, value:oneElementgroupuserlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      for oneElementcompanygrouplist in companygrouplist {
          serialize_size += oneElementcompanygrouplist.computeMessageSize(4)
      }
      for oneElementgroupuserlist in groupuserlist {
          serialize_size += oneElementgroupuserlist.computeMessageSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgCompanyGroupQueryReply {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupQueryReply {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgCompanyGroupQueryReply {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgCompanyGroupQueryReply {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgCompanyGroupQueryReply {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupQueryReply {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      return Comm.PkgCompanyGroupQueryReply.classBuilder() as! Comm.PkgCompanyGroupQueryReplyBuilder
    }
    internal func builder() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      return classBuilder() as! Comm.PkgCompanyGroupQueryReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyGroupQueryReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgCompanyGroupQueryReply.builder()
    }
    internal func toBuilder() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      return Comm.PkgCompanyGroupQueryReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgCompanyGroupQueryReply) -> Comm.PkgCompanyGroupQueryReplyBuilder {
      return Comm.PkgCompanyGroupQueryReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      var companygrouplistElementIndex:Int = 0
      for oneElementcompanygrouplist in companygrouplist {
          output += "\(indent) companygrouplist[\(companygrouplistElementIndex)] {\n"
          oneElementcompanygrouplist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          companygrouplistElementIndex++
      }
      var groupuserlistElementIndex:Int = 0
      for oneElementgroupuserlist in groupuserlist {
          output += "\(indent) groupuserlist[\(groupuserlistElementIndex)] {\n"
          oneElementgroupuserlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          groupuserlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            for oneElementcompanygrouplist in companygrouplist {
                hashCode = (hashCode &* 31) &+ oneElementcompanygrouplist.hashValue
            }
            for oneElementgroupuserlist in groupuserlist {
                hashCode = (hashCode &* 31) &+ oneElementgroupuserlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgCompanyGroupQueryReply"
    }
    override internal func className() -> String {
        return "Comm.PkgCompanyGroupQueryReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgCompanyGroupQueryReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgCompanyGroupQueryReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgCompanyGroupQueryReply

    required override internal init () {
       builderResult = Comm.PkgCompanyGroupQueryReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgCompanyGroupQueryReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgCompanyGroupQueryReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgCompanyGroupQueryReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgCompanyGroupQueryReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var companygrouplist:Array<Comm.PkgCompanyGroup> {
         get {
             return builderResult.companygrouplist
         }
         set (value) {
             builderResult.companygrouplist = value
         }
    }
    func setCompanygrouplist(value:Array<Comm.PkgCompanyGroup>)-> Comm.PkgCompanyGroupQueryReplyBuilder {
      self.companygrouplist = value
      return self
    }
    internal func clearCompanygrouplist() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      builderResult.companygrouplist.removeAll(keepCapacity: false)
      return self
    }
    var groupuserlist:Array<Comm.PkgGroupUser> {
         get {
             return builderResult.groupuserlist
         }
         set (value) {
             builderResult.groupuserlist = value
         }
    }
    func setGroupuserlist(value:Array<Comm.PkgGroupUser>)-> Comm.PkgCompanyGroupQueryReplyBuilder {
      self.groupuserlist = value
      return self
    }
    internal func clearGroupuserlist() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      builderResult.groupuserlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      builderResult = Comm.PkgCompanyGroupQueryReply()
      return self
    }
    internal override func clone() -> Comm.PkgCompanyGroupQueryReplyBuilder {
      return Comm.PkgCompanyGroupQueryReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgCompanyGroupQueryReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgCompanyGroupQueryReply {
      var returnMe:Comm.PkgCompanyGroupQueryReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgCompanyGroupQueryReply) -> Comm.PkgCompanyGroupQueryReplyBuilder {
      if (other == Comm.PkgCompanyGroupQueryReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if !other.companygrouplist.isEmpty  {
         builderResult.companygrouplist += other.companygrouplist
      }
      if !other.groupuserlist.isEmpty  {
         builderResult.groupuserlist += other.groupuserlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgCompanyGroupQueryReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgCompanyGroupQueryReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 34 :
          var subBuilder = Comm.PkgCompanyGroup.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          companygrouplist += [subBuilder.buildPartial()]

        case 42 :
          var subBuilder = Comm.PkgGroupUser.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          groupuserlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgAdvInfo : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasId:Bool = false
    private(set) var id:Int32 = Int32(0)

    private(set) var hasName:Bool = false
    private(set) var name:String = ""

    private(set) var hasUrlpic:Bool = false
    private(set) var urlpic:String = ""

    private(set) var hasAdvtxt:Bool = false
    private(set) var advtxt:String = ""

    private(set) var hasAdvdesc:Bool = false
    private(set) var advdesc:String = ""

    private(set) var hasCreatetime:Bool = false
    private(set) var createtime:String = ""

    private(set) var hasExpiretime:Bool = false
    private(set) var expiretime:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasId {
        output.writeInt32(1, value:id)
      }
      if hasName {
        output.writeString(2, value:name)
      }
      if hasUrlpic {
        output.writeString(3, value:urlpic)
      }
      if hasAdvtxt {
        output.writeString(4, value:advtxt)
      }
      if hasAdvdesc {
        output.writeString(5, value:advdesc)
      }
      if hasCreatetime {
        output.writeString(6, value:createtime)
      }
      if hasExpiretime {
        output.writeString(7, value:expiretime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeInt32Size(1)
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      if hasUrlpic {
        serialize_size += urlpic.computeStringSize(3)
      }
      if hasAdvtxt {
        serialize_size += advtxt.computeStringSize(4)
      }
      if hasAdvdesc {
        serialize_size += advdesc.computeStringSize(5)
      }
      if hasCreatetime {
        serialize_size += createtime.computeStringSize(6)
      }
      if hasExpiretime {
        serialize_size += expiretime.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgAdvInfo {
      return Comm.PkgAdvInfo.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvInfo {
      return Comm.PkgAdvInfo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgAdvInfo {
      return Comm.PkgAdvInfo.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgAdvInfo {
      return Comm.PkgAdvInfo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgAdvInfo {
      return Comm.PkgAdvInfo.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvInfo {
      return Comm.PkgAdvInfo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgAdvInfoBuilder {
      return Comm.PkgAdvInfo.classBuilder() as! Comm.PkgAdvInfoBuilder
    }
    internal func builder() -> Comm.PkgAdvInfoBuilder {
      return classBuilder() as! Comm.PkgAdvInfoBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgAdvInfoBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgAdvInfo.builder()
    }
    internal func toBuilder() -> Comm.PkgAdvInfoBuilder {
      return Comm.PkgAdvInfo.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgAdvInfo) -> Comm.PkgAdvInfoBuilder {
      return Comm.PkgAdvInfo.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasUrlpic {
        output += "\(indent) urlpic: \(urlpic) \n"
      }
      if hasAdvtxt {
        output += "\(indent) advtxt: \(advtxt) \n"
      }
      if hasAdvdesc {
        output += "\(indent) advdesc: \(advdesc) \n"
      }
      if hasCreatetime {
        output += "\(indent) createtime: \(createtime) \n"
      }
      if hasExpiretime {
        output += "\(indent) expiretime: \(expiretime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasUrlpic {
               hashCode = (hashCode &* 31) &+ urlpic.hashValue
            }
            if hasAdvtxt {
               hashCode = (hashCode &* 31) &+ advtxt.hashValue
            }
            if hasAdvdesc {
               hashCode = (hashCode &* 31) &+ advdesc.hashValue
            }
            if hasCreatetime {
               hashCode = (hashCode &* 31) &+ createtime.hashValue
            }
            if hasExpiretime {
               hashCode = (hashCode &* 31) &+ expiretime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgAdvInfo"
    }
    override internal func className() -> String {
        return "Comm.PkgAdvInfo"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgAdvInfo.self
    }
    //Meta information declaration end

  }

  final internal class PkgAdvInfoBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgAdvInfo

    required override internal init () {
       builderResult = Comm.PkgAdvInfo()
       super.init()
    }
    var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    var id:Int32 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    func setId(value:Int32)-> Comm.PkgAdvInfoBuilder {
      self.id = value
      return self
    }
    internal func clearId() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasId = false
         builderResult.id = Int32(0)
         return self
    }
    var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    func setName(value:String)-> Comm.PkgAdvInfoBuilder {
      self.name = value
      return self
    }
    internal func clearName() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    var hasUrlpic:Bool {
         get {
              return builderResult.hasUrlpic
         }
    }
    var urlpic:String {
         get {
              return builderResult.urlpic
         }
         set (value) {
             builderResult.hasUrlpic = true
             builderResult.urlpic = value
         }
    }
    func setUrlpic(value:String)-> Comm.PkgAdvInfoBuilder {
      self.urlpic = value
      return self
    }
    internal func clearUrlpic() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasUrlpic = false
         builderResult.urlpic = ""
         return self
    }
    var hasAdvtxt:Bool {
         get {
              return builderResult.hasAdvtxt
         }
    }
    var advtxt:String {
         get {
              return builderResult.advtxt
         }
         set (value) {
             builderResult.hasAdvtxt = true
             builderResult.advtxt = value
         }
    }
    func setAdvtxt(value:String)-> Comm.PkgAdvInfoBuilder {
      self.advtxt = value
      return self
    }
    internal func clearAdvtxt() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasAdvtxt = false
         builderResult.advtxt = ""
         return self
    }
    var hasAdvdesc:Bool {
         get {
              return builderResult.hasAdvdesc
         }
    }
    var advdesc:String {
         get {
              return builderResult.advdesc
         }
         set (value) {
             builderResult.hasAdvdesc = true
             builderResult.advdesc = value
         }
    }
    func setAdvdesc(value:String)-> Comm.PkgAdvInfoBuilder {
      self.advdesc = value
      return self
    }
    internal func clearAdvdesc() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasAdvdesc = false
         builderResult.advdesc = ""
         return self
    }
    var hasCreatetime:Bool {
         get {
              return builderResult.hasCreatetime
         }
    }
    var createtime:String {
         get {
              return builderResult.createtime
         }
         set (value) {
             builderResult.hasCreatetime = true
             builderResult.createtime = value
         }
    }
    func setCreatetime(value:String)-> Comm.PkgAdvInfoBuilder {
      self.createtime = value
      return self
    }
    internal func clearCreatetime() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasCreatetime = false
         builderResult.createtime = ""
         return self
    }
    var hasExpiretime:Bool {
         get {
              return builderResult.hasExpiretime
         }
    }
    var expiretime:String {
         get {
              return builderResult.expiretime
         }
         set (value) {
             builderResult.hasExpiretime = true
             builderResult.expiretime = value
         }
    }
    func setExpiretime(value:String)-> Comm.PkgAdvInfoBuilder {
      self.expiretime = value
      return self
    }
    internal func clearExpiretime() -> Comm.PkgAdvInfoBuilder{
         builderResult.hasExpiretime = false
         builderResult.expiretime = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgAdvInfoBuilder {
      builderResult = Comm.PkgAdvInfo()
      return self
    }
    internal override func clone() -> Comm.PkgAdvInfoBuilder {
      return Comm.PkgAdvInfo.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgAdvInfo {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgAdvInfo {
      var returnMe:Comm.PkgAdvInfo = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgAdvInfo) -> Comm.PkgAdvInfoBuilder {
      if (other == Comm.PkgAdvInfo()) {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasUrlpic {
           urlpic = other.urlpic
      }
      if other.hasAdvtxt {
           advtxt = other.advtxt
      }
      if other.hasAdvdesc {
           advdesc = other.advdesc
      }
      if other.hasCreatetime {
           createtime = other.createtime
      }
      if other.hasExpiretime {
           expiretime = other.expiretime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgAdvInfoBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvInfoBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          id = input.readInt32()

        case 18 :
          name = input.readString()

        case 26 :
          urlpic = input.readString()

        case 34 :
          advtxt = input.readString()

        case 42 :
          advdesc = input.readString()

        case 50 :
          createtime = input.readString()

        case 58 :
          expiretime = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgAdvQueryReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnQueryType:Int32 {
        case QtSpnum = 1
        case QtVaildtime = 2
        case QtAdvid = 4

      }

      //Enum type declaration end 

    private(set) var hasQueryflag:Bool = false
    private(set) var queryflag:Int32 = Int32(1)

    private(set) var hasNumreq:Bool = false
    private(set) var numreq:Int32 = Int32(0)

    private(set) var hasAdvid:Bool = false
    private(set) var advid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasQueryflag {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasQueryflag {
        output.writeInt32(1, value:queryflag)
      }
      if hasNumreq {
        output.writeInt32(2, value:numreq)
      }
      if hasAdvid {
        output.writeInt32(3, value:advid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasQueryflag {
        serialize_size += queryflag.computeInt32Size(1)
      }
      if hasNumreq {
        serialize_size += numreq.computeInt32Size(2)
      }
      if hasAdvid {
        serialize_size += advid.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgAdvQueryReq {
      return Comm.PkgAdvQueryReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvQueryReq {
      return Comm.PkgAdvQueryReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgAdvQueryReq {
      return Comm.PkgAdvQueryReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgAdvQueryReq {
      return Comm.PkgAdvQueryReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgAdvQueryReq {
      return Comm.PkgAdvQueryReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvQueryReq {
      return Comm.PkgAdvQueryReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgAdvQueryReqBuilder {
      return Comm.PkgAdvQueryReq.classBuilder() as! Comm.PkgAdvQueryReqBuilder
    }
    internal func builder() -> Comm.PkgAdvQueryReqBuilder {
      return classBuilder() as! Comm.PkgAdvQueryReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgAdvQueryReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgAdvQueryReq.builder()
    }
    internal func toBuilder() -> Comm.PkgAdvQueryReqBuilder {
      return Comm.PkgAdvQueryReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgAdvQueryReq) -> Comm.PkgAdvQueryReqBuilder {
      return Comm.PkgAdvQueryReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasQueryflag {
        output += "\(indent) queryflag: \(queryflag) \n"
      }
      if hasNumreq {
        output += "\(indent) numreq: \(numreq) \n"
      }
      if hasAdvid {
        output += "\(indent) advid: \(advid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasQueryflag {
               hashCode = (hashCode &* 31) &+ queryflag.hashValue
            }
            if hasNumreq {
               hashCode = (hashCode &* 31) &+ numreq.hashValue
            }
            if hasAdvid {
               hashCode = (hashCode &* 31) &+ advid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgAdvQueryReq"
    }
    override internal func className() -> String {
        return "Comm.PkgAdvQueryReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgAdvQueryReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgAdvQueryReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgAdvQueryReq

    required override internal init () {
       builderResult = Comm.PkgAdvQueryReq()
       super.init()
    }
    var hasQueryflag:Bool {
         get {
              return builderResult.hasQueryflag
         }
    }
    var queryflag:Int32 {
         get {
              return builderResult.queryflag
         }
         set (value) {
             builderResult.hasQueryflag = true
             builderResult.queryflag = value
         }
    }
    func setQueryflag(value:Int32)-> Comm.PkgAdvQueryReqBuilder {
      self.queryflag = value
      return self
    }
    internal func clearQueryflag() -> Comm.PkgAdvQueryReqBuilder{
         builderResult.hasQueryflag = false
         builderResult.queryflag = Int32(1)
         return self
    }
    var hasNumreq:Bool {
         get {
              return builderResult.hasNumreq
         }
    }
    var numreq:Int32 {
         get {
              return builderResult.numreq
         }
         set (value) {
             builderResult.hasNumreq = true
             builderResult.numreq = value
         }
    }
    func setNumreq(value:Int32)-> Comm.PkgAdvQueryReqBuilder {
      self.numreq = value
      return self
    }
    internal func clearNumreq() -> Comm.PkgAdvQueryReqBuilder{
         builderResult.hasNumreq = false
         builderResult.numreq = Int32(0)
         return self
    }
    var hasAdvid:Bool {
         get {
              return builderResult.hasAdvid
         }
    }
    var advid:Int32 {
         get {
              return builderResult.advid
         }
         set (value) {
             builderResult.hasAdvid = true
             builderResult.advid = value
         }
    }
    func setAdvid(value:Int32)-> Comm.PkgAdvQueryReqBuilder {
      self.advid = value
      return self
    }
    internal func clearAdvid() -> Comm.PkgAdvQueryReqBuilder{
         builderResult.hasAdvid = false
         builderResult.advid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgAdvQueryReqBuilder {
      builderResult = Comm.PkgAdvQueryReq()
      return self
    }
    internal override func clone() -> Comm.PkgAdvQueryReqBuilder {
      return Comm.PkgAdvQueryReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgAdvQueryReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgAdvQueryReq {
      var returnMe:Comm.PkgAdvQueryReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgAdvQueryReq) -> Comm.PkgAdvQueryReqBuilder {
      if (other == Comm.PkgAdvQueryReq()) {
       return self
      }
      if other.hasQueryflag {
           queryflag = other.queryflag
      }
      if other.hasNumreq {
           numreq = other.numreq
      }
      if other.hasAdvid {
           advid = other.advid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgAdvQueryReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvQueryReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          queryflag = input.readInt32()

        case 16 :
          numreq = input.readInt32()

        case 24 :
          advid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgAdvQueryReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var advinfolist:Array<Comm.PkgAdvInfo>  = Array<Comm.PkgAdvInfo>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      for oneElementadvinfolist in advinfolist {
          output.writeMessage(3, value:oneElementadvinfolist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      for oneElementadvinfolist in advinfolist {
          serialize_size += oneElementadvinfolist.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgAdvQueryReply {
      return Comm.PkgAdvQueryReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvQueryReply {
      return Comm.PkgAdvQueryReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgAdvQueryReply {
      return Comm.PkgAdvQueryReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgAdvQueryReply {
      return Comm.PkgAdvQueryReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgAdvQueryReply {
      return Comm.PkgAdvQueryReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvQueryReply {
      return Comm.PkgAdvQueryReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgAdvQueryReplyBuilder {
      return Comm.PkgAdvQueryReply.classBuilder() as! Comm.PkgAdvQueryReplyBuilder
    }
    internal func builder() -> Comm.PkgAdvQueryReplyBuilder {
      return classBuilder() as! Comm.PkgAdvQueryReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgAdvQueryReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgAdvQueryReply.builder()
    }
    internal func toBuilder() -> Comm.PkgAdvQueryReplyBuilder {
      return Comm.PkgAdvQueryReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgAdvQueryReply) -> Comm.PkgAdvQueryReplyBuilder {
      return Comm.PkgAdvQueryReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      var advinfolistElementIndex:Int = 0
      for oneElementadvinfolist in advinfolist {
          output += "\(indent) advinfolist[\(advinfolistElementIndex)] {\n"
          oneElementadvinfolist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          advinfolistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            for oneElementadvinfolist in advinfolist {
                hashCode = (hashCode &* 31) &+ oneElementadvinfolist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgAdvQueryReply"
    }
    override internal func className() -> String {
        return "Comm.PkgAdvQueryReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgAdvQueryReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgAdvQueryReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgAdvQueryReply

    required override internal init () {
       builderResult = Comm.PkgAdvQueryReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgAdvQueryReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgAdvQueryReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgAdvQueryReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgAdvQueryReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var advinfolist:Array<Comm.PkgAdvInfo> {
         get {
             return builderResult.advinfolist
         }
         set (value) {
             builderResult.advinfolist = value
         }
    }
    func setAdvinfolist(value:Array<Comm.PkgAdvInfo>)-> Comm.PkgAdvQueryReplyBuilder {
      self.advinfolist = value
      return self
    }
    internal func clearAdvinfolist() -> Comm.PkgAdvQueryReplyBuilder {
      builderResult.advinfolist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgAdvQueryReplyBuilder {
      builderResult = Comm.PkgAdvQueryReply()
      return self
    }
    internal override func clone() -> Comm.PkgAdvQueryReplyBuilder {
      return Comm.PkgAdvQueryReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgAdvQueryReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgAdvQueryReply {
      var returnMe:Comm.PkgAdvQueryReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgAdvQueryReply) -> Comm.PkgAdvQueryReplyBuilder {
      if (other == Comm.PkgAdvQueryReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if !other.advinfolist.isEmpty  {
         builderResult.advinfolist += other.advinfolist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgAdvQueryReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgAdvQueryReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          var subBuilder = Comm.PkgAdvInfo.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          advinfolist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgQueryMyProfileReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasCurversion:Bool = false
    private(set) var curversion:String = ""

    private(set) var hasPlatmform:Bool = false
    private(set) var platmform:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasCurversion {
        output.writeString(1, value:curversion)
      }
      if hasPlatmform {
        output.writeString(2, value:platmform)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCurversion {
        serialize_size += curversion.computeStringSize(1)
      }
      if hasPlatmform {
        serialize_size += platmform.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgQueryMyProfileReq {
      return Comm.PkgQueryMyProfileReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgQueryMyProfileReq {
      return Comm.PkgQueryMyProfileReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgQueryMyProfileReq {
      return Comm.PkgQueryMyProfileReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgQueryMyProfileReq {
      return Comm.PkgQueryMyProfileReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgQueryMyProfileReq {
      return Comm.PkgQueryMyProfileReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgQueryMyProfileReq {
      return Comm.PkgQueryMyProfileReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgQueryMyProfileReqBuilder {
      return Comm.PkgQueryMyProfileReq.classBuilder() as! Comm.PkgQueryMyProfileReqBuilder
    }
    internal func builder() -> Comm.PkgQueryMyProfileReqBuilder {
      return classBuilder() as! Comm.PkgQueryMyProfileReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgQueryMyProfileReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgQueryMyProfileReq.builder()
    }
    internal func toBuilder() -> Comm.PkgQueryMyProfileReqBuilder {
      return Comm.PkgQueryMyProfileReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgQueryMyProfileReq) -> Comm.PkgQueryMyProfileReqBuilder {
      return Comm.PkgQueryMyProfileReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasCurversion {
        output += "\(indent) curversion: \(curversion) \n"
      }
      if hasPlatmform {
        output += "\(indent) platmform: \(platmform) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCurversion {
               hashCode = (hashCode &* 31) &+ curversion.hashValue
            }
            if hasPlatmform {
               hashCode = (hashCode &* 31) &+ platmform.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgQueryMyProfileReq"
    }
    override internal func className() -> String {
        return "Comm.PkgQueryMyProfileReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgQueryMyProfileReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgQueryMyProfileReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgQueryMyProfileReq

    required override internal init () {
       builderResult = Comm.PkgQueryMyProfileReq()
       super.init()
    }
    var hasCurversion:Bool {
         get {
              return builderResult.hasCurversion
         }
    }
    var curversion:String {
         get {
              return builderResult.curversion
         }
         set (value) {
             builderResult.hasCurversion = true
             builderResult.curversion = value
         }
    }
    func setCurversion(value:String)-> Comm.PkgQueryMyProfileReqBuilder {
      self.curversion = value
      return self
    }
    internal func clearCurversion() -> Comm.PkgQueryMyProfileReqBuilder{
         builderResult.hasCurversion = false
         builderResult.curversion = ""
         return self
    }
    var hasPlatmform:Bool {
         get {
              return builderResult.hasPlatmform
         }
    }
    var platmform:String {
         get {
              return builderResult.platmform
         }
         set (value) {
             builderResult.hasPlatmform = true
             builderResult.platmform = value
         }
    }
    func setPlatmform(value:String)-> Comm.PkgQueryMyProfileReqBuilder {
      self.platmform = value
      return self
    }
    internal func clearPlatmform() -> Comm.PkgQueryMyProfileReqBuilder{
         builderResult.hasPlatmform = false
         builderResult.platmform = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgQueryMyProfileReqBuilder {
      builderResult = Comm.PkgQueryMyProfileReq()
      return self
    }
    internal override func clone() -> Comm.PkgQueryMyProfileReqBuilder {
      return Comm.PkgQueryMyProfileReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgQueryMyProfileReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgQueryMyProfileReq {
      var returnMe:Comm.PkgQueryMyProfileReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgQueryMyProfileReq) -> Comm.PkgQueryMyProfileReqBuilder {
      if (other == Comm.PkgQueryMyProfileReq()) {
       return self
      }
      if other.hasCurversion {
           curversion = other.curversion
      }
      if other.hasPlatmform {
           platmform = other.platmform
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgQueryMyProfileReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgQueryMyProfileReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          curversion = input.readString()

        case 18 :
          platmform = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgQueryMyProfileReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersionlastest:Bool = false
    private(set) var versionlastest:String = ""

    private(set) var hasVersiondownloadurl:Bool = false
    private(set) var versiondownloadurl:String = ""

    private(set) var hasTasknumbernotfinished:Bool = false
    private(set) var tasknumbernotfinished:Int32 = Int32(0)

    private(set) var hasTasknumberfinshed:Bool = false
    private(set) var tasknumberfinshed:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersionlastest {
        output.writeString(51, value:versionlastest)
      }
      if hasVersiondownloadurl {
        output.writeString(52, value:versiondownloadurl)
      }
      if hasTasknumbernotfinished {
        output.writeInt32(100, value:tasknumbernotfinished)
      }
      if hasTasknumberfinshed {
        output.writeInt32(101, value:tasknumberfinshed)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersionlastest {
        serialize_size += versionlastest.computeStringSize(51)
      }
      if hasVersiondownloadurl {
        serialize_size += versiondownloadurl.computeStringSize(52)
      }
      if hasTasknumbernotfinished {
        serialize_size += tasknumbernotfinished.computeInt32Size(100)
      }
      if hasTasknumberfinshed {
        serialize_size += tasknumberfinshed.computeInt32Size(101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgQueryMyProfileReply {
      return Comm.PkgQueryMyProfileReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgQueryMyProfileReply {
      return Comm.PkgQueryMyProfileReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgQueryMyProfileReply {
      return Comm.PkgQueryMyProfileReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgQueryMyProfileReply {
      return Comm.PkgQueryMyProfileReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgQueryMyProfileReply {
      return Comm.PkgQueryMyProfileReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgQueryMyProfileReply {
      return Comm.PkgQueryMyProfileReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgQueryMyProfileReplyBuilder {
      return Comm.PkgQueryMyProfileReply.classBuilder() as! Comm.PkgQueryMyProfileReplyBuilder
    }
    internal func builder() -> Comm.PkgQueryMyProfileReplyBuilder {
      return classBuilder() as! Comm.PkgQueryMyProfileReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgQueryMyProfileReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgQueryMyProfileReply.builder()
    }
    internal func toBuilder() -> Comm.PkgQueryMyProfileReplyBuilder {
      return Comm.PkgQueryMyProfileReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgQueryMyProfileReply) -> Comm.PkgQueryMyProfileReplyBuilder {
      return Comm.PkgQueryMyProfileReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersionlastest {
        output += "\(indent) versionlastest: \(versionlastest) \n"
      }
      if hasVersiondownloadurl {
        output += "\(indent) versiondownloadurl: \(versiondownloadurl) \n"
      }
      if hasTasknumbernotfinished {
        output += "\(indent) tasknumbernotfinished: \(tasknumbernotfinished) \n"
      }
      if hasTasknumberfinshed {
        output += "\(indent) tasknumberfinshed: \(tasknumberfinshed) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersionlastest {
               hashCode = (hashCode &* 31) &+ versionlastest.hashValue
            }
            if hasVersiondownloadurl {
               hashCode = (hashCode &* 31) &+ versiondownloadurl.hashValue
            }
            if hasTasknumbernotfinished {
               hashCode = (hashCode &* 31) &+ tasknumbernotfinished.hashValue
            }
            if hasTasknumberfinshed {
               hashCode = (hashCode &* 31) &+ tasknumberfinshed.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgQueryMyProfileReply"
    }
    override internal func className() -> String {
        return "Comm.PkgQueryMyProfileReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgQueryMyProfileReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgQueryMyProfileReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgQueryMyProfileReply

    required override internal init () {
       builderResult = Comm.PkgQueryMyProfileReply()
       super.init()
    }
    var hasVersionlastest:Bool {
         get {
              return builderResult.hasVersionlastest
         }
    }
    var versionlastest:String {
         get {
              return builderResult.versionlastest
         }
         set (value) {
             builderResult.hasVersionlastest = true
             builderResult.versionlastest = value
         }
    }
    func setVersionlastest(value:String)-> Comm.PkgQueryMyProfileReplyBuilder {
      self.versionlastest = value
      return self
    }
    internal func clearVersionlastest() -> Comm.PkgQueryMyProfileReplyBuilder{
         builderResult.hasVersionlastest = false
         builderResult.versionlastest = ""
         return self
    }
    var hasVersiondownloadurl:Bool {
         get {
              return builderResult.hasVersiondownloadurl
         }
    }
    var versiondownloadurl:String {
         get {
              return builderResult.versiondownloadurl
         }
         set (value) {
             builderResult.hasVersiondownloadurl = true
             builderResult.versiondownloadurl = value
         }
    }
    func setVersiondownloadurl(value:String)-> Comm.PkgQueryMyProfileReplyBuilder {
      self.versiondownloadurl = value
      return self
    }
    internal func clearVersiondownloadurl() -> Comm.PkgQueryMyProfileReplyBuilder{
         builderResult.hasVersiondownloadurl = false
         builderResult.versiondownloadurl = ""
         return self
    }
    var hasTasknumbernotfinished:Bool {
         get {
              return builderResult.hasTasknumbernotfinished
         }
    }
    var tasknumbernotfinished:Int32 {
         get {
              return builderResult.tasknumbernotfinished
         }
         set (value) {
             builderResult.hasTasknumbernotfinished = true
             builderResult.tasknumbernotfinished = value
         }
    }
    func setTasknumbernotfinished(value:Int32)-> Comm.PkgQueryMyProfileReplyBuilder {
      self.tasknumbernotfinished = value
      return self
    }
    internal func clearTasknumbernotfinished() -> Comm.PkgQueryMyProfileReplyBuilder{
         builderResult.hasTasknumbernotfinished = false
         builderResult.tasknumbernotfinished = Int32(0)
         return self
    }
    var hasTasknumberfinshed:Bool {
         get {
              return builderResult.hasTasknumberfinshed
         }
    }
    var tasknumberfinshed:Int32 {
         get {
              return builderResult.tasknumberfinshed
         }
         set (value) {
             builderResult.hasTasknumberfinshed = true
             builderResult.tasknumberfinshed = value
         }
    }
    func setTasknumberfinshed(value:Int32)-> Comm.PkgQueryMyProfileReplyBuilder {
      self.tasknumberfinshed = value
      return self
    }
    internal func clearTasknumberfinshed() -> Comm.PkgQueryMyProfileReplyBuilder{
         builderResult.hasTasknumberfinshed = false
         builderResult.tasknumberfinshed = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgQueryMyProfileReplyBuilder {
      builderResult = Comm.PkgQueryMyProfileReply()
      return self
    }
    internal override func clone() -> Comm.PkgQueryMyProfileReplyBuilder {
      return Comm.PkgQueryMyProfileReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgQueryMyProfileReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgQueryMyProfileReply {
      var returnMe:Comm.PkgQueryMyProfileReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgQueryMyProfileReply) -> Comm.PkgQueryMyProfileReplyBuilder {
      if (other == Comm.PkgQueryMyProfileReply()) {
       return self
      }
      if other.hasVersionlastest {
           versionlastest = other.versionlastest
      }
      if other.hasVersiondownloadurl {
           versiondownloadurl = other.versiondownloadurl
      }
      if other.hasTasknumbernotfinished {
           tasknumbernotfinished = other.tasknumbernotfinished
      }
      if other.hasTasknumberfinshed {
           tasknumberfinshed = other.tasknumberfinshed
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgQueryMyProfileReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgQueryMyProfileReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 410 :
          versionlastest = input.readString()

        case 418 :
          versiondownloadurl = input.readString()

        case 800 :
          tasknumbernotfinished = input.readInt32()

        case 808 :
          tasknumberfinshed = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLogoutReq : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgLogoutReq {
      return Comm.PkgLogoutReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgLogoutReq {
      return Comm.PkgLogoutReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgLogoutReq {
      return Comm.PkgLogoutReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgLogoutReq {
      return Comm.PkgLogoutReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgLogoutReq {
      return Comm.PkgLogoutReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgLogoutReq {
      return Comm.PkgLogoutReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgLogoutReqBuilder {
      return Comm.PkgLogoutReq.classBuilder() as! Comm.PkgLogoutReqBuilder
    }
    internal func builder() -> Comm.PkgLogoutReqBuilder {
      return classBuilder() as! Comm.PkgLogoutReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgLogoutReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgLogoutReq.builder()
    }
    internal func toBuilder() -> Comm.PkgLogoutReqBuilder {
      return Comm.PkgLogoutReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgLogoutReq) -> Comm.PkgLogoutReqBuilder {
      return Comm.PkgLogoutReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgLogoutReq"
    }
    override internal func className() -> String {
        return "Comm.PkgLogoutReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgLogoutReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLogoutReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgLogoutReq

    required override internal init () {
       builderResult = Comm.PkgLogoutReq()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgLogoutReqBuilder {
      builderResult = Comm.PkgLogoutReq()
      return self
    }
    internal override func clone() -> Comm.PkgLogoutReqBuilder {
      return Comm.PkgLogoutReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgLogoutReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgLogoutReq {
      var returnMe:Comm.PkgLogoutReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgLogoutReq) -> Comm.PkgLogoutReqBuilder {
      if (other == Comm.PkgLogoutReq()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgLogoutReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgLogoutReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLogoutReply : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgLogoutReply {
      return Comm.PkgLogoutReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgLogoutReply {
      return Comm.PkgLogoutReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgLogoutReply {
      return Comm.PkgLogoutReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgLogoutReply {
      return Comm.PkgLogoutReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgLogoutReply {
      return Comm.PkgLogoutReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgLogoutReply {
      return Comm.PkgLogoutReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgLogoutReplyBuilder {
      return Comm.PkgLogoutReply.classBuilder() as! Comm.PkgLogoutReplyBuilder
    }
    internal func builder() -> Comm.PkgLogoutReplyBuilder {
      return classBuilder() as! Comm.PkgLogoutReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgLogoutReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgLogoutReply.builder()
    }
    internal func toBuilder() -> Comm.PkgLogoutReplyBuilder {
      return Comm.PkgLogoutReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgLogoutReply) -> Comm.PkgLogoutReplyBuilder {
      return Comm.PkgLogoutReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgLogoutReply"
    }
    override internal func className() -> String {
        return "Comm.PkgLogoutReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgLogoutReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLogoutReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgLogoutReply

    required override internal init () {
       builderResult = Comm.PkgLogoutReply()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgLogoutReplyBuilder {
      builderResult = Comm.PkgLogoutReply()
      return self
    }
    internal override func clone() -> Comm.PkgLogoutReplyBuilder {
      return Comm.PkgLogoutReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgLogoutReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgLogoutReply {
      var returnMe:Comm.PkgLogoutReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgLogoutReply) -> Comm.PkgLogoutReplyBuilder {
      if (other == Comm.PkgLogoutReply()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgLogoutReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgLogoutReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgNotifyReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasCurversion:Bool = false
    private(set) var curversion:String = ""

    private(set) var hasPlatmform:Bool = false
    private(set) var platmform:String = ""

    private(set) var hasDataupatedtime:Bool = false
    private(set) var dataupatedtime:String = ""

    private(set) var hasForceupdateflag:Bool = false
    private(set) var forceupdateflag:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasCurversion {
        output.writeString(1, value:curversion)
      }
      if hasPlatmform {
        output.writeString(2, value:platmform)
      }
      if hasDataupatedtime {
        output.writeString(3, value:dataupatedtime)
      }
      if hasForceupdateflag {
        output.writeInt32(100, value:forceupdateflag)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCurversion {
        serialize_size += curversion.computeStringSize(1)
      }
      if hasPlatmform {
        serialize_size += platmform.computeStringSize(2)
      }
      if hasDataupatedtime {
        serialize_size += dataupatedtime.computeStringSize(3)
      }
      if hasForceupdateflag {
        serialize_size += forceupdateflag.computeInt32Size(100)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgNotifyReq {
      return Comm.PkgNotifyReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgNotifyReq {
      return Comm.PkgNotifyReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgNotifyReq {
      return Comm.PkgNotifyReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgNotifyReq {
      return Comm.PkgNotifyReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgNotifyReq {
      return Comm.PkgNotifyReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgNotifyReq {
      return Comm.PkgNotifyReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgNotifyReqBuilder {
      return Comm.PkgNotifyReq.classBuilder() as! Comm.PkgNotifyReqBuilder
    }
    internal func builder() -> Comm.PkgNotifyReqBuilder {
      return classBuilder() as! Comm.PkgNotifyReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgNotifyReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgNotifyReq.builder()
    }
    internal func toBuilder() -> Comm.PkgNotifyReqBuilder {
      return Comm.PkgNotifyReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgNotifyReq) -> Comm.PkgNotifyReqBuilder {
      return Comm.PkgNotifyReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasCurversion {
        output += "\(indent) curversion: \(curversion) \n"
      }
      if hasPlatmform {
        output += "\(indent) platmform: \(platmform) \n"
      }
      if hasDataupatedtime {
        output += "\(indent) dataupatedtime: \(dataupatedtime) \n"
      }
      if hasForceupdateflag {
        output += "\(indent) forceupdateflag: \(forceupdateflag) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCurversion {
               hashCode = (hashCode &* 31) &+ curversion.hashValue
            }
            if hasPlatmform {
               hashCode = (hashCode &* 31) &+ platmform.hashValue
            }
            if hasDataupatedtime {
               hashCode = (hashCode &* 31) &+ dataupatedtime.hashValue
            }
            if hasForceupdateflag {
               hashCode = (hashCode &* 31) &+ forceupdateflag.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgNotifyReq"
    }
    override internal func className() -> String {
        return "Comm.PkgNotifyReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgNotifyReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgNotifyReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgNotifyReq

    required override internal init () {
       builderResult = Comm.PkgNotifyReq()
       super.init()
    }
    var hasCurversion:Bool {
         get {
              return builderResult.hasCurversion
         }
    }
    var curversion:String {
         get {
              return builderResult.curversion
         }
         set (value) {
             builderResult.hasCurversion = true
             builderResult.curversion = value
         }
    }
    func setCurversion(value:String)-> Comm.PkgNotifyReqBuilder {
      self.curversion = value
      return self
    }
    internal func clearCurversion() -> Comm.PkgNotifyReqBuilder{
         builderResult.hasCurversion = false
         builderResult.curversion = ""
         return self
    }
    var hasPlatmform:Bool {
         get {
              return builderResult.hasPlatmform
         }
    }
    var platmform:String {
         get {
              return builderResult.platmform
         }
         set (value) {
             builderResult.hasPlatmform = true
             builderResult.platmform = value
         }
    }
    func setPlatmform(value:String)-> Comm.PkgNotifyReqBuilder {
      self.platmform = value
      return self
    }
    internal func clearPlatmform() -> Comm.PkgNotifyReqBuilder{
         builderResult.hasPlatmform = false
         builderResult.platmform = ""
         return self
    }
    var hasDataupatedtime:Bool {
         get {
              return builderResult.hasDataupatedtime
         }
    }
    var dataupatedtime:String {
         get {
              return builderResult.dataupatedtime
         }
         set (value) {
             builderResult.hasDataupatedtime = true
             builderResult.dataupatedtime = value
         }
    }
    func setDataupatedtime(value:String)-> Comm.PkgNotifyReqBuilder {
      self.dataupatedtime = value
      return self
    }
    internal func clearDataupatedtime() -> Comm.PkgNotifyReqBuilder{
         builderResult.hasDataupatedtime = false
         builderResult.dataupatedtime = ""
         return self
    }
    var hasForceupdateflag:Bool {
         get {
              return builderResult.hasForceupdateflag
         }
    }
    var forceupdateflag:Int32 {
         get {
              return builderResult.forceupdateflag
         }
         set (value) {
             builderResult.hasForceupdateflag = true
             builderResult.forceupdateflag = value
         }
    }
    func setForceupdateflag(value:Int32)-> Comm.PkgNotifyReqBuilder {
      self.forceupdateflag = value
      return self
    }
    internal func clearForceupdateflag() -> Comm.PkgNotifyReqBuilder{
         builderResult.hasForceupdateflag = false
         builderResult.forceupdateflag = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgNotifyReqBuilder {
      builderResult = Comm.PkgNotifyReq()
      return self
    }
    internal override func clone() -> Comm.PkgNotifyReqBuilder {
      return Comm.PkgNotifyReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgNotifyReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgNotifyReq {
      var returnMe:Comm.PkgNotifyReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgNotifyReq) -> Comm.PkgNotifyReqBuilder {
      if (other == Comm.PkgNotifyReq()) {
       return self
      }
      if other.hasCurversion {
           curversion = other.curversion
      }
      if other.hasPlatmform {
           platmform = other.platmform
      }
      if other.hasDataupatedtime {
           dataupatedtime = other.dataupatedtime
      }
      if other.hasForceupdateflag {
           forceupdateflag = other.forceupdateflag
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgNotifyReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgNotifyReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          curversion = input.readString()

        case 18 :
          platmform = input.readString()

        case 26 :
          dataupatedtime = input.readString()

        case 800 :
          forceupdateflag = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgNotifyReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasDataupatedtime:Bool = false
    private(set) var dataupatedtime:String = ""

    private(set) var hasNotifyupdatedflag:Bool = false
    private(set) var notifyupdatedflag:Int32 = Int32(0)

    private(set) var hasCompanyinfo:Bool = false
    private(set) var companyinfo:Comm.PkgCompanyInfo!
    private(set) var hasTasknumbernotfinished:Bool = false
    private(set) var tasknumbernotfinished:Int32 = Int32(0)

    private(set) var hasTasknumberfinished:Bool = false
    private(set) var tasknumberfinished:Int32 = Int32(0)

    private(set) var hasVersionlastest:Bool = false
    private(set) var versionlastest:String = ""

    private(set) var hasVersiondownloadurl:Bool = false
    private(set) var versiondownloadurl:String = ""

    private(set) var hasPermission:Bool = false
    private(set) var permission:Int32 = Int32(0)

    private(set) var hasRolename:Bool = false
    private(set) var rolename:String = ""

    private(set) var hasPermissionroleid:Bool = false
    private(set) var permissionroleid:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasDataupatedtime {
        output.writeString(100, value:dataupatedtime)
      }
      if hasNotifyupdatedflag {
        output.writeInt32(101, value:notifyupdatedflag)
      }
      if hasCompanyinfo {
        output.writeMessage(1000, value:companyinfo)
      }
      if hasTasknumbernotfinished {
        output.writeInt32(1011, value:tasknumbernotfinished)
      }
      if hasTasknumberfinished {
        output.writeInt32(1012, value:tasknumberfinished)
      }
      if hasVersionlastest {
        output.writeString(1030, value:versionlastest)
      }
      if hasVersiondownloadurl {
        output.writeString(1041, value:versiondownloadurl)
      }
      if hasPermission {
        output.writeInt32(1051, value:permission)
      }
      if hasRolename {
        output.writeString(1052, value:rolename)
      }
      if hasPermissionroleid {
        output.writeInt32(1053, value:permissionroleid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDataupatedtime {
        serialize_size += dataupatedtime.computeStringSize(100)
      }
      if hasNotifyupdatedflag {
        serialize_size += notifyupdatedflag.computeInt32Size(101)
      }
      if hasCompanyinfo {
          if let varSizecompanyinfo = companyinfo?.computeMessageSize(1000) {
              serialize_size += varSizecompanyinfo
          }
      }
      if hasTasknumbernotfinished {
        serialize_size += tasknumbernotfinished.computeInt32Size(1011)
      }
      if hasTasknumberfinished {
        serialize_size += tasknumberfinished.computeInt32Size(1012)
      }
      if hasVersionlastest {
        serialize_size += versionlastest.computeStringSize(1030)
      }
      if hasVersiondownloadurl {
        serialize_size += versiondownloadurl.computeStringSize(1041)
      }
      if hasPermission {
        serialize_size += permission.computeInt32Size(1051)
      }
      if hasRolename {
        serialize_size += rolename.computeStringSize(1052)
      }
      if hasPermissionroleid {
        serialize_size += permissionroleid.computeInt32Size(1053)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgNotifyReply {
      return Comm.PkgNotifyReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgNotifyReply {
      return Comm.PkgNotifyReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgNotifyReply {
      return Comm.PkgNotifyReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgNotifyReply {
      return Comm.PkgNotifyReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgNotifyReply {
      return Comm.PkgNotifyReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgNotifyReply {
      return Comm.PkgNotifyReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgNotifyReplyBuilder {
      return Comm.PkgNotifyReply.classBuilder() as! Comm.PkgNotifyReplyBuilder
    }
    internal func builder() -> Comm.PkgNotifyReplyBuilder {
      return classBuilder() as! Comm.PkgNotifyReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgNotifyReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgNotifyReply.builder()
    }
    internal func toBuilder() -> Comm.PkgNotifyReplyBuilder {
      return Comm.PkgNotifyReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgNotifyReply) -> Comm.PkgNotifyReplyBuilder {
      return Comm.PkgNotifyReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasDataupatedtime {
        output += "\(indent) dataupatedtime: \(dataupatedtime) \n"
      }
      if hasNotifyupdatedflag {
        output += "\(indent) notifyupdatedflag: \(notifyupdatedflag) \n"
      }
      if hasCompanyinfo {
        output += "\(indent) companyinfo {\n"
        companyinfo?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasTasknumbernotfinished {
        output += "\(indent) tasknumbernotfinished: \(tasknumbernotfinished) \n"
      }
      if hasTasknumberfinished {
        output += "\(indent) tasknumberfinished: \(tasknumberfinished) \n"
      }
      if hasVersionlastest {
        output += "\(indent) versionlastest: \(versionlastest) \n"
      }
      if hasVersiondownloadurl {
        output += "\(indent) versiondownloadurl: \(versiondownloadurl) \n"
      }
      if hasPermission {
        output += "\(indent) permission: \(permission) \n"
      }
      if hasRolename {
        output += "\(indent) rolename: \(rolename) \n"
      }
      if hasPermissionroleid {
        output += "\(indent) permissionroleid: \(permissionroleid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDataupatedtime {
               hashCode = (hashCode &* 31) &+ dataupatedtime.hashValue
            }
            if hasNotifyupdatedflag {
               hashCode = (hashCode &* 31) &+ notifyupdatedflag.hashValue
            }
            if hasCompanyinfo {
                if let hashValuecompanyinfo = companyinfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecompanyinfo
                }
            }
            if hasTasknumbernotfinished {
               hashCode = (hashCode &* 31) &+ tasknumbernotfinished.hashValue
            }
            if hasTasknumberfinished {
               hashCode = (hashCode &* 31) &+ tasknumberfinished.hashValue
            }
            if hasVersionlastest {
               hashCode = (hashCode &* 31) &+ versionlastest.hashValue
            }
            if hasVersiondownloadurl {
               hashCode = (hashCode &* 31) &+ versiondownloadurl.hashValue
            }
            if hasPermission {
               hashCode = (hashCode &* 31) &+ permission.hashValue
            }
            if hasRolename {
               hashCode = (hashCode &* 31) &+ rolename.hashValue
            }
            if hasPermissionroleid {
               hashCode = (hashCode &* 31) &+ permissionroleid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgNotifyReply"
    }
    override internal func className() -> String {
        return "Comm.PkgNotifyReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgNotifyReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgNotifyReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgNotifyReply

    required override internal init () {
       builderResult = Comm.PkgNotifyReply()
       super.init()
    }
    var hasDataupatedtime:Bool {
         get {
              return builderResult.hasDataupatedtime
         }
    }
    var dataupatedtime:String {
         get {
              return builderResult.dataupatedtime
         }
         set (value) {
             builderResult.hasDataupatedtime = true
             builderResult.dataupatedtime = value
         }
    }
    func setDataupatedtime(value:String)-> Comm.PkgNotifyReplyBuilder {
      self.dataupatedtime = value
      return self
    }
    internal func clearDataupatedtime() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasDataupatedtime = false
         builderResult.dataupatedtime = ""
         return self
    }
    var hasNotifyupdatedflag:Bool {
         get {
              return builderResult.hasNotifyupdatedflag
         }
    }
    var notifyupdatedflag:Int32 {
         get {
              return builderResult.notifyupdatedflag
         }
         set (value) {
             builderResult.hasNotifyupdatedflag = true
             builderResult.notifyupdatedflag = value
         }
    }
    func setNotifyupdatedflag(value:Int32)-> Comm.PkgNotifyReplyBuilder {
      self.notifyupdatedflag = value
      return self
    }
    internal func clearNotifyupdatedflag() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasNotifyupdatedflag = false
         builderResult.notifyupdatedflag = Int32(0)
         return self
    }
    var hasCompanyinfo:Bool {
         get {
             return builderResult.hasCompanyinfo
         }
    }
    var companyinfo:Comm.PkgCompanyInfo! {
         get {
             return builderResult.companyinfo
         }
         set (value) {
             builderResult.hasCompanyinfo = true
             builderResult.companyinfo = value
         }
    }
    func setCompanyinfo(value:Comm.PkgCompanyInfo!)-> Comm.PkgNotifyReplyBuilder {
      self.companyinfo = value
      return self
    }
    internal func mergeCompanyinfo(value:Comm.PkgCompanyInfo) -> Comm.PkgNotifyReplyBuilder {
      if (builderResult.hasCompanyinfo) {
        builderResult.companyinfo = Comm.PkgCompanyInfo.builderWithPrototype(builderResult.companyinfo).mergeFrom(value).buildPartial()
      } else {
        builderResult.companyinfo = value
      }
      builderResult.hasCompanyinfo = true
      return self
    }
    internal func clearCompanyinfo() -> Comm.PkgNotifyReplyBuilder {
      builderResult.hasCompanyinfo = false
      builderResult.companyinfo = nil
      return self
    }
    var hasTasknumbernotfinished:Bool {
         get {
              return builderResult.hasTasknumbernotfinished
         }
    }
    var tasknumbernotfinished:Int32 {
         get {
              return builderResult.tasknumbernotfinished
         }
         set (value) {
             builderResult.hasTasknumbernotfinished = true
             builderResult.tasknumbernotfinished = value
         }
    }
    func setTasknumbernotfinished(value:Int32)-> Comm.PkgNotifyReplyBuilder {
      self.tasknumbernotfinished = value
      return self
    }
    internal func clearTasknumbernotfinished() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasTasknumbernotfinished = false
         builderResult.tasknumbernotfinished = Int32(0)
         return self
    }
    var hasTasknumberfinished:Bool {
         get {
              return builderResult.hasTasknumberfinished
         }
    }
    var tasknumberfinished:Int32 {
         get {
              return builderResult.tasknumberfinished
         }
         set (value) {
             builderResult.hasTasknumberfinished = true
             builderResult.tasknumberfinished = value
         }
    }
    func setTasknumberfinished(value:Int32)-> Comm.PkgNotifyReplyBuilder {
      self.tasknumberfinished = value
      return self
    }
    internal func clearTasknumberfinished() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasTasknumberfinished = false
         builderResult.tasknumberfinished = Int32(0)
         return self
    }
    var hasVersionlastest:Bool {
         get {
              return builderResult.hasVersionlastest
         }
    }
    var versionlastest:String {
         get {
              return builderResult.versionlastest
         }
         set (value) {
             builderResult.hasVersionlastest = true
             builderResult.versionlastest = value
         }
    }
    func setVersionlastest(value:String)-> Comm.PkgNotifyReplyBuilder {
      self.versionlastest = value
      return self
    }
    internal func clearVersionlastest() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasVersionlastest = false
         builderResult.versionlastest = ""
         return self
    }
    var hasVersiondownloadurl:Bool {
         get {
              return builderResult.hasVersiondownloadurl
         }
    }
    var versiondownloadurl:String {
         get {
              return builderResult.versiondownloadurl
         }
         set (value) {
             builderResult.hasVersiondownloadurl = true
             builderResult.versiondownloadurl = value
         }
    }
    func setVersiondownloadurl(value:String)-> Comm.PkgNotifyReplyBuilder {
      self.versiondownloadurl = value
      return self
    }
    internal func clearVersiondownloadurl() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasVersiondownloadurl = false
         builderResult.versiondownloadurl = ""
         return self
    }
    var hasPermission:Bool {
         get {
              return builderResult.hasPermission
         }
    }
    var permission:Int32 {
         get {
              return builderResult.permission
         }
         set (value) {
             builderResult.hasPermission = true
             builderResult.permission = value
         }
    }
    func setPermission(value:Int32)-> Comm.PkgNotifyReplyBuilder {
      self.permission = value
      return self
    }
    internal func clearPermission() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasPermission = false
         builderResult.permission = Int32(0)
         return self
    }
    var hasRolename:Bool {
         get {
              return builderResult.hasRolename
         }
    }
    var rolename:String {
         get {
              return builderResult.rolename
         }
         set (value) {
             builderResult.hasRolename = true
             builderResult.rolename = value
         }
    }
    func setRolename(value:String)-> Comm.PkgNotifyReplyBuilder {
      self.rolename = value
      return self
    }
    internal func clearRolename() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasRolename = false
         builderResult.rolename = ""
         return self
    }
    var hasPermissionroleid:Bool {
         get {
              return builderResult.hasPermissionroleid
         }
    }
    var permissionroleid:Int32 {
         get {
              return builderResult.permissionroleid
         }
         set (value) {
             builderResult.hasPermissionroleid = true
             builderResult.permissionroleid = value
         }
    }
    func setPermissionroleid(value:Int32)-> Comm.PkgNotifyReplyBuilder {
      self.permissionroleid = value
      return self
    }
    internal func clearPermissionroleid() -> Comm.PkgNotifyReplyBuilder{
         builderResult.hasPermissionroleid = false
         builderResult.permissionroleid = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgNotifyReplyBuilder {
      builderResult = Comm.PkgNotifyReply()
      return self
    }
    internal override func clone() -> Comm.PkgNotifyReplyBuilder {
      return Comm.PkgNotifyReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgNotifyReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgNotifyReply {
      var returnMe:Comm.PkgNotifyReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgNotifyReply) -> Comm.PkgNotifyReplyBuilder {
      if (other == Comm.PkgNotifyReply()) {
       return self
      }
      if other.hasDataupatedtime {
           dataupatedtime = other.dataupatedtime
      }
      if other.hasNotifyupdatedflag {
           notifyupdatedflag = other.notifyupdatedflag
      }
      if (other.hasCompanyinfo) {
          mergeCompanyinfo(other.companyinfo)
      }
      if other.hasTasknumbernotfinished {
           tasknumbernotfinished = other.tasknumbernotfinished
      }
      if other.hasTasknumberfinished {
           tasknumberfinished = other.tasknumberfinished
      }
      if other.hasVersionlastest {
           versionlastest = other.versionlastest
      }
      if other.hasVersiondownloadurl {
           versiondownloadurl = other.versiondownloadurl
      }
      if other.hasPermission {
           permission = other.permission
      }
      if other.hasRolename {
           rolename = other.rolename
      }
      if other.hasPermissionroleid {
           permissionroleid = other.permissionroleid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgNotifyReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgNotifyReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 802 :
          dataupatedtime = input.readString()

        case 808 :
          notifyupdatedflag = input.readInt32()

        case 8002 :
          var subBuilder:Comm.PkgCompanyInfoBuilder = Comm.PkgCompanyInfo.builder()
          if hasCompanyinfo {
            subBuilder.mergeFrom(companyinfo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          companyinfo = subBuilder.buildPartial()

        case 8088 :
          tasknumbernotfinished = input.readInt32()

        case 8096 :
          tasknumberfinished = input.readInt32()

        case 8242 :
          versionlastest = input.readString()

        case 8330 :
          versiondownloadurl = input.readString()

        case 8408 :
          permission = input.readInt32()

        case 8418 :
          rolename = input.readString()

        case 8424 :
          permissionroleid = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgPhoneCppWrapReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnReqType:Int32 {
        case PonewrapLoginsuccess = 0
        case PonewrapGetusertaskupdatetime = 1
        case PonewrapSetusertaskupdatetimeandtasks = 2
        case PonewrapQuerypagetasks = 3
        case PonewrapQuerytaskdetail = 4

      }

      //Enum type declaration end 

    private(set) var hasUserid:Bool = false
    private(set) var userid:Int32 = Int32(0)

    private(set) var enreqtype:Comm.PkgPhoneCppWrapReq.EnReqType = Comm.PkgPhoneCppWrapReq.EnReqType.PonewrapLoginsuccess
    private(set) var hasEnreqtype:Bool = false
    private(set) var hasLasttaskupdatetime:Bool = false
    private(set) var lasttaskupdatetime:String = ""

    private(set) var hasTaskpagequeryreq:Bool = false
    private(set) var taskpagequeryreq:Comm.PkgTaskPageQueryReq!
    private(set) var hasTaskqueryreq:Bool = false
    private(set) var taskqueryreq:Comm.PkgTaskQueryReq!
    private(set) var taskinfolist:Array<Comm.PkgTaskInfo>  = Array<Comm.PkgTaskInfo>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasUserid {
        return false
      }
      if !hasEnreqtype {
        return false
      }
      if hasTaskpagequeryreq {
       if !taskpagequeryreq.isInitialized() {
         return false
       }
      }
      if hasTaskqueryreq {
       if !taskqueryreq.isInitialized() {
         return false
       }
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUserid {
        output.writeInt32(1, value:userid)
      }
      if hasEnreqtype {
        output.writeEnum(2, value:enreqtype.rawValue)
      }
      if hasLasttaskupdatetime {
        output.writeString(1000, value:lasttaskupdatetime)
      }
      for oneElementtaskinfolist in taskinfolist {
          output.writeMessage(1001, value:oneElementtaskinfolist)
      }
      if hasTaskpagequeryreq {
        output.writeMessage(1011, value:taskpagequeryreq)
      }
      if hasTaskqueryreq {
        output.writeMessage(1021, value:taskqueryreq)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUserid {
        serialize_size += userid.computeInt32Size(1)
      }
      if (hasEnreqtype) {
        serialize_size += enreqtype.rawValue.computeEnumSize(2)
      }
      if hasLasttaskupdatetime {
        serialize_size += lasttaskupdatetime.computeStringSize(1000)
      }
      for oneElementtaskinfolist in taskinfolist {
          serialize_size += oneElementtaskinfolist.computeMessageSize(1001)
      }
      if hasTaskpagequeryreq {
          if let varSizetaskpagequeryreq = taskpagequeryreq?.computeMessageSize(1011) {
              serialize_size += varSizetaskpagequeryreq
          }
      }
      if hasTaskqueryreq {
          if let varSizetaskqueryreq = taskqueryreq?.computeMessageSize(1021) {
              serialize_size += varSizetaskqueryreq
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgPhoneCppWrapReq {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgPhoneCppWrapReq {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgPhoneCppWrapReq {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgPhoneCppWrapReq {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgPhoneCppWrapReq {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgPhoneCppWrapReq {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgPhoneCppWrapReqBuilder {
      return Comm.PkgPhoneCppWrapReq.classBuilder() as! Comm.PkgPhoneCppWrapReqBuilder
    }
    internal func builder() -> Comm.PkgPhoneCppWrapReqBuilder {
      return classBuilder() as! Comm.PkgPhoneCppWrapReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgPhoneCppWrapReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgPhoneCppWrapReq.builder()
    }
    internal func toBuilder() -> Comm.PkgPhoneCppWrapReqBuilder {
      return Comm.PkgPhoneCppWrapReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgPhoneCppWrapReq) -> Comm.PkgPhoneCppWrapReqBuilder {
      return Comm.PkgPhoneCppWrapReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUserid {
        output += "\(indent) userid: \(userid) \n"
      }
      if (hasEnreqtype) {
        output += "\(indent) enreqtype: \(enreqtype.rawValue)\n"
      }
      if hasLasttaskupdatetime {
        output += "\(indent) lasttaskupdatetime: \(lasttaskupdatetime) \n"
      }
      var taskinfolistElementIndex:Int = 0
      for oneElementtaskinfolist in taskinfolist {
          output += "\(indent) taskinfolist[\(taskinfolistElementIndex)] {\n"
          oneElementtaskinfolist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          taskinfolistElementIndex++
      }
      if hasTaskpagequeryreq {
        output += "\(indent) taskpagequeryreq {\n"
        taskpagequeryreq?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasTaskqueryreq {
        output += "\(indent) taskqueryreq {\n"
        taskqueryreq?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserid {
               hashCode = (hashCode &* 31) &+ userid.hashValue
            }
            if hasEnreqtype {
               hashCode = (hashCode &* 31) &+ Int(enreqtype.rawValue)
            }
            if hasLasttaskupdatetime {
               hashCode = (hashCode &* 31) &+ lasttaskupdatetime.hashValue
            }
            for oneElementtaskinfolist in taskinfolist {
                hashCode = (hashCode &* 31) &+ oneElementtaskinfolist.hashValue
            }
            if hasTaskpagequeryreq {
                if let hashValuetaskpagequeryreq = taskpagequeryreq?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetaskpagequeryreq
                }
            }
            if hasTaskqueryreq {
                if let hashValuetaskqueryreq = taskqueryreq?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetaskqueryreq
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgPhoneCppWrapReq"
    }
    override internal func className() -> String {
        return "Comm.PkgPhoneCppWrapReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgPhoneCppWrapReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgPhoneCppWrapReqBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgPhoneCppWrapReq

    required override internal init () {
       builderResult = Comm.PkgPhoneCppWrapReq()
       super.init()
    }
    var hasUserid:Bool {
         get {
              return builderResult.hasUserid
         }
    }
    var userid:Int32 {
         get {
              return builderResult.userid
         }
         set (value) {
             builderResult.hasUserid = true
             builderResult.userid = value
         }
    }
    func setUserid(value:Int32)-> Comm.PkgPhoneCppWrapReqBuilder {
      self.userid = value
      return self
    }
    internal func clearUserid() -> Comm.PkgPhoneCppWrapReqBuilder{
         builderResult.hasUserid = false
         builderResult.userid = Int32(0)
         return self
    }
      var hasEnreqtype:Bool{
          get {
              return builderResult.hasEnreqtype
          }
      }
      var enreqtype:Comm.PkgPhoneCppWrapReq.EnReqType {
          get {
              return builderResult.enreqtype
          }
          set (value) {
              builderResult.hasEnreqtype = true
              builderResult.enreqtype = value
          }
      }
      internal func setEnreqtype(value:Comm.PkgPhoneCppWrapReq.EnReqType)-> Comm.PkgPhoneCppWrapReqBuilder {
        self.enreqtype = value
        return self
      }
      internal func clearEnreqtype() -> Comm.PkgPhoneCppWrapReqBuilder {
         builderResult.hasEnreqtype = false
         builderResult.enreqtype = .PonewrapLoginsuccess
         return self
      }
    var hasLasttaskupdatetime:Bool {
         get {
              return builderResult.hasLasttaskupdatetime
         }
    }
    var lasttaskupdatetime:String {
         get {
              return builderResult.lasttaskupdatetime
         }
         set (value) {
             builderResult.hasLasttaskupdatetime = true
             builderResult.lasttaskupdatetime = value
         }
    }
    func setLasttaskupdatetime(value:String)-> Comm.PkgPhoneCppWrapReqBuilder {
      self.lasttaskupdatetime = value
      return self
    }
    internal func clearLasttaskupdatetime() -> Comm.PkgPhoneCppWrapReqBuilder{
         builderResult.hasLasttaskupdatetime = false
         builderResult.lasttaskupdatetime = ""
         return self
    }
    var taskinfolist:Array<Comm.PkgTaskInfo> {
         get {
             return builderResult.taskinfolist
         }
         set (value) {
             builderResult.taskinfolist = value
         }
    }
    func setTaskinfolist(value:Array<Comm.PkgTaskInfo>)-> Comm.PkgPhoneCppWrapReqBuilder {
      self.taskinfolist = value
      return self
    }
    internal func clearTaskinfolist() -> Comm.PkgPhoneCppWrapReqBuilder {
      builderResult.taskinfolist.removeAll(keepCapacity: false)
      return self
    }
    var hasTaskpagequeryreq:Bool {
         get {
             return builderResult.hasTaskpagequeryreq
         }
    }
    var taskpagequeryreq:Comm.PkgTaskPageQueryReq! {
         get {
             return builderResult.taskpagequeryreq
         }
         set (value) {
             builderResult.hasTaskpagequeryreq = true
             builderResult.taskpagequeryreq = value
         }
    }
    func setTaskpagequeryreq(value:Comm.PkgTaskPageQueryReq!)-> Comm.PkgPhoneCppWrapReqBuilder {
      self.taskpagequeryreq = value
      return self
    }
    internal func mergeTaskpagequeryreq(value:Comm.PkgTaskPageQueryReq) -> Comm.PkgPhoneCppWrapReqBuilder {
      if (builderResult.hasTaskpagequeryreq) {
        builderResult.taskpagequeryreq = Comm.PkgTaskPageQueryReq.builderWithPrototype(builderResult.taskpagequeryreq).mergeFrom(value).buildPartial()
      } else {
        builderResult.taskpagequeryreq = value
      }
      builderResult.hasTaskpagequeryreq = true
      return self
    }
    internal func clearTaskpagequeryreq() -> Comm.PkgPhoneCppWrapReqBuilder {
      builderResult.hasTaskpagequeryreq = false
      builderResult.taskpagequeryreq = nil
      return self
    }
    var hasTaskqueryreq:Bool {
         get {
             return builderResult.hasTaskqueryreq
         }
    }
    var taskqueryreq:Comm.PkgTaskQueryReq! {
         get {
             return builderResult.taskqueryreq
         }
         set (value) {
             builderResult.hasTaskqueryreq = true
             builderResult.taskqueryreq = value
         }
    }
    func setTaskqueryreq(value:Comm.PkgTaskQueryReq!)-> Comm.PkgPhoneCppWrapReqBuilder {
      self.taskqueryreq = value
      return self
    }
    internal func mergeTaskqueryreq(value:Comm.PkgTaskQueryReq) -> Comm.PkgPhoneCppWrapReqBuilder {
      if (builderResult.hasTaskqueryreq) {
        builderResult.taskqueryreq = Comm.PkgTaskQueryReq.builderWithPrototype(builderResult.taskqueryreq).mergeFrom(value).buildPartial()
      } else {
        builderResult.taskqueryreq = value
      }
      builderResult.hasTaskqueryreq = true
      return self
    }
    internal func clearTaskqueryreq() -> Comm.PkgPhoneCppWrapReqBuilder {
      builderResult.hasTaskqueryreq = false
      builderResult.taskqueryreq = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgPhoneCppWrapReqBuilder {
      builderResult = Comm.PkgPhoneCppWrapReq()
      return self
    }
    internal override func clone() -> Comm.PkgPhoneCppWrapReqBuilder {
      return Comm.PkgPhoneCppWrapReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgPhoneCppWrapReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgPhoneCppWrapReq {
      var returnMe:Comm.PkgPhoneCppWrapReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgPhoneCppWrapReq) -> Comm.PkgPhoneCppWrapReqBuilder {
      if (other == Comm.PkgPhoneCppWrapReq()) {
       return self
      }
      if other.hasUserid {
           userid = other.userid
      }
      if other.hasEnreqtype {
           enreqtype = other.enreqtype
      }
      if other.hasLasttaskupdatetime {
           lasttaskupdatetime = other.lasttaskupdatetime
      }
      if !other.taskinfolist.isEmpty  {
         builderResult.taskinfolist += other.taskinfolist
      }
      if (other.hasTaskpagequeryreq) {
          mergeTaskpagequeryreq(other.taskpagequeryreq)
      }
      if (other.hasTaskqueryreq) {
          mergeTaskqueryreq(other.taskqueryreq)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgPhoneCppWrapReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgPhoneCppWrapReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          userid = input.readInt32()

        case 16 :
          let valueIntenreqtype = input.readEnum()
          if let enumsenreqtype = Comm.PkgPhoneCppWrapReq.EnReqType(rawValue:valueIntenreqtype){
               enreqtype = enumsenreqtype
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntenreqtype))
          }

        case 8002 :
          lasttaskupdatetime = input.readString()

        case 8010 :
          var subBuilder = Comm.PkgTaskInfo.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          taskinfolist += [subBuilder.buildPartial()]

        case 8090 :
          var subBuilder:Comm.PkgTaskPageQueryReqBuilder = Comm.PkgTaskPageQueryReq.builder()
          if hasTaskpagequeryreq {
            subBuilder.mergeFrom(taskpagequeryreq)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          taskpagequeryreq = subBuilder.buildPartial()

        case 8170 :
          var subBuilder:Comm.PkgTaskQueryReqBuilder = Comm.PkgTaskQueryReq.builder()
          if hasTaskqueryreq {
            subBuilder.mergeFrom(taskqueryreq)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          taskqueryreq = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgPhoneCppWrapReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasLasttaskupdatetime:Bool = false
    private(set) var lasttaskupdatetime:String = ""

    private(set) var hasTaskpagequeryreply:Bool = false
    private(set) var taskpagequeryreply:Comm.PkgTaskPageQueryReply!
    private(set) var hasTaskqueryreply:Bool = false
    private(set) var taskqueryreply:Comm.PkgTaskQueryReply!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
      if hasTaskpagequeryreply {
       if !taskpagequeryreply.isInitialized() {
         return false
       }
      }
      if hasTaskqueryreply {
       if !taskqueryreply.isInitialized() {
         return false
       }
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasLasttaskupdatetime {
        output.writeString(1000, value:lasttaskupdatetime)
      }
      if hasTaskpagequeryreply {
        output.writeMessage(1011, value:taskpagequeryreply)
      }
      if hasTaskqueryreply {
        output.writeMessage(1021, value:taskqueryreply)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasLasttaskupdatetime {
        serialize_size += lasttaskupdatetime.computeStringSize(1000)
      }
      if hasTaskpagequeryreply {
          if let varSizetaskpagequeryreply = taskpagequeryreply?.computeMessageSize(1011) {
              serialize_size += varSizetaskpagequeryreply
          }
      }
      if hasTaskqueryreply {
          if let varSizetaskqueryreply = taskqueryreply?.computeMessageSize(1021) {
              serialize_size += varSizetaskqueryreply
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comm.PkgPhoneCppWrapReply {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFromData(data, extensionRegistry:Comm.CommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comm.PkgPhoneCppWrapReply {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comm.PkgPhoneCppWrapReply {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comm.PkgPhoneCppWrapReply {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comm.PkgPhoneCppWrapReply {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgPhoneCppWrapReply {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comm.PkgPhoneCppWrapReplyBuilder {
      return Comm.PkgPhoneCppWrapReply.classBuilder() as! Comm.PkgPhoneCppWrapReplyBuilder
    }
    internal func builder() -> Comm.PkgPhoneCppWrapReplyBuilder {
      return classBuilder() as! Comm.PkgPhoneCppWrapReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comm.PkgPhoneCppWrapReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comm.PkgPhoneCppWrapReply.builder()
    }
    internal func toBuilder() -> Comm.PkgPhoneCppWrapReplyBuilder {
      return Comm.PkgPhoneCppWrapReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comm.PkgPhoneCppWrapReply) -> Comm.PkgPhoneCppWrapReplyBuilder {
      return Comm.PkgPhoneCppWrapReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasLasttaskupdatetime {
        output += "\(indent) lasttaskupdatetime: \(lasttaskupdatetime) \n"
      }
      if hasTaskpagequeryreply {
        output += "\(indent) taskpagequeryreply {\n"
        taskpagequeryreply?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasTaskqueryreply {
        output += "\(indent) taskqueryreply {\n"
        taskqueryreply?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasLasttaskupdatetime {
               hashCode = (hashCode &* 31) &+ lasttaskupdatetime.hashValue
            }
            if hasTaskpagequeryreply {
                if let hashValuetaskpagequeryreply = taskpagequeryreply?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetaskpagequeryreply
                }
            }
            if hasTaskqueryreply {
                if let hashValuetaskqueryreply = taskqueryreply?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetaskqueryreply
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comm.PkgPhoneCppWrapReply"
    }
    override internal func className() -> String {
        return "Comm.PkgPhoneCppWrapReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comm.PkgPhoneCppWrapReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgPhoneCppWrapReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:Comm.PkgPhoneCppWrapReply

    required override internal init () {
       builderResult = Comm.PkgPhoneCppWrapReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> Comm.PkgPhoneCppWrapReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> Comm.PkgPhoneCppWrapReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comm.PkgPhoneCppWrapReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comm.PkgPhoneCppWrapReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasLasttaskupdatetime:Bool {
         get {
              return builderResult.hasLasttaskupdatetime
         }
    }
    var lasttaskupdatetime:String {
         get {
              return builderResult.lasttaskupdatetime
         }
         set (value) {
             builderResult.hasLasttaskupdatetime = true
             builderResult.lasttaskupdatetime = value
         }
    }
    func setLasttaskupdatetime(value:String)-> Comm.PkgPhoneCppWrapReplyBuilder {
      self.lasttaskupdatetime = value
      return self
    }
    internal func clearLasttaskupdatetime() -> Comm.PkgPhoneCppWrapReplyBuilder{
         builderResult.hasLasttaskupdatetime = false
         builderResult.lasttaskupdatetime = ""
         return self
    }
    var hasTaskpagequeryreply:Bool {
         get {
             return builderResult.hasTaskpagequeryreply
         }
    }
    var taskpagequeryreply:Comm.PkgTaskPageQueryReply! {
         get {
             return builderResult.taskpagequeryreply
         }
         set (value) {
             builderResult.hasTaskpagequeryreply = true
             builderResult.taskpagequeryreply = value
         }
    }
    func setTaskpagequeryreply(value:Comm.PkgTaskPageQueryReply!)-> Comm.PkgPhoneCppWrapReplyBuilder {
      self.taskpagequeryreply = value
      return self
    }
    internal func mergeTaskpagequeryreply(value:Comm.PkgTaskPageQueryReply) -> Comm.PkgPhoneCppWrapReplyBuilder {
      if (builderResult.hasTaskpagequeryreply) {
        builderResult.taskpagequeryreply = Comm.PkgTaskPageQueryReply.builderWithPrototype(builderResult.taskpagequeryreply).mergeFrom(value).buildPartial()
      } else {
        builderResult.taskpagequeryreply = value
      }
      builderResult.hasTaskpagequeryreply = true
      return self
    }
    internal func clearTaskpagequeryreply() -> Comm.PkgPhoneCppWrapReplyBuilder {
      builderResult.hasTaskpagequeryreply = false
      builderResult.taskpagequeryreply = nil
      return self
    }
    var hasTaskqueryreply:Bool {
         get {
             return builderResult.hasTaskqueryreply
         }
    }
    var taskqueryreply:Comm.PkgTaskQueryReply! {
         get {
             return builderResult.taskqueryreply
         }
         set (value) {
             builderResult.hasTaskqueryreply = true
             builderResult.taskqueryreply = value
         }
    }
    func setTaskqueryreply(value:Comm.PkgTaskQueryReply!)-> Comm.PkgPhoneCppWrapReplyBuilder {
      self.taskqueryreply = value
      return self
    }
    internal func mergeTaskqueryreply(value:Comm.PkgTaskQueryReply) -> Comm.PkgPhoneCppWrapReplyBuilder {
      if (builderResult.hasTaskqueryreply) {
        builderResult.taskqueryreply = Comm.PkgTaskQueryReply.builderWithPrototype(builderResult.taskqueryreply).mergeFrom(value).buildPartial()
      } else {
        builderResult.taskqueryreply = value
      }
      builderResult.hasTaskqueryreply = true
      return self
    }
    internal func clearTaskqueryreply() -> Comm.PkgPhoneCppWrapReplyBuilder {
      builderResult.hasTaskqueryreply = false
      builderResult.taskqueryreply = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comm.PkgPhoneCppWrapReplyBuilder {
      builderResult = Comm.PkgPhoneCppWrapReply()
      return self
    }
    internal override func clone() -> Comm.PkgPhoneCppWrapReplyBuilder {
      return Comm.PkgPhoneCppWrapReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comm.PkgPhoneCppWrapReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comm.PkgPhoneCppWrapReply {
      var returnMe:Comm.PkgPhoneCppWrapReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comm.PkgPhoneCppWrapReply) -> Comm.PkgPhoneCppWrapReplyBuilder {
      if (other == Comm.PkgPhoneCppWrapReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasLasttaskupdatetime {
           lasttaskupdatetime = other.lasttaskupdatetime
      }
      if (other.hasTaskpagequeryreply) {
          mergeTaskpagequeryreply(other.taskpagequeryreply)
      }
      if (other.hasTaskqueryreply) {
          mergeTaskqueryreply(other.taskqueryreply)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comm.PkgPhoneCppWrapReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comm.PkgPhoneCppWrapReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 8002 :
          lasttaskupdatetime = input.readString()

        case 8090 :
          var subBuilder:Comm.PkgTaskPageQueryReplyBuilder = Comm.PkgTaskPageQueryReply.builder()
          if hasTaskpagequeryreply {
            subBuilder.mergeFrom(taskpagequeryreply)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          taskpagequeryreply = subBuilder.buildPartial()

        case 8170 :
          var subBuilder:Comm.PkgTaskQueryReplyBuilder = Comm.PkgTaskQueryReply.builder()
          if hasTaskqueryreply {
            subBuilder.mergeFrom(taskqueryreply)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          taskqueryreply = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
